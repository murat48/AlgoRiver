/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PredictiveLiquidityMiningV2","structs":{},"methods":[{"name":"createPool","args":[{"type":"string","name":"poolName"},{"type":"string","name":"initialAPY"},{"type":"string","name":"riskLevel"},{"type":"string","name":"minStake"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new liquidity pool with AI prediction capabilities","events":[],"recommendations":{}},{"name":"stakeInPool","args":[{"type":"string","name":"poolId"},{"type":"string","name":"amount"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Stake tokens in a specific pool","events":[],"recommendations":{}},{"name":"unstakeFromPool","args":[{"type":"string","name":"poolId"},{"type":"string","name":"amount"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unstake tokens from a specific pool","events":[],"recommendations":{}},{"name":"emergencyWithdraw","args":[{"type":"string","name":"poolId"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency withdraw (with potential penalties)","events":[],"recommendations":{}},{"name":"getUserStake","args":[{"type":"string","name":"poolId"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user's staked amount in a pool","events":[],"recommendations":{}},{"name":"updateAIPrediction","args":[{"type":"string","name":"poolId"},{"type":"string","name":"newAPY"},{"type":"string","name":"confidence"},{"type":"string","name":"timeframe"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update AI prediction for a pool (admin/oracle function)","events":[],"recommendations":{}},{"name":"submitTrainingData","args":[{"type":"string","name":"contributor"},{"type":"string","name":"dataType"},{"type":"string","name":"dataHash"},{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Submit training data for AI models (Data-Donor DAO)","events":[],"recommendations":{}},{"name":"voteOnProposal","args":[{"type":"string","name":"proposalId"},{"type":"bool","name":"vote"},{"type":"string","name":"voter"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Vote on DAO governance proposals","events":[],"recommendations":{}},{"name":"calculateUserRiskScore","args":[{"type":"string","name":"userAddress"},{"type":"string","name":"portfolioValue"},{"type":"string","name":"tradingFrequency"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Calculate user's risk score based on behavior and portfolio","events":[],"recommendations":{}},{"name":"claimRewards","args":[{"type":"string","name":"userAddress"},{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Claim rewards with AI-enhanced calculations","events":[],"recommendations":{}},{"name":"getPoolStats","args":[{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get pool statistics with AI predictions","events":[],"recommendations":{}},{"name":"emergencyPause","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency pause mechanism for security","events":[],"recommendations":{}},{"name":"getUserPortfolio","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user portfolio summary","events":[],"recommendations":{}},{"name":"getPlatformAnalytics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get platform analytics","events":[],"recommendations":{}},{"name":"getAllTransactions","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions on the platform","events":[],"recommendations":{}},{"name":"getTransactionSummary","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transaction summary statistics","events":[],"recommendations":{}},{"name":"getUserTransactions","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions for a specific user","events":[],"recommendations":{}},{"name":"getPoolTransactions","args":[{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions for a specific pool","events":[],"recommendations":{}},{"name":"getTransactionsByType","args":[{"type":"string","name":"txType"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transactions filtered by type","events":[],"recommendations":{}},{"name":"getTransactionsByDateRange","args":[{"type":"string","name":"startDate"},{"type":"string","name":"endDate"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transactions within a date range","events":[],"recommendations":{}},{"name":"getTransactionDetails","args":[{"type":"string","name":"txId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get detailed information about a specific transaction","events":[],"recommendations":{}},{"name":"getTransactionAnalytics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transaction history for analytics dashboard","events":[],"recommendations":{}},{"name":"getPendingTransactions","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get pending/failed transactions for user","events":[],"recommendations":{}},{"name":"getVolumeStatistics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transaction volume statistics","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Predictive Liquidity Mining Platform Smart Contract v2.0\nFeatures: AI-powered predictions, dynamic rewards, risk scoring, Data-Donor DAO\nNEW: Unstake functions, Emergency withdraw, User stake queries","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[213,578,608,1010,1040,1076,1106,1136,1166,1436,1842,2012,2042,2118,2148,2184,2226,2267,2315,2363,2399,2435,2477,2519],"errorMessage":"OnCompletion is not NoOp"},{"pc":[2572],"errorMessage":"can only call when creating"},{"pc":[216,581,611,1013,1043,1079,1109,1139,1169,1439,1845,2015,2045,2121,2151,2187,2229,2270,2318,2366,2402,2438,2480,2522],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmAwQVH3x1BVBvb2wgCSBieSB1c2VyIDEbQQnjghgEw7mSKgSWzqupBFpBt6EE5xm9vQSpC3cvBNhCHx0EbGQSSAQwxh/vBJDsyQ4EY7dEJQTd+p8oBA0FHXoE+wtOYwTBiTT7BDrf7eUE3AvMdgSrdxaDBM/uxWMEX3MBIgTbehFGBIWcgsoE4TsXSQRstwvzBIyYsjc2GgCOGAkECNoIsAiMCGgIOAgIB98HtQeRB3MHJwcJBl8EyQO7A50DfwNhAz0DHwGNAW8AAiNDMRkURDEYRIDgAhUffHUBWlZvbHVtZSBTdGF0aXN0aWNzOiB7InRvZGF5Ijp7InRvdGFsVm9sdW1lIjoiMiwxNTAsMDAwIiwidHJhbnNhY3Rpb25zIjo4OSwiYXZlcmFnZVNpemUiOiIyNCwxNTcifSwidGhpc1dlZWsiOnsidG90YWxWb2x1bWUiOiIxMiw3NTAsMDAwIiwidHJhbnNhY3Rpb25zIjo1NDIsImF2ZXJhZ2VTaXplIjoiMjMsNTI0In0sInRoaXNNb250aCI6eyJ0b3RhbFZvbHVtZSI6IjQ1LDI1MCwwMDAiLCJ0cmFuc2FjdGlvbnMiOjE4NDcsImF2ZXJhZ2VTaXplIjoiMjQsNTA0In0sImFsbFRpbWUiOnsidG90YWxWb2x1bWUiOiIxNTYsNzUwLDAwMCIsInRyYW5zYWN0aW9ucyI6Njc4OSwiYXZlcmFnZVNpemUiOiIyMywwODkifX2wIkMxGRREMRhENhoBVwIAiBT1SRUWVwYCTFAoTFCwIkMxGRREMRhEgIUDFR98dQF/VHJhbnNhY3Rpb24gQW5hbHl0aWNzOiB7ImRhaWx5Vm9sdW1lIjp7IjIwMjUtMDktMjUiOiI0NTAwMDAiLCIyMDI1LTA5LTI2IjoiNTIwMDAwIiwiMjAyNS0wOS0yNyI6IjM4MDAwMCJ9LCJ0cmFuc2FjdGlvblR5cGVzIjp7IlNUQUtFIjo2NywiVU5TVEFLRSI6MTgsIlJFV0FSRF9DTEFJTSI6MTV9LCJ0b3BQb29scyI6W3sicG9vbElkIjoicG9vbF9hbGdvcmFuZCIsInZvbHVtZSI6Ijg1MDAwMCIsInRyYW5zYWN0aW9ucyI6NDV9LHsicG9vbElkIjoicG9vbF9ldGhlcmV1bSIsInZvbHVtZSI6IjcyMDAwMCIsInRyYW5zYWN0aW9ucyI6Mzh9XSwidXNlckdyb3d0aCI6eyJuZXdVc2VyczI0aCI6MjMsImFjdGl2ZVVzZXJzMjRoIjo0NTYsInJldGVudGlvblJhdGUiOiI4NSUifX2wIkMxGRREMRhENhoBVwIAiBGWSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIAiBBSSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIAiA0oSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIAiAuvSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIAiAncSRUWVwYCTFAoTFCwIkMxGRREMRhEgIECFR98dQD7VHJhbnNhY3Rpb24gU3VtbWFyeTogeyJ0b3RhbFRyYW5zYWN0aW9ucyI6MTU0NywidG90YWxTdGFrZWQiOiIxNSw3NTAsMDAwIiwidG90YWxVbnN0YWtlZCI6IjMsMjUwLDAwMCIsInRvdGFsUmV3YXJkc0NsYWltZWQiOiI4NzUsMDAwIiwiYWN0aXZlVHJhbnNhY3Rpb25zMjRoIjo4OSwic3Rha2luZ1ZvbHVtZTI0aCI6IjIsMTUwLDAwMCIsInRvcFBvb2wiOiJwb29sX2FsZ29yYW5kX2RlZmkiLCJhdmVyYWdlU3Rha2VTaXplIjoiMTIsNTAwIn2wIkMxGRREMRhEgIkDFR98dQGDUGxhdGZvcm0gVHJhbnNhY3Rpb25zOiBbeyJ0eElkIjoiMHgxYTJiM2MiLCJ0eXBlIjoiU1RBS0UiLCJhbW91bnQiOiIxMDAwIiwicG9vbElkIjoicG9vbF8xIiwidXNlciI6IkFERFIxIiwidGltZXN0YW1wIjoiMjAyNS0wOS0yN1QxMDozMDowMFoifSx7InR4SWQiOiIweDRkNWU2ZiIsInR5cGUiOiJVTlNUQUtFIiwiYW1vdW50IjoiNTAwIiwicG9vbElkIjoicG9vbF8yIiwidXNlciI6IkFERFIyIiwidGltZXN0YW1wIjoiMjAyNS0wOS0yN1QxMToxNTowMFoifSx7InR4SWQiOiIweDdnOGg5aSIsInR5cGUiOiJSRVdBUkRfQ0xBSU0iLCJhbW91bnQiOiI3NSIsInBvb2xJZCI6InBvb2xfMSIsInVzZXIiOiJBRERSMSIsInRpbWVzdGFtcCI6IjIwMjUtMDktMjdUMTI6MDA6MDBaIn1dsCJDMRkURDEYRICdARUffHUAl1BsYXRmb3JtIEFuYWx5dGljczogVG90YWwgcG9vbHM6IDQ3LCBBY3RpdmUgbWluZXJzOiAxLDIzNCwgVG90YWwgcmV3YXJkcyBkaXN0cmlidXRlZDogMTI1LDAwMCB0b2tlbnMsIEF2ZXJhZ2UgQVBZOiAxMi41JSwgQUkgcHJlZGljdGlvbiBhY2N1cmFjeTogODcuMyWwIkMxGRREMRhENhoBVwIAiAYOSRUWVwYCTFAoTFCwIkMxGRREMRhEgEAVH3x1ADpQbGF0Zm9ybSBwYXVzZWQgZm9yIG1haW50ZW5hbmNlLiBBbGwgb3BlcmF0aW9ucyBzdXNwZW5kZWQusCJDMRkURDEYRDYaAVcCAIgFRUkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCAIgEuUkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCAIgEMkkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAiNTNhoDVwIAiAPDSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIANhoDVwIANhoEVwIAiALWSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIANhoDVwIANhoEVwIAiAJYSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIAiAHsSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIAiAFzSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIANhoDVwIAiAEJSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIANhoDVwIAiACjSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIANhoDVwIANhoEVwIAiAAZSRUWVwYCTFAoTFCwIkMxGUD2xzEYFEQiQ4oEASmL/FCADiBjcmVhdGVkIHdpdGggUIv9UIATJSBBUFksIHJpc2sgbGV2ZWw6IFCL/lCAESwgbWluaW11bSBzdGFrZTogUIv/UIALIG1pY3JvQWxnb3NQiYoDAYAUU3VjY2Vzc2Z1bGx5IHN0YWtlZCCL/lCAFCBtaWNyb0FsZ29zIGluIHBvb2wgUIv9UCpQi/9QiYoDAYAWU3VjY2Vzc2Z1bGx5IHVuc3Rha2VkIIv+UIAWIG1pY3JvQWxnb3MgZnJvbSBwb29sIFCL/VAqUIv/UImKAgGAIkVtZXJnZW5jeSB3aXRoZHJhd2FsIGV4ZWN1dGVkIGZvciCL/1CACyBmcm9tIHBvb2wgUIv+UIAWLiBQZW5hbHRpZXMgbWF5IGFwcGx5LlCJigIBgAVVc2VyIIv/UIAbIGhhcyBzdGFrZWQgYW1vdW50IGluIHBvb2wgUIv+UIAWOiAxLDUwMCwwMDAgbWljcm9BbGdvc1CJigQBKYv8UIAYIEFJIHByZWRpY3Rpb24gdXBkYXRlZDogUIv9UIALJSBBUFkgd2l0aCBQi/5QgBElIGNvbmZpZGVuY2UgZm9yIFCL/1CJigQBi/2AC21hcmtldF9kYXRhEkEAZYADMTAwgBJEYXRhIHN1Ym1pdHRlZCBieSCL/FCACiBmb3IgcG9vbCBQi/9QgA0uIERhdGEgaGFzaDogUIv+UIAVLiBHb3Zlcm5hbmNlIHJld2FyZDogUExQgAggdG9rZW5zLlCJi/2ADmxpcXVpZGl0eV9kYXRhEkEACIADMTUwQv+Ci/2ADXVzZXJfYmVoYXZpb3ISQQAIgAMyMDBC/2WAAjUwQv9eigMBi/5BADKAA0ZPUoAWVm90ZSBjYXN0IG9uIHByb3Bvc2FsIIv9UIAEIGJ5IFCL/1CAAjogUExQiYAHQUdBSU5TVEL/x4oDAYAPUmlzayBzY29yZSBmb3Igi/1QgCI6IDY1LzEwMCBiYXNlZCBvbiBwb3J0Zm9saW8gdmFsdWUgUIv+UIAXIGFuZCB0cmFkaW5nIGZyZXF1ZW5jeSBQi/9QiYoCAYv+gAkgY2xhaW1lZCBQgAMxMjBQgBIgdG9rZW5zIGZyb20gcG9vbCBQi/9QgDUuIFJld2FyZHMgY2FsY3VsYXRlZCB1c2luZyBBSS1wb3dlcmVkIGR5bmFtaWMgc3lzdGVtLlCJigEBKYv/UIBUOiBDdXJyZW50IEFQWSAxNS41JSwgUHJlZGljdGVkIEFQWSAxOC4yJSAoODclIGNvbmZpZGVuY2UpLCBUVkw6IDEsNTAwLDAwMCBtaWNyb0FsZ29zUImKAQGADlBvcnRmb2xpbyBmb3Igi/9QgEg6IEFjdGl2ZSBwb3NpdGlvbnMgdHJhY2tlZCwgcmV3YXJkcyBhdmFpbGFibGUsIHJpc2sgYXNzZXNzbWVudCBjb21wbGV0ZWRQiYoBAYAWVXNlciBUcmFuc2FjdGlvbnMgZm9yIIv/UICSAzogW3sidHhJZCI6IjB4dXNlcjEiLCJ0eXBlIjoiU1RBS0UiLCJhbW91bnQiOiIyMDAwIiwicG9vbElkIjoicG9vbF9hbGdvcmFuZCIsInRpbWVzdGFtcCI6IjIwMjUtMDktMjVUMTQ6MjA6MDBaIiwic3RhdHVzIjoiQ09NUExFVEVEIn0seyJ0eElkIjoiMHh1c2VyMiIsInR5cGUiOiJSRVdBUkRfQ0xBSU0iLCJhbW91bnQiOiI0NSIsInBvb2xJZCI6InBvb2xfYWxnb3JhbmQiLCJ0aW1lc3RhbXAiOiIyMDI1LTA5LTI2VDA5OjMwOjAwWiIsInN0YXR1cyI6IkNPTVBMRVRFRCJ9LHsidHhJZCI6IjB4dXNlcjMiLCJ0eXBlIjoiVU5TVEFLRSIsImFtb3VudCI6IjUwMCIsInBvb2xJZCI6InBvb2xfYWxnb3JhbmQiLCJ0aW1lc3RhbXAiOiIyMDI1LTA5LTI3VDA4OjE1OjAwWiIsInN0YXR1cyI6IkNPTVBMRVRFRCJ9XVCJigEBgBZQb29sIFRyYW5zYWN0aW9ucyBmb3Igi/9QgLgCOiBbeyJ0eElkIjoiMHhwb29sMSIsInR5cGUiOiJTVEFLRSIsImFtb3VudCI6IjUwMDAiLCJ1c2VyIjoiVVNFUl9BIiwidGltZXN0YW1wIjoiMjAyNS0wOS0yN1QwNzowMDowMFoifSx7InR4SWQiOiIweHBvb2wyIiwidHlwZSI6IlNUQUtFIiwiYW1vdW50IjoiMzAwMCIsInVzZXIiOiJVU0VSX0IiLCJ0aW1lc3RhbXAiOiIyMDI1LTA5LTI3VDA4OjMwOjAwWiJ9LHsidHhJZCI6IjB4cG9vbDMiLCJ0eXBlIjoiUkVXQVJEX0NMQUlNIiwiYW1vdW50IjoiMTIwIiwidXNlciI6IlVTRVJfQSIsInRpbWVzdGFtcCI6IjIwMjUtMDktMjdUMTA6NDU6MDBaIn1dUImKAQGL/4AFU1RBS0USQQDlgOEBU1RBS0UgVHJhbnNhY3Rpb25zOiBbeyJ0eElkIjoiMHhzdGsxIiwiYW1vdW50IjoiMTAwMCIsInBvb2xJZCI6InBvb2xfMSIsInVzZXIiOiJBRERSMSIsInRpbWVzdGFtcCI6IjIwMjUtMDktMjdUMTA6MzA6MDBaIn0seyJ0eElkIjoiMHhzdGsyIiwiYW1vdW50IjoiMjUwMCIsInBvb2xJZCI6InBvb2xfMiIsInVzZXIiOiJBRERSMiIsInRpbWVzdGFtcCI6IjIwMjUtMDktMjdUMTE6MDA6MDBaIn1diYv/gAdVTlNUQUtFEkEA5YDhAVVOU1RBS0UgVHJhbnNhY3Rpb25zOiBbeyJ0eElkIjoiMHh1bnMxIiwiYW1vdW50IjoiNTAwIiwicG9vbElkIjoicG9vbF8xIiwidXNlciI6IkFERFIxIiwidGltZXN0YW1wIjoiMjAyNS0wOS0yN1QxMjoxNTowMFoifSx7InR4SWQiOiIweHVuczIiLCJhbW91bnQiOiI3NTAiLCJwb29sSWQiOiJwb29sXzMiLCJ1c2VyIjoiQUREUjMiLCJ0aW1lc3RhbXAiOiIyMDI1LTA5LTI3VDEzOjMwOjAwWiJ9XYmL/4AMUkVXQVJEX0NMQUlNEkEA6YDlAVJFV0FSRF9DTEFJTSBUcmFuc2FjdGlvbnM6IFt7InR4SWQiOiIweHJ3ZDEiLCJhbW91bnQiOiI3NSIsInBvb2xJZCI6InBvb2xfMSIsInVzZXIiOiJBRERSMSIsInRpbWVzdGFtcCI6IjIwMjUtMDktMjdUMTQ6MDA6MDBaIn0seyJ0eElkIjoiMHhyd2QyIiwiYW1vdW50IjoiMTI1IiwicG9vbElkIjoicG9vbF8yIiwidXNlciI6IkFERFIyIiwidGltZXN0YW1wIjoiMjAyNS0wOS0yN1QxNDo0NTowMFoifV2JgCBObyB0cmFuc2FjdGlvbnMgZm91bmQgZm9yIHR5cGU6IIv/UImKAgGAElRyYW5zYWN0aW9ucyBmcm9tIIv+UIAEIHRvIFCL/1CAajogW3sidHhJZCI6IjB4ZGF0ZTEiLCJ0eXBlIjoiU1RBS0UiLCJhbW91bnQiOiIxNTAwIiwicG9vbElkIjoicG9vbF9hbGdvcmFuZCIsInVzZXIiOiJVU0VSX1giLCJ0aW1lc3RhbXAiOiJQi/5QgHVUMDk6MDA6MDBaIn0seyJ0eElkIjoiMHhkYXRlMiIsInR5cGUiOiJVTlNUQUtFIiwiYW1vdW50IjoiNjAwIiwicG9vbElkIjoicG9vbF9ldGhlcmV1bSIsInVzZXIiOiJVU0VSX1kiLCJ0aW1lc3RhbXAiOiJQi/9QgA1UMTY6MzA6MDBaIn1dUImKAQGAGFRyYW5zYWN0aW9uIERldGFpbHMgZm9yIIv/UIALOiB7InR4SWQiOiJQi/9QgPkCIiwidHlwZSI6IlNUQUtFIiwiYW1vdW50IjoiMjUwMCIsInBvb2xJZCI6InBvb2xfYWxnb3JhbmRfZGVmaSIsInBvb2xOYW1lIjoiQWxnb3JhbmQgRGVGaSBQb29sIiwidXNlciI6IkFMR09SQU5EX1VTRVJfMTIzIiwidXNlclJpc2tTY29yZSI6IjY1IiwidGltZXN0YW1wIjoiMjAyNS0wOS0yN1QxMDozMDowMFoiLCJibG9ja0hlaWdodCI6IjEyMzQ1Njc4IiwiZ2FzVXNlZCI6IjAuMDAxIiwic3RhdHVzIjoiQ09NUExFVEVEIiwiYWlQcmVkaWN0aW9uQXRUaW1lIjoiMTguNSUiLCJjdXJyZW50QVBZIjoiMTUuMiUiLCJyZXdhcmRzRWFybmVkIjoiMCIsInN0YWtpbmdQZXJpb2QiOiIwIGRheXMiLCJwZW5hbHRpZXMiOiIwIiwiY29udHJhY3RWZXJzaW9uIjoiMi4wIn1QiYoBAYAZUGVuZGluZyBUcmFuc2FjdGlvbnMgZm9yIIv/UIC7AjogW3sidHhJZCI6IjB4cGVuZDEiLCJ0eXBlIjoiU1RBS0UiLCJhbW91bnQiOiIxMDAwIiwicG9vbElkIjoicG9vbF8xIiwic3RhdHVzIjoiUEVORElORyIsInRpbWVzdGFtcCI6IjIwMjUtMDktMjdUMTU6MDA6MDBaIiwicmVhc29uIjoiV2FpdGluZyBmb3IgY29uZmlybWF0aW9uIn0seyJ0eElkIjoiMHhmYWlsMSIsInR5cGUiOiJVTlNUQUtFIiwiYW1vdW50IjoiMjAwIiwicG9vbElkIjoicG9vbF8yIiwic3RhdHVzIjoiRkFJTEVEIiwidGltZXN0YW1wIjoiMjAyNS0wOS0yN1QxNDozMDowMFoiLCJyZWFzb24iOiJJbnN1ZmZpY2llbnQgYmFsYW5jZSJ9XVCJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PredictiveLiquidityMiningV2 contract
 */
export type PredictiveLiquidityMiningV2Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createPool(string,string,string,string)string': {
      poolName: string
      initialApy: string
      riskLevel: string
      minStake: string
    }
    'stakeInPool(string,string,string)string': {
      poolId: string
      amount: string
      userAddress: string
    }
    'unstakeFromPool(string,string,string)string': {
      poolId: string
      amount: string
      userAddress: string
    }
    'emergencyWithdraw(string,string)string': {
      poolId: string
      userAddress: string
    }
    'getUserStake(string,string)string': {
      poolId: string
      userAddress: string
    }
    'updateAIPrediction(string,string,string,string)string': {
      poolId: string
      newApy: string
      confidence: string
      timeframe: string
    }
    'submitTrainingData(string,string,string,string)string': {
      contributor: string
      dataType: string
      dataHash: string
      poolId: string
    }
    'voteOnProposal(string,bool,string)string': {
      proposalId: string
      vote: boolean
      voter: string
    }
    'calculateUserRiskScore(string,string,string)string': {
      userAddress: string
      portfolioValue: string
      tradingFrequency: string
    }
    'claimRewards(string,string)string': {
      userAddress: string
      poolId: string
    }
    'getPoolStats(string)string': {
      poolId: string
    }
    'emergencyPause()string': Record<string, never>
    'getUserPortfolio(string)string': {
      userAddress: string
    }
    'getPlatformAnalytics()string': Record<string, never>
    'getAllTransactions()string': Record<string, never>
    'getTransactionSummary()string': Record<string, never>
    'getUserTransactions(string)string': {
      userAddress: string
    }
    'getPoolTransactions(string)string': {
      poolId: string
    }
    'getTransactionsByType(string)string': {
      txType: string
    }
    'getTransactionsByDateRange(string,string)string': {
      startDate: string
      endDate: string
    }
    'getTransactionDetails(string)string': {
      txId: string
    }
    'getTransactionAnalytics()string': Record<string, never>
    'getPendingTransactions(string)string': {
      userAddress: string
    }
    'getVolumeStatistics()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createPool(string,string,string,string)string': [poolName: string, initialApy: string, riskLevel: string, minStake: string]
    'stakeInPool(string,string,string)string': [poolId: string, amount: string, userAddress: string]
    'unstakeFromPool(string,string,string)string': [poolId: string, amount: string, userAddress: string]
    'emergencyWithdraw(string,string)string': [poolId: string, userAddress: string]
    'getUserStake(string,string)string': [poolId: string, userAddress: string]
    'updateAIPrediction(string,string,string,string)string': [poolId: string, newApy: string, confidence: string, timeframe: string]
    'submitTrainingData(string,string,string,string)string': [contributor: string, dataType: string, dataHash: string, poolId: string]
    'voteOnProposal(string,bool,string)string': [proposalId: string, vote: boolean, voter: string]
    'calculateUserRiskScore(string,string,string)string': [userAddress: string, portfolioValue: string, tradingFrequency: string]
    'claimRewards(string,string)string': [userAddress: string, poolId: string]
    'getPoolStats(string)string': [poolId: string]
    'emergencyPause()string': []
    'getUserPortfolio(string)string': [userAddress: string]
    'getPlatformAnalytics()string': []
    'getAllTransactions()string': []
    'getTransactionSummary()string': []
    'getUserTransactions(string)string': [userAddress: string]
    'getPoolTransactions(string)string': [poolId: string]
    'getTransactionsByType(string)string': [txType: string]
    'getTransactionsByDateRange(string,string)string': [startDate: string, endDate: string]
    'getTransactionDetails(string)string': [txId: string]
    'getTransactionAnalytics()string': []
    'getPendingTransactions(string)string': [userAddress: string]
    'getVolumeStatistics()string': []
  }
}

/**
 * The return type for each method
 */
export type PredictiveLiquidityMiningV2Returns = {
  'createPool(string,string,string,string)string': string
  'stakeInPool(string,string,string)string': string
  'unstakeFromPool(string,string,string)string': string
  'emergencyWithdraw(string,string)string': string
  'getUserStake(string,string)string': string
  'updateAIPrediction(string,string,string,string)string': string
  'submitTrainingData(string,string,string,string)string': string
  'voteOnProposal(string,bool,string)string': string
  'calculateUserRiskScore(string,string,string)string': string
  'claimRewards(string,string)string': string
  'getPoolStats(string)string': string
  'emergencyPause()string': string
  'getUserPortfolio(string)string': string
  'getPlatformAnalytics()string': string
  'getAllTransactions()string': string
  'getTransactionSummary()string': string
  'getUserTransactions(string)string': string
  'getPoolTransactions(string)string': string
  'getTransactionsByType(string)string': string
  'getTransactionsByDateRange(string,string)string': string
  'getTransactionDetails(string)string': string
  'getTransactionAnalytics()string': string
  'getPendingTransactions(string)string': string
  'getVolumeStatistics()string': string
}

/**
 * Defines the types of available calls and state of the PredictiveLiquidityMiningV2 smart contract.
 */
export type PredictiveLiquidityMiningV2Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createPool(string,string,string,string)string' | 'createPool', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['createPool(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['createPool(string,string,string,string)string']
      returns: PredictiveLiquidityMiningV2Returns['createPool(string,string,string,string)string']
    }>
    & Record<'stakeInPool(string,string,string)string' | 'stakeInPool', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['stakeInPool(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['stakeInPool(string,string,string)string']
      returns: PredictiveLiquidityMiningV2Returns['stakeInPool(string,string,string)string']
    }>
    & Record<'unstakeFromPool(string,string,string)string' | 'unstakeFromPool', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['unstakeFromPool(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['unstakeFromPool(string,string,string)string']
      returns: PredictiveLiquidityMiningV2Returns['unstakeFromPool(string,string,string)string']
    }>
    & Record<'emergencyWithdraw(string,string)string' | 'emergencyWithdraw', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['emergencyWithdraw(string,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['emergencyWithdraw(string,string)string']
      returns: PredictiveLiquidityMiningV2Returns['emergencyWithdraw(string,string)string']
    }>
    & Record<'getUserStake(string,string)string' | 'getUserStake', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getUserStake(string,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getUserStake(string,string)string']
      returns: PredictiveLiquidityMiningV2Returns['getUserStake(string,string)string']
    }>
    & Record<'updateAIPrediction(string,string,string,string)string' | 'updateAIPrediction', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['updateAIPrediction(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['updateAIPrediction(string,string,string,string)string']
      returns: PredictiveLiquidityMiningV2Returns['updateAIPrediction(string,string,string,string)string']
    }>
    & Record<'submitTrainingData(string,string,string,string)string' | 'submitTrainingData', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['submitTrainingData(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['submitTrainingData(string,string,string,string)string']
      returns: PredictiveLiquidityMiningV2Returns['submitTrainingData(string,string,string,string)string']
    }>
    & Record<'voteOnProposal(string,bool,string)string' | 'voteOnProposal', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['voteOnProposal(string,bool,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['voteOnProposal(string,bool,string)string']
      returns: PredictiveLiquidityMiningV2Returns['voteOnProposal(string,bool,string)string']
    }>
    & Record<'calculateUserRiskScore(string,string,string)string' | 'calculateUserRiskScore', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['calculateUserRiskScore(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['calculateUserRiskScore(string,string,string)string']
      returns: PredictiveLiquidityMiningV2Returns['calculateUserRiskScore(string,string,string)string']
    }>
    & Record<'claimRewards(string,string)string' | 'claimRewards', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['claimRewards(string,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['claimRewards(string,string)string']
      returns: PredictiveLiquidityMiningV2Returns['claimRewards(string,string)string']
    }>
    & Record<'getPoolStats(string)string' | 'getPoolStats', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getPoolStats(string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getPoolStats(string)string']
      returns: PredictiveLiquidityMiningV2Returns['getPoolStats(string)string']
    }>
    & Record<'emergencyPause()string' | 'emergencyPause', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['emergencyPause()string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['emergencyPause()string']
      returns: PredictiveLiquidityMiningV2Returns['emergencyPause()string']
    }>
    & Record<'getUserPortfolio(string)string' | 'getUserPortfolio', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getUserPortfolio(string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getUserPortfolio(string)string']
      returns: PredictiveLiquidityMiningV2Returns['getUserPortfolio(string)string']
    }>
    & Record<'getPlatformAnalytics()string' | 'getPlatformAnalytics', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getPlatformAnalytics()string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getPlatformAnalytics()string']
      returns: PredictiveLiquidityMiningV2Returns['getPlatformAnalytics()string']
    }>
    & Record<'getAllTransactions()string' | 'getAllTransactions', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getAllTransactions()string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getAllTransactions()string']
      returns: PredictiveLiquidityMiningV2Returns['getAllTransactions()string']
    }>
    & Record<'getTransactionSummary()string' | 'getTransactionSummary', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getTransactionSummary()string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getTransactionSummary()string']
      returns: PredictiveLiquidityMiningV2Returns['getTransactionSummary()string']
    }>
    & Record<'getUserTransactions(string)string' | 'getUserTransactions', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getUserTransactions(string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getUserTransactions(string)string']
      returns: PredictiveLiquidityMiningV2Returns['getUserTransactions(string)string']
    }>
    & Record<'getPoolTransactions(string)string' | 'getPoolTransactions', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getPoolTransactions(string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getPoolTransactions(string)string']
      returns: PredictiveLiquidityMiningV2Returns['getPoolTransactions(string)string']
    }>
    & Record<'getTransactionsByType(string)string' | 'getTransactionsByType', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getTransactionsByType(string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByType(string)string']
      returns: PredictiveLiquidityMiningV2Returns['getTransactionsByType(string)string']
    }>
    & Record<'getTransactionsByDateRange(string,string)string' | 'getTransactionsByDateRange', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getTransactionsByDateRange(string,string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByDateRange(string,string)string']
      returns: PredictiveLiquidityMiningV2Returns['getTransactionsByDateRange(string,string)string']
    }>
    & Record<'getTransactionDetails(string)string' | 'getTransactionDetails', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getTransactionDetails(string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getTransactionDetails(string)string']
      returns: PredictiveLiquidityMiningV2Returns['getTransactionDetails(string)string']
    }>
    & Record<'getTransactionAnalytics()string' | 'getTransactionAnalytics', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getTransactionAnalytics()string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getTransactionAnalytics()string']
      returns: PredictiveLiquidityMiningV2Returns['getTransactionAnalytics()string']
    }>
    & Record<'getPendingTransactions(string)string' | 'getPendingTransactions', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getPendingTransactions(string)string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getPendingTransactions(string)string']
      returns: PredictiveLiquidityMiningV2Returns['getPendingTransactions(string)string']
    }>
    & Record<'getVolumeStatistics()string' | 'getVolumeStatistics', {
      argsObj: PredictiveLiquidityMiningV2Args['obj']['getVolumeStatistics()string']
      argsTuple: PredictiveLiquidityMiningV2Args['tuple']['getVolumeStatistics()string']
      returns: PredictiveLiquidityMiningV2Returns['getVolumeStatistics()string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type PredictiveLiquidityMiningV2Signatures = keyof PredictiveLiquidityMiningV2Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PredictiveLiquidityMiningV2NonVoidMethodSignatures = keyof PredictiveLiquidityMiningV2Types['methods'] extends infer T ? T extends keyof PredictiveLiquidityMiningV2Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PredictiveLiquidityMiningV2 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PredictiveLiquidityMiningV2Signatures> = PredictiveLiquidityMiningV2Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PredictiveLiquidityMiningV2 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PredictiveLiquidityMiningV2Signatures> = PredictiveLiquidityMiningV2Types['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type PredictiveLiquidityMiningV2CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PredictiveLiquidityMiningV2DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PredictiveLiquidityMiningV2CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PredictiveLiquidityMiningV2 smart contract
 */
export abstract class PredictiveLiquidityMiningV2ParamsFactory {
  /**
   * Constructs a no op call for the createPool(string,string,string,string)string ABI method
   *
   * Create a new liquidity pool with AI prediction capabilities
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['createPool(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolName, params.args.initialApy, params.args.riskLevel, params.args.minStake],
    }
  }
  /**
   * Constructs a no op call for the stakeInPool(string,string,string)string ABI method
   *
   * Stake tokens in a specific pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stakeInPool(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['stakeInPool(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stakeInPool(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the unstakeFromPool(string,string,string)string ABI method
   *
   * Unstake tokens from a specific pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unstakeFromPool(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['unstakeFromPool(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unstakeFromPool(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the emergencyWithdraw(string,string)string ABI method
   *
   * Emergency withdraw (with potential penalties)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdraw(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyWithdraw(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyWithdraw(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getUserStake(string,string)string ABI method
   *
   * Get user's staked amount in a pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStake(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserStake(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStake(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the updateAIPrediction(string,string,string,string)string ABI method
   *
   * Update AI prediction for a pool (admin/oracle function)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAiPrediction(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['updateAIPrediction(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAIPrediction(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.newApy, params.args.confidence, params.args.timeframe],
    }
  }
  /**
   * Constructs a no op call for the submitTrainingData(string,string,string,string)string ABI method
   *
   * Submit training data for AI models (Data-Donor DAO)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitTrainingData(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['submitTrainingData(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submitTrainingData(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contributor, params.args.dataType, params.args.dataHash, params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the voteOnProposal(string,bool,string)string ABI method
   *
   * Vote on DAO governance proposals
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteOnProposal(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['voteOnProposal(string,bool,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'voteOnProposal(string,bool,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.vote, params.args.voter],
    }
  }
  /**
   * Constructs a no op call for the calculateUserRiskScore(string,string,string)string ABI method
   *
   * Calculate user's risk score based on behavior and portfolio
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateUserRiskScore(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['calculateUserRiskScore(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateUserRiskScore(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.portfolioValue, params.args.tradingFrequency],
    }
  }
  /**
   * Constructs a no op call for the claimRewards(string,string)string ABI method
   *
   * Claim rewards with AI-enhanced calculations
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRewards(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['claimRewards(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimRewards(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getPoolStats(string)string ABI method
   *
   * Get pool statistics with AI predictions
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolStats(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolStats(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolStats(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the emergencyPause()string ABI method
   *
   * Emergency pause mechanism for security
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyPause(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyPause()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyPause()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserPortfolio(string)string ABI method
   *
   * Get user portfolio summary
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserPortfolio(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserPortfolio(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserPortfolio(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getPlatformAnalytics()string ABI method
   *
   * Get platform analytics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformAnalytics(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getPlatformAnalytics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlatformAnalytics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getAllTransactions()string ABI method
   *
   * Get all transactions on the platform
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAllTransactions(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV2Args['tuple']['getAllTransactions()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAllTransactions()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTransactionSummary()string ABI method
   *
   * Get transaction summary statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionSummary(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionSummary()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionSummary()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserTransactions(string)string ABI method
   *
   * Get all transactions for a specific user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserTransactions(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserTransactions(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserTransactions(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getPoolTransactions(string)string ABI method
   *
   * Get all transactions for a specific pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolTransactions(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolTransactions(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolTransactions(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getTransactionsByType(string)string ABI method
   *
   * Get transactions filtered by type
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionsByType(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByType(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionsByType(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txType],
    }
  }
  /**
   * Constructs a no op call for the getTransactionsByDateRange(string,string)string ABI method
   *
   * Get transactions within a date range
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionsByDateRange(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByDateRange(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionsByDateRange(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.startDate, params.args.endDate],
    }
  }
  /**
   * Constructs a no op call for the getTransactionDetails(string)string ABI method
   *
   * Get detailed information about a specific transaction
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionDetails(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionDetails(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionDetails(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txId],
    }
  }
  /**
   * Constructs a no op call for the getTransactionAnalytics()string ABI method
   *
   * Get transaction history for analytics dashboard
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionAnalytics(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionAnalytics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionAnalytics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPendingTransactions(string)string ABI method
   *
   * Get pending/failed transactions for user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPendingTransactions(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPendingTransactions(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPendingTransactions(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getVolumeStatistics()string ABI method
   *
   * Get transaction volume statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVolumeStatistics(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getVolumeStatistics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getVolumeStatistics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PredictiveLiquidityMiningV2 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PredictiveLiquidityMiningV2Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PredictiveLiquidityMiningV2Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PredictiveLiquidityMiningV2Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PredictiveLiquidityMiningV2Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PredictiveLiquidityMiningV2 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PredictiveLiquidityMiningV2DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PredictiveLiquidityMiningV2Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMiningV2 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMiningV2 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMiningV2 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PredictiveLiquidityMiningV2Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PredictiveLiquidityMiningV2 smart contract
 */
export class PredictiveLiquidityMiningV2Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PredictiveLiquidityMiningV2Client`
   *
   * @param appClient An `AppClient` instance which has been created with the PredictiveLiquidityMiningV2 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PredictiveLiquidityMiningV2Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PredictiveLiquidityMiningV2NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PredictiveLiquidityMiningV2Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PredictiveLiquidityMiningV2Client> {
    return new PredictiveLiquidityMiningV2Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PredictiveLiquidityMiningV2Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PredictiveLiquidityMiningV2Client> {
    return new PredictiveLiquidityMiningV2Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stakeInPool: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unstakeFromPool: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.unstakeFromPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `emergencyWithdraw(string,string)string` ABI method.
     *
     * Emergency withdraw (with potential penalties)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdraw: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyWithdraw(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getUserStake(string,string)string` ABI method.
     *
     * Get user's staked amount in a pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStake: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserStake(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAiPrediction: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.updateAiPrediction(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitTrainingData: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.submitTrainingData(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteOnProposal: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.voteOnProposal(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateUserRiskScore: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.calculateUserRiskScore(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRewards: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolStats: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyPause: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserPortfolio: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getUserPortfolio(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformAnalytics: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getPlatformAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAllTransactions: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV2Args['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getAllTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionSummary: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionSummary(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getUserTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserTransactions: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getUserTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolTransactions: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getPoolTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Get transactions filtered by type
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionsByType: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionsByType(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionsByDateRange(string,string)string` ABI method.
     *
     * Get transactions within a date range
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionsByDateRange: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByDateRange(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionsByDateRange(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Get detailed information about a specific transaction
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionDetails: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionDetails(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Get transaction history for analytics dashboard
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionAnalytics: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPendingTransactions(string)string` ABI method.
     *
     * Get pending/failed transactions for user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPendingTransactions: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPendingTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getPendingTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get transaction volume statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVolumeStatistics: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV2ParamsFactory.getVolumeStatistics(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stakeInPool: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unstakeFromPool: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.unstakeFromPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `emergencyWithdraw(string,string)string` ABI method.
     *
     * Emergency withdraw (with potential penalties)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdraw: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyWithdraw(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getUserStake(string,string)string` ABI method.
     *
     * Get user's staked amount in a pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStake: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserStake(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAiPrediction: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.updateAiPrediction(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitTrainingData: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.submitTrainingData(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteOnProposal: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.voteOnProposal(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateUserRiskScore: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.calculateUserRiskScore(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRewards: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolStats: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyPause: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserPortfolio: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getUserPortfolio(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformAnalytics: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getPlatformAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAllTransactions: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV2Args['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getAllTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionSummary: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionSummary(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getUserTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserTransactions: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getUserTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolTransactions: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getPoolTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Get transactions filtered by type
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionsByType: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionsByType(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionsByDateRange(string,string)string` ABI method.
     *
     * Get transactions within a date range
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionsByDateRange: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByDateRange(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionsByDateRange(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Get detailed information about a specific transaction
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionDetails: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionDetails(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Get transaction history for analytics dashboard
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionAnalytics: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPendingTransactions(string)string` ABI method.
     *
     * Get pending/failed transactions for user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPendingTransactions: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPendingTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getPendingTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get transaction volume statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVolumeStatistics: (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV2ParamsFactory.getVolumeStatistics(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['createPool(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['createPool(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stakeInPool: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['stakeInPool(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.stakeInPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['stakeInPool(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unstakeFromPool: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['unstakeFromPool(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.unstakeFromPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['unstakeFromPool(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `emergencyWithdraw(string,string)string` ABI method.
     *
     * Emergency withdraw (with potential penalties)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdraw: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyWithdraw(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.emergencyWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['emergencyWithdraw(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getUserStake(string,string)string` ABI method.
     *
     * Get user's staked amount in a pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStake: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserStake(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getUserStake(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getUserStake(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAiPrediction: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['updateAIPrediction(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.updateAiPrediction(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['updateAIPrediction(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitTrainingData: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['submitTrainingData(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.submitTrainingData(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['submitTrainingData(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteOnProposal: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['voteOnProposal(string,bool,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.voteOnProposal(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['voteOnProposal(string,bool,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateUserRiskScore: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['calculateUserRiskScore(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.calculateUserRiskScore(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['calculateUserRiskScore(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRewards: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['claimRewards(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.claimRewards(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['claimRewards(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolStats: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolStats(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getPoolStats(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getPoolStats(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyPause: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyPause()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.emergencyPause(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['emergencyPause()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserPortfolio: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserPortfolio(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getUserPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getUserPortfolio(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformAnalytics: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getPlatformAnalytics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getPlatformAnalytics(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getPlatformAnalytics()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAllTransactions: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV2Args['tuple']['getAllTransactions()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getAllTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getAllTransactions()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionSummary: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionSummary()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionSummary(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getTransactionSummary()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getUserTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserTransactions: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserTransactions(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getUserTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getUserTransactions(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolTransactions: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolTransactions(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getPoolTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getPoolTransactions(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Get transactions filtered by type
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionsByType: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByType(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionsByType(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getTransactionsByType(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionsByDateRange(string,string)string` ABI method.
     *
     * Get transactions within a date range
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionsByDateRange: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByDateRange(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionsByDateRange(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getTransactionsByDateRange(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Get detailed information about a specific transaction
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionDetails: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionDetails(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionDetails(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getTransactionDetails(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Get transaction history for analytics dashboard
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionAnalytics: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionAnalytics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getTransactionAnalytics(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getTransactionAnalytics()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getPendingTransactions(string)string` ABI method.
     *
     * Get pending/failed transactions for user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPendingTransactions: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPendingTransactions(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getPendingTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getPendingTransactions(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV2 smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get transaction volume statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVolumeStatistics: async (params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getVolumeStatistics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV2ParamsFactory.getVolumeStatistics(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV2Returns['getVolumeStatistics()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PredictiveLiquidityMiningV2Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PredictiveLiquidityMiningV2 app
   */
  state = {
  }

  public newGroup(): PredictiveLiquidityMiningV2Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool(string,string,string,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      createPool(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('createPool(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a stakeInPool(string,string,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      stakeInPool(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stakeInPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('stakeInPool(string,string,string)string', v))
        return this
      },
      /**
       * Add a unstakeFromPool(string,string,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      unstakeFromPool(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unstakeFromPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('unstakeFromPool(string,string,string)string', v))
        return this
      },
      /**
       * Add a emergencyWithdraw(string,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      emergencyWithdraw(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyWithdraw(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdraw(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergencyWithdraw(string,string)string', v))
        return this
      },
      /**
       * Add a getUserStake(string,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      getUserStake(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserStake(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStake(string,string)string', v))
        return this
      },
      /**
       * Add a updateAIPrediction(string,string,string,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      updateAiPrediction(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAiPrediction(params)))
        resultMappers.push((v) => client.decodeReturnValue('updateAIPrediction(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a submitTrainingData(string,string,string,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      submitTrainingData(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitTrainingData(params)))
        resultMappers.push((v) => client.decodeReturnValue('submitTrainingData(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a voteOnProposal(string,bool,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      voteOnProposal(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteOnProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('voteOnProposal(string,bool,string)string', v))
        return this
      },
      /**
       * Add a calculateUserRiskScore(string,string,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      calculateUserRiskScore(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateUserRiskScore(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateUserRiskScore(string,string,string)string', v))
        return this
      },
      /**
       * Add a claimRewards(string,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      claimRewards(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('claimRewards(string,string)string', v))
        return this
      },
      /**
       * Add a getPoolStats(string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      getPoolStats(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolStats(string)string', v))
        return this
      },
      /**
       * Add a emergencyPause()string method call against the PredictiveLiquidityMiningV2 contract
       */
      emergencyPause(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyPause(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergencyPause()string', v))
        return this
      },
      /**
       * Add a getUserPortfolio(string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      getUserPortfolio(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserPortfolio(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserPortfolio(string)string', v))
        return this
      },
      /**
       * Add a getPlatformAnalytics()string method call against the PredictiveLiquidityMiningV2 contract
       */
      getPlatformAnalytics(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformAnalytics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlatformAnalytics()string', v))
        return this
      },
      /**
       * Add a getAllTransactions()string method call against the PredictiveLiquidityMiningV2 contract
       */
      getAllTransactions(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV2Args['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAllTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAllTransactions()string', v))
        return this
      },
      /**
       * Add a getTransactionSummary()string method call against the PredictiveLiquidityMiningV2 contract
       */
      getTransactionSummary(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionSummary(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionSummary()string', v))
        return this
      },
      /**
       * Add a getUserTransactions(string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      getUserTransactions(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserTransactions(string)string', v))
        return this
      },
      /**
       * Add a getPoolTransactions(string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      getPoolTransactions(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolTransactions(string)string', v))
        return this
      },
      /**
       * Add a getTransactionsByType(string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      getTransactionsByType(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionsByType(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionsByType(string)string', v))
        return this
      },
      /**
       * Add a getTransactionsByDateRange(string,string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      getTransactionsByDateRange(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByDateRange(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionsByDateRange(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionsByDateRange(string,string)string', v))
        return this
      },
      /**
       * Add a getTransactionDetails(string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      getTransactionDetails(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionDetails(string)string', v))
        return this
      },
      /**
       * Add a getTransactionAnalytics()string method call against the PredictiveLiquidityMiningV2 contract
       */
      getTransactionAnalytics(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionAnalytics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionAnalytics()string', v))
        return this
      },
      /**
       * Add a getPendingTransactions(string)string method call against the PredictiveLiquidityMiningV2 contract
       */
      getPendingTransactions(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPendingTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPendingTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPendingTransactions(string)string', v))
        return this
      },
      /**
       * Add a getVolumeStatistics()string method call against the PredictiveLiquidityMiningV2 contract
       */
      getVolumeStatistics(params: CallParams<PredictiveLiquidityMiningV2Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVolumeStatistics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getVolumeStatistics()string', v))
        return this
      },
      /**
       * Add a clear state call to the PredictiveLiquidityMiningV2 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PredictiveLiquidityMiningV2Composer
  }
}
export type PredictiveLiquidityMiningV2Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool(string,string,string,string)string ABI method.
   *
   * Create a new liquidity pool with AI prediction capabilities
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['createPool(string,string,string,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['createPool(string,string,string,string)string'] | undefined]>

  /**
   * Calls the stakeInPool(string,string,string)string ABI method.
   *
   * Stake tokens in a specific pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeInPool(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['stakeInPool(string,string,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['stakeInPool(string,string,string)string'] | undefined]>

  /**
   * Calls the unstakeFromPool(string,string,string)string ABI method.
   *
   * Unstake tokens from a specific pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstakeFromPool(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['unstakeFromPool(string,string,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['unstakeFromPool(string,string,string)string'] | undefined]>

  /**
   * Calls the emergencyWithdraw(string,string)string ABI method.
   *
   * Emergency withdraw (with potential penalties)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdraw(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyWithdraw(string,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['emergencyWithdraw(string,string)string'] | undefined]>

  /**
   * Calls the getUserStake(string,string)string ABI method.
   *
   * Get user's staked amount in a pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStake(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserStake(string,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getUserStake(string,string)string'] | undefined]>

  /**
   * Calls the updateAIPrediction(string,string,string,string)string ABI method.
   *
   * Update AI prediction for a pool (admin/oracle function)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAiPrediction(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['updateAIPrediction(string,string,string,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['updateAIPrediction(string,string,string,string)string'] | undefined]>

  /**
   * Calls the submitTrainingData(string,string,string,string)string ABI method.
   *
   * Submit training data for AI models (Data-Donor DAO)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitTrainingData(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['submitTrainingData(string,string,string,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['submitTrainingData(string,string,string,string)string'] | undefined]>

  /**
   * Calls the voteOnProposal(string,bool,string)string ABI method.
   *
   * Vote on DAO governance proposals
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOnProposal(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['voteOnProposal(string,bool,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['voteOnProposal(string,bool,string)string'] | undefined]>

  /**
   * Calls the calculateUserRiskScore(string,string,string)string ABI method.
   *
   * Calculate user's risk score based on behavior and portfolio
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateUserRiskScore(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['calculateUserRiskScore(string,string,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['calculateUserRiskScore(string,string,string)string'] | undefined]>

  /**
   * Calls the claimRewards(string,string)string ABI method.
   *
   * Claim rewards with AI-enhanced calculations
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['claimRewards(string,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['claimRewards(string,string)string'] | undefined]>

  /**
   * Calls the getPoolStats(string)string ABI method.
   *
   * Get pool statistics with AI predictions
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolStats(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolStats(string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getPoolStats(string)string'] | undefined]>

  /**
   * Calls the emergencyPause()string ABI method.
   *
   * Emergency pause mechanism for security
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyPause(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV2Args['tuple']['emergencyPause()string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['emergencyPause()string'] | undefined]>

  /**
   * Calls the getUserPortfolio(string)string ABI method.
   *
   * Get user portfolio summary
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserPortfolio(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserPortfolio(string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getUserPortfolio(string)string'] | undefined]>

  /**
   * Calls the getPlatformAnalytics()string ABI method.
   *
   * Get platform analytics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformAnalytics(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getPlatformAnalytics()string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getPlatformAnalytics()string'] | undefined]>

  /**
   * Calls the getAllTransactions()string ABI method.
   *
   * Get all transactions on the platform
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAllTransactions(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV2Args['tuple']['getAllTransactions()string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getAllTransactions()string'] | undefined]>

  /**
   * Calls the getTransactionSummary()string ABI method.
   *
   * Get transaction summary statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionSummary(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionSummary()string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getTransactionSummary()string'] | undefined]>

  /**
   * Calls the getUserTransactions(string)string ABI method.
   *
   * Get all transactions for a specific user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserTransactions(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getUserTransactions(string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getUserTransactions(string)string'] | undefined]>

  /**
   * Calls the getPoolTransactions(string)string ABI method.
   *
   * Get all transactions for a specific pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolTransactions(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPoolTransactions(string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getPoolTransactions(string)string'] | undefined]>

  /**
   * Calls the getTransactionsByType(string)string ABI method.
   *
   * Get transactions filtered by type
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionsByType(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByType(string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getTransactionsByType(string)string'] | undefined]>

  /**
   * Calls the getTransactionsByDateRange(string,string)string ABI method.
   *
   * Get transactions within a date range
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionsByDateRange(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionsByDateRange(string,string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getTransactionsByDateRange(string,string)string'] | undefined]>

  /**
   * Calls the getTransactionDetails(string)string ABI method.
   *
   * Get detailed information about a specific transaction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionDetails(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionDetails(string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getTransactionDetails(string)string'] | undefined]>

  /**
   * Calls the getTransactionAnalytics()string ABI method.
   *
   * Get transaction history for analytics dashboard
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionAnalytics(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getTransactionAnalytics()string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getTransactionAnalytics()string'] | undefined]>

  /**
   * Calls the getPendingTransactions(string)string ABI method.
   *
   * Get pending/failed transactions for user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPendingTransactions(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV2Args['tuple']['getPendingTransactions(string)string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getPendingTransactions(string)string'] | undefined]>

  /**
   * Calls the getVolumeStatistics()string ABI method.
   *
   * Get transaction volume statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVolumeStatistics(params?: CallParams<PredictiveLiquidityMiningV2Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV2Args['tuple']['getVolumeStatistics()string']>): PredictiveLiquidityMiningV2Composer<[...TReturns, PredictiveLiquidityMiningV2Returns['getVolumeStatistics()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV2 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PredictiveLiquidityMiningV2Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PredictiveLiquidityMiningV2Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PredictiveLiquidityMiningV2ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PredictiveLiquidityMiningV2ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PredictiveLiquidityMiningV2ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PredictiveLiquidityMiningV2ComposerResults<TReturns>>
}
export type PredictiveLiquidityMiningV2ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

