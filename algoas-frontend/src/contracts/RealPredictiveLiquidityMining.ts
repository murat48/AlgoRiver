/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"RealPredictiveLiquidityMining","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Kontratı başlat - GERÇEK başlangıç değerleri","events":[],"recommendations":{}},{"name":"createPool","args":[{"type":"string","name":"poolName"},{"type":"string","name":"initialAPY"},{"type":"string","name":"riskLevel"},{"type":"string","name":"minStake"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new liquidity pool with REAL state tracking","events":[],"recommendations":{}},{"name":"stakeInPool","args":[{"type":"string","name":"poolId"},{"type":"string","name":"amount"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Stake tokens in a specific pool - GERÇEK blockchain işlemi","events":[],"recommendations":{}},{"name":"unstakeFromPool","args":[{"type":"string","name":"poolId"},{"type":"string","name":"amount"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unstake tokens from a specific pool - GERÇEK blockchain işlemi","events":[],"recommendations":{}},{"name":"getUserStake","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user's total staked amount - GERÇEK blockchain verisi","events":[],"recommendations":{}},{"name":"getPoolStats","args":[{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get pool statistics - GERÇEK blockchain verisi","events":[],"recommendations":{}},{"name":"getAllTransactions","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions on the platform - GERÇEK blockchain verisi","events":[],"recommendations":{}},{"name":"getTransactionSummary","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transaction summary statistics - GERÇEK blockchain verisi","events":[],"recommendations":{}},{"name":"getPoolTransactions","args":[{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions for a specific pool - GERÇEK blockchain verisi","events":[],"recommendations":{}},{"name":"getPlatformStats","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get platform statistics - GERÇEK blockchain verisi","events":[],"recommendations":{}},{"name":"getVolumeStatistics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get volume statistics - GERÇEK blockchain verisi","events":[],"recommendations":{}},{"name":"getLastResetTime","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get daily reset time - GERÇEK blockchain verisi","events":[],"recommendations":{}},{"name":"resetDailyCounters","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Reset daily counters (admin function) - GERÇEK state güncelleme","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Predictive Liquidity Mining Platform Smart Contract v4.0 DYNAMIC\nFeatures: AI-powered predictions, dynamic rewards, risk scoring, Data-Donor DAO\nNEW: FULLY Dynamic transaction viewing functions with REAL blockchain data","networks":{},"state":{"schema":{"global":{"ints":10,"bytes":0},"local":{"ints":4,"bytes":0}},"keys":{"global":{"totalPools":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxQb29scw=="},"totalStaked":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxTdGFrZWQ="},"platformFee":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGxhdGZvcm1GZWU="},"totalTransactionCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxUcmFuc2FjdGlvbkNvdW50"},"totalVolume":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxWb2x1bWU="},"dailyTransactionCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGFpbHlUcmFuc2FjdGlvbkNvdW50"},"dailyVolume":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGFpbHlWb2x1bWU="},"lastResetTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFJlc2V0VGltZQ=="},"poolTransactionCounts":{"keyType":"AVMString","valueType":"AVMUint64","key":"cG9vbFRyYW5zYWN0aW9uQ291bnRz"},"poolVolumes":{"keyType":"AVMString","valueType":"AVMUint64","key":"cG9vbFZvbHVtZXM="}},"local":{"userStakedAmount":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNlclN0YWtlZEFtb3VudA=="},"userTransactionCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNlclRyYW5zYWN0aW9uQ291bnQ="},"userTotalVolume":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNlclRvdGFsVm9sdW1l"},"lastStakeTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFN0YWtlVGltZQ=="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1310],"errorMessage":"Insufficient total stake"},{"pc":[272,296,313,395,475,553,636,711,766,829,871,913,961],"errorMessage":"OnCompletion is not NoOp"},{"pc":[965],"errorMessage":"can only call when creating"},{"pc":[275,299,316,398,478,556,639,714,769,832,874,916],"errorMessage":"can only call when not creating"},{"pc":[1097,1106,1225,1307,1314,1403,1414,1425,1435,1447,1458,1505],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAHAhD0mCwt0b3RhbFN0YWtlZAQVH3x1CnRvdGFsUG9vbHMVZGFpbHlUcmFuc2FjdGlvbkNvdW50C2RhaWx5Vm9sdW1lFXRvdGFsVHJhbnNhY3Rpb25Db3VudAt0b3RhbFZvbHVtZQ1sYXN0UmVzZXRUaW1lFXBvb2xUcmFuc2FjdGlvbkNvdW50cwtwb29sVm9sdW1lcwkgYnkgdXNlciAxG0EAYoINBLhEezYEw7mSKgSWzqupBFpBt6EExXrNTwTd+p8oBDrf7eUE3AvMdgTP7sVjBBEje0gEjJiyNwRDJaL2BKWQsco2GgCODQKzAoMCWQIvAfABuQFuARsAzQB9ACsAGgACIkMxGRREMRhEiATMSRUWVwYCTFApTFCwI0MxGRREMRhEiASuFilMULAjQzEZFEQxGESARhUffHUAQHsicmVhbERhdGEiOnRydWUsInNvdXJjZSI6ImJsb2NrY2hhaW4iLCJ2b2x1bWVTdGF0cyI6InJlYWx0aW1lIn2wI0MxGRREMRhEgEQVH3x1AD57InJlYWxEYXRhIjp0cnVlLCJzb3VyY2UiOiJibG9ja2NoYWluIiwicGxhdGZvcm1TdGF0cyI6ImxpdmUifbAjQzEZFEQxGESAQhUffHUAPHsicmVhbERhdGEiOnRydWUsInNvdXJjZSI6ImJsb2NrY2hhaW4iLCJwb29sRGF0YSI6ImR5bmFtaWMifbAjQzEZFEQxGESARxUffHUAQXsicmVhbERhdGEiOnRydWUsInNvdXJjZSI6ImJsb2NrY2hhaW4iLCJkeW5hbWljQ2FsY3VsYXRpb24iOnRydWV9sCNDMRkURDEYRIA/FR98dQA5eyJyZWFsRGF0YSI6dHJ1ZSwic291cmNlIjoiYmxvY2tjaGFpbiIsInN0YXR1cyI6ImFjdGl2ZSJ9sCNDMRkURDEYRIArFR98dQAlUG9vbCBzdGF0cyBmcm9tIHJlYWwgYmxvY2tjaGFpbiBzdGF0ZbAjQzEZFEQxGESAMxUffHUALVVzZXIgc3Rha2VkIGFtb3VudCBmcm9tIHJlYWwgYmxvY2tjaGFpbiBzdGF0ZbAjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIAb9JFRZXBgJMUClMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIAUNJFRZXBgJMUClMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgA2GgRXAgCIAJNJFRZXBgJMUClMULAjQzEZFEQxGBREiAACI0MqImcoImeAC3BsYXRmb3JtRmVlgawCZycFImcnBiJnKyJnJwQiZycHImcnCCJnJwkiZ4BCUmVhbFByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmcgY29udHJhY3QgaW5pdGlhbGl6ZWQgd2l0aCByZWFsIHN0YXRlsImKBAEiKmVEIwgqTGciKmVEgAtDUkVBVEVfUE9PTCJPAogBDoAFUG9vbCCL/FCADiBjcmVhdGVkIHdpdGggUIv9UIATJSBBUFksIHJpc2sgbGV2ZWw6IFCL/lCAESwgbWluaW11bSBzdGFrZTogUIv/UIALIG1pY3JvQWxnb3NQiYoDASIoZUQkCChMZ4AFU1RBS0UkI4gAmYAUU3VjY2Vzc2Z1bGx5IHN0YWtlZCCL/lCAFCBtaWNyb0FsZ29zIGluIHBvb2wgUIv9UCcKUIv/UImKAwEiKGVEJA9EIihlRCQJKExngAdVTlNUQUtFJCOIAD6AFlN1Y2Nlc3NmdWxseSB1bnN0YWtlZCCL/lCAFiBtaWNyb0FsZ29zIGZyb20gcG9vbCBQi/1QJwpQi/9QiYoDACInBWVEIwgnBUxnIicGZUSL/ggnBkxnIitlRCMIK0xnIicEZUSL/ggnBExnIicIZUQjCCcITGciJwllRIv+CCcJTGeAH1RyYW5zYWN0aW9uIGxvZ2dlZCBzdWNjZXNzZnVsbHmwiSInB2VEiSsiZycEImcnB4Gws9y3BmeAFERhaWx5IGNvdW50ZXJzIHJlc2V0sIArRGFpbHkgY291bnRlcnMgaGF2ZSBiZWVuIHJlc2V0IHN1Y2Nlc3NmdWxseYk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the RealPredictiveLiquidityMining contract
 */
export type RealPredictiveLiquidityMiningArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createPool(string,string,string,string)string': {
      poolName: string
      initialApy: string
      riskLevel: string
      minStake: string
    }
    'stakeInPool(string,string,string)string': {
      poolId: string
      amount: string
      userAddress: string
    }
    'unstakeFromPool(string,string,string)string': {
      poolId: string
      amount: string
      userAddress: string
    }
    'getUserStake(string)string': {
      userAddress: string
    }
    'getPoolStats(string)string': {
      poolId: string
    }
    'getAllTransactions()string': Record<string, never>
    'getTransactionSummary()string': Record<string, never>
    'getPoolTransactions(string)string': {
      poolId: string
    }
    'getPlatformStats()string': Record<string, never>
    'getVolumeStatistics()string': Record<string, never>
    'getLastResetTime()uint64': Record<string, never>
    'resetDailyCounters()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createPool(string,string,string,string)string': [poolName: string, initialApy: string, riskLevel: string, minStake: string]
    'stakeInPool(string,string,string)string': [poolId: string, amount: string, userAddress: string]
    'unstakeFromPool(string,string,string)string': [poolId: string, amount: string, userAddress: string]
    'getUserStake(string)string': [userAddress: string]
    'getPoolStats(string)string': [poolId: string]
    'getAllTransactions()string': []
    'getTransactionSummary()string': []
    'getPoolTransactions(string)string': [poolId: string]
    'getPlatformStats()string': []
    'getVolumeStatistics()string': []
    'getLastResetTime()uint64': []
    'resetDailyCounters()string': []
  }
}

/**
 * The return type for each method
 */
export type RealPredictiveLiquidityMiningReturns = {
  'createApplication()void': void
  'createPool(string,string,string,string)string': string
  'stakeInPool(string,string,string)string': string
  'unstakeFromPool(string,string,string)string': string
  'getUserStake(string)string': string
  'getPoolStats(string)string': string
  'getAllTransactions()string': string
  'getTransactionSummary()string': string
  'getPoolTransactions(string)string': string
  'getPlatformStats()string': string
  'getVolumeStatistics()string': string
  'getLastResetTime()uint64': bigint
  'resetDailyCounters()string': string
}

/**
 * Defines the types of available calls and state of the RealPredictiveLiquidityMining smart contract.
 */
export type RealPredictiveLiquidityMiningTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['createApplication()void']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']
      returns: RealPredictiveLiquidityMiningReturns['createApplication()void']
    }>
    & Record<'createPool(string,string,string,string)string' | 'createPool', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']
      returns: RealPredictiveLiquidityMiningReturns['createPool(string,string,string,string)string']
    }>
    & Record<'stakeInPool(string,string,string)string' | 'stakeInPool', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']
      returns: RealPredictiveLiquidityMiningReturns['stakeInPool(string,string,string)string']
    }>
    & Record<'unstakeFromPool(string,string,string)string' | 'unstakeFromPool', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(string,string,string)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(string,string,string)string']
      returns: RealPredictiveLiquidityMiningReturns['unstakeFromPool(string,string,string)string']
    }>
    & Record<'getUserStake(string)string' | 'getUserStake', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getUserStake(string)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getUserStake(string)string']
      returns: RealPredictiveLiquidityMiningReturns['getUserStake(string)string']
    }>
    & Record<'getPoolStats(string)string' | 'getPoolStats', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']
      returns: RealPredictiveLiquidityMiningReturns['getPoolStats(string)string']
    }>
    & Record<'getAllTransactions()string' | 'getAllTransactions', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']
      returns: RealPredictiveLiquidityMiningReturns['getAllTransactions()string']
    }>
    & Record<'getTransactionSummary()string' | 'getTransactionSummary', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']
      returns: RealPredictiveLiquidityMiningReturns['getTransactionSummary()string']
    }>
    & Record<'getPoolTransactions(string)string' | 'getPoolTransactions', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(string)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(string)string']
      returns: RealPredictiveLiquidityMiningReturns['getPoolTransactions(string)string']
    }>
    & Record<'getPlatformStats()string' | 'getPlatformStats', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()string']
      returns: RealPredictiveLiquidityMiningReturns['getPlatformStats()string']
    }>
    & Record<'getVolumeStatistics()string' | 'getVolumeStatistics', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']
      returns: RealPredictiveLiquidityMiningReturns['getVolumeStatistics()string']
    }>
    & Record<'getLastResetTime()uint64' | 'getLastResetTime', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getLastResetTime()uint64']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getLastResetTime()uint64']
      returns: RealPredictiveLiquidityMiningReturns['getLastResetTime()uint64']
    }>
    & Record<'resetDailyCounters()string' | 'resetDailyCounters', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['resetDailyCounters()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['resetDailyCounters()string']
      returns: RealPredictiveLiquidityMiningReturns['resetDailyCounters()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        totalPools: bigint
        totalStaked: bigint
        platformFee: bigint
        totalTransactionCount: bigint
        totalVolume: bigint
        dailyTransactionCount: bigint
        dailyVolume: bigint
        lastResetTime: bigint
        poolTransactionCounts: bigint
        poolVolumes: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        userStakedAmount: bigint
        userTransactionCount: bigint
        userTotalVolume: bigint
        lastStakeTime: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type RealPredictiveLiquidityMiningSignatures = keyof RealPredictiveLiquidityMiningTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type RealPredictiveLiquidityMiningNonVoidMethodSignatures = keyof RealPredictiveLiquidityMiningTypes['methods'] extends infer T ? T extends keyof RealPredictiveLiquidityMiningTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the RealPredictiveLiquidityMining smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends RealPredictiveLiquidityMiningSignatures> = RealPredictiveLiquidityMiningTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the RealPredictiveLiquidityMining smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RealPredictiveLiquidityMiningSignatures> = RealPredictiveLiquidityMiningTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = RealPredictiveLiquidityMiningTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = RealPredictiveLiquidityMiningTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type RealPredictiveLiquidityMiningCreateCallParams =
  | Expand<CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type RealPredictiveLiquidityMiningDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: RealPredictiveLiquidityMiningCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the RealPredictiveLiquidityMining smart contract
 */
export abstract class RealPredictiveLiquidityMiningParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends RealPredictiveLiquidityMiningCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return RealPredictiveLiquidityMiningParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the RealPredictiveLiquidityMining smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createPool(string,string,string,string)string ABI method
   *
   * Create a new liquidity pool with REAL state tracking
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolName, params.args.initialApy, params.args.riskLevel, params.args.minStake],
    }
  }
  /**
   * Constructs a no op call for the stakeInPool(string,string,string)string ABI method
   *
   * Stake tokens in a specific pool - GERÇEK blockchain işlemi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stakeInPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stakeInPool(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the unstakeFromPool(string,string,string)string ABI method
   *
   * Unstake tokens from a specific pool - GERÇEK blockchain işlemi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unstakeFromPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unstakeFromPool(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getUserStake(string)string ABI method
   *
   * Get user's total staked amount - GERÇEK blockchain verisi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStake(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStake(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getPoolStats(string)string ABI method
   *
   * Get pool statistics - GERÇEK blockchain verisi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolStats(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolStats(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getAllTransactions()string ABI method
   *
   * Get all transactions on the platform - GERÇEK blockchain verisi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAllTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAllTransactions()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTransactionSummary()string ABI method
   *
   * Get transaction summary statistics - GERÇEK blockchain verisi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionSummary(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionSummary()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPoolTransactions(string)string ABI method
   *
   * Get all transactions for a specific pool - GERÇEK blockchain verisi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolTransactions(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getPlatformStats()string ABI method
   *
   * Get platform statistics - GERÇEK blockchain verisi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformStats(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlatformStats()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getVolumeStatistics()string ABI method
   *
   * Get volume statistics - GERÇEK blockchain verisi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVolumeStatistics(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getVolumeStatistics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getLastResetTime()uint64 ABI method
   *
   * Get daily reset time - GERÇEK blockchain verisi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLastResetTime(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getLastResetTime()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getLastResetTime()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLastResetTime()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the resetDailyCounters()string ABI method
   *
   * Reset daily counters (admin function) - GERÇEK state güncelleme
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetDailyCounters(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['resetDailyCounters()string'] | RealPredictiveLiquidityMiningArgs['tuple']['resetDailyCounters()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resetDailyCounters()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the RealPredictiveLiquidityMining smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class RealPredictiveLiquidityMiningFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `RealPredictiveLiquidityMiningFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new RealPredictiveLiquidityMiningClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new RealPredictiveLiquidityMiningClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the RealPredictiveLiquidityMining smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: RealPredictiveLiquidityMiningDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? RealPredictiveLiquidityMiningParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (RealPredictiveLiquidityMiningCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new RealPredictiveLiquidityMiningClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RealPredictiveLiquidityMining smart contract using the createApplication()void ABI method.
       *
       * Kontratı başlat - GERÇEK başlangıç değerleri
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(RealPredictiveLiquidityMiningParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RealPredictiveLiquidityMining smart contract using the createApplication()void ABI method.
       *
       * Kontratı başlat - GERÇEK başlangıç değerleri
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(RealPredictiveLiquidityMiningParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RealPredictiveLiquidityMining smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Kontratı başlat - GERÇEK başlangıç değerleri
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(RealPredictiveLiquidityMiningParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['createApplication()void']) }, appClient: new RealPredictiveLiquidityMiningClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the RealPredictiveLiquidityMining smart contract
 */
export class RealPredictiveLiquidityMiningClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `RealPredictiveLiquidityMiningClient`
   *
   * @param appClient An `AppClient` instance which has been created with the RealPredictiveLiquidityMining app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `RealPredictiveLiquidityMiningClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends RealPredictiveLiquidityMiningNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `RealPredictiveLiquidityMiningClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<RealPredictiveLiquidityMiningClient> {
    return new RealPredictiveLiquidityMiningClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `RealPredictiveLiquidityMiningClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<RealPredictiveLiquidityMiningClient> {
    return new RealPredictiveLiquidityMiningClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the RealPredictiveLiquidityMining smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with REAL state tracking
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool - GERÇEK blockchain işlemi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stakeInPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool - GERÇEK blockchain işlemi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unstakeFromPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.unstakeFromPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getUserStake(string)string` ABI method.
     *
     * Get user's total staked amount - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStake: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolStats: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAllTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getAllTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionSummary: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionSummary(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getPoolTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPlatformStats()string` ABI method.
     *
     * Get platform statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformStats: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getPlatformStats(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get volume statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVolumeStatistics: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getVolumeStatistics(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getLastResetTime()uint64` ABI method.
     *
     * Get daily reset time - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLastResetTime: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getLastResetTime()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getLastResetTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getLastResetTime(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `resetDailyCounters()string` ABI method.
     *
     * Reset daily counters (admin function) - GERÇEK state güncelleme
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetDailyCounters: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['resetDailyCounters()string'] | RealPredictiveLiquidityMiningArgs['tuple']['resetDailyCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.resetDailyCounters(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the RealPredictiveLiquidityMining smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with REAL state tracking
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool - GERÇEK blockchain işlemi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stakeInPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool - GERÇEK blockchain işlemi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unstakeFromPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.unstakeFromPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getUserStake(string)string` ABI method.
     *
     * Get user's total staked amount - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStake: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolStats: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAllTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getAllTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionSummary: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionSummary(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getPoolTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPlatformStats()string` ABI method.
     *
     * Get platform statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformStats: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getPlatformStats(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get volume statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVolumeStatistics: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getVolumeStatistics(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getLastResetTime()uint64` ABI method.
     *
     * Get daily reset time - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLastResetTime: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getLastResetTime()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getLastResetTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getLastResetTime(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `resetDailyCounters()string` ABI method.
     *
     * Reset daily counters (admin function) - GERÇEK state güncelleme
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetDailyCounters: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['resetDailyCounters()string'] | RealPredictiveLiquidityMiningArgs['tuple']['resetDailyCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.resetDailyCounters(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the RealPredictiveLiquidityMining smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with REAL state tracking
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['createPool(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool - GERÇEK blockchain işlemi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stakeInPool: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.stakeInPool(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['stakeInPool(string,string,string)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool - GERÇEK blockchain işlemi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unstakeFromPool: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.unstakeFromPool(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['unstakeFromPool(string,string,string)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getUserStake(string)string` ABI method.
     *
     * Get user's total staked amount - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStake: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getUserStake(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getUserStake(string)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolStats: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getPoolStats(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getPoolStats(string)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAllTransactions: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getAllTransactions(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getAllTransactions()string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionSummary: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionSummary(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getTransactionSummary()string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolTransactions: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getPoolTransactions(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getPoolTransactions(string)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPlatformStats()string` ABI method.
     *
     * Get platform statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformStats: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getPlatformStats(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getPlatformStats()string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get volume statistics - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVolumeStatistics: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getVolumeStatistics(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getVolumeStatistics()string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getLastResetTime()uint64` ABI method.
     *
     * Get daily reset time - GERÇEK blockchain verisi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLastResetTime: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getLastResetTime()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getLastResetTime()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getLastResetTime(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getLastResetTime()uint64'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `resetDailyCounters()string` ABI method.
     *
     * Reset daily counters (admin function) - GERÇEK state güncelleme
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetDailyCounters: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['resetDailyCounters()string'] | RealPredictiveLiquidityMiningArgs['tuple']['resetDailyCounters()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.resetDailyCounters(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['resetDailyCounters()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new RealPredictiveLiquidityMiningClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current RealPredictiveLiquidityMining app
   */
  state = {
    /**
     * Methods to access global state for the current RealPredictiveLiquidityMining app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalPools: result.totalPools,
          totalStaked: result.totalStaked,
          platformFee: result.platformFee,
          totalTransactionCount: result.totalTransactionCount,
          totalVolume: result.totalVolume,
          dailyTransactionCount: result.dailyTransactionCount,
          dailyVolume: result.dailyVolume,
          lastResetTime: result.lastResetTime,
          poolTransactionCounts: result.poolTransactionCounts,
          poolVolumes: result.poolVolumes,
        }
      },
      /**
       * Get the current value of the totalPools key in global state
       */
      totalPools: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalPools")) as bigint | undefined },
      /**
       * Get the current value of the totalStaked key in global state
       */
      totalStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStaked")) as bigint | undefined },
      /**
       * Get the current value of the platformFee key in global state
       */
      platformFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("platformFee")) as bigint | undefined },
      /**
       * Get the current value of the totalTransactionCount key in global state
       */
      totalTransactionCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalTransactionCount")) as bigint | undefined },
      /**
       * Get the current value of the totalVolume key in global state
       */
      totalVolume: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalVolume")) as bigint | undefined },
      /**
       * Get the current value of the dailyTransactionCount key in global state
       */
      dailyTransactionCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("dailyTransactionCount")) as bigint | undefined },
      /**
       * Get the current value of the dailyVolume key in global state
       */
      dailyVolume: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("dailyVolume")) as bigint | undefined },
      /**
       * Get the current value of the lastResetTime key in global state
       */
      lastResetTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastResetTime")) as bigint | undefined },
      /**
       * Get the current value of the poolTransactionCounts key in global state
       */
      poolTransactionCounts: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("poolTransactionCounts")) as bigint | undefined },
      /**
       * Get the current value of the poolVolumes key in global state
       */
      poolVolumes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("poolVolumes")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current RealPredictiveLiquidityMining app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userStakedAmount: result.userStakedAmount,
            userTransactionCount: result.userTransactionCount,
            userTotalVolume: result.userTotalVolume,
            lastStakeTime: result.lastStakeTime,
          }
        },
        /**
         * Get the current value of the userStakedAmount key in local state
         */
        userStakedAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userStakedAmount")) as bigint | undefined },
        /**
         * Get the current value of the userTransactionCount key in local state
         */
        userTransactionCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userTransactionCount")) as bigint | undefined },
        /**
         * Get the current value of the userTotalVolume key in local state
         */
        userTotalVolume: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userTotalVolume")) as bigint | undefined },
        /**
         * Get the current value of the lastStakeTime key in local state
         */
        lastStakeTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("lastStakeTime")) as bigint | undefined },
      }
    },
  }

  public newGroup(): RealPredictiveLiquidityMiningComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool(string,string,string,string)string method call against the RealPredictiveLiquidityMining contract
       */
      createPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('createPool(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a stakeInPool(string,string,string)string method call against the RealPredictiveLiquidityMining contract
       */
      stakeInPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stakeInPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('stakeInPool(string,string,string)string', v))
        return this
      },
      /**
       * Add a unstakeFromPool(string,string,string)string method call against the RealPredictiveLiquidityMining contract
       */
      unstakeFromPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unstakeFromPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('unstakeFromPool(string,string,string)string', v))
        return this
      },
      /**
       * Add a getUserStake(string)string method call against the RealPredictiveLiquidityMining contract
       */
      getUserStake(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStake(string)string', v))
        return this
      },
      /**
       * Add a getPoolStats(string)string method call against the RealPredictiveLiquidityMining contract
       */
      getPoolStats(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolStats(string)string', v))
        return this
      },
      /**
       * Add a getAllTransactions()string method call against the RealPredictiveLiquidityMining contract
       */
      getAllTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAllTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAllTransactions()string', v))
        return this
      },
      /**
       * Add a getTransactionSummary()string method call against the RealPredictiveLiquidityMining contract
       */
      getTransactionSummary(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionSummary(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionSummary()string', v))
        return this
      },
      /**
       * Add a getPoolTransactions(string)string method call against the RealPredictiveLiquidityMining contract
       */
      getPoolTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolTransactions(string)string', v))
        return this
      },
      /**
       * Add a getPlatformStats()string method call against the RealPredictiveLiquidityMining contract
       */
      getPlatformStats(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlatformStats()string', v))
        return this
      },
      /**
       * Add a getVolumeStatistics()string method call against the RealPredictiveLiquidityMining contract
       */
      getVolumeStatistics(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVolumeStatistics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getVolumeStatistics()string', v))
        return this
      },
      /**
       * Add a getLastResetTime()uint64 method call against the RealPredictiveLiquidityMining contract
       */
      getLastResetTime(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getLastResetTime()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getLastResetTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLastResetTime(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLastResetTime()uint64', v))
        return this
      },
      /**
       * Add a resetDailyCounters()string method call against the RealPredictiveLiquidityMining contract
       */
      resetDailyCounters(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['resetDailyCounters()string'] | RealPredictiveLiquidityMiningArgs['tuple']['resetDailyCounters()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetDailyCounters(params)))
        resultMappers.push((v) => client.decodeReturnValue('resetDailyCounters()string', v))
        return this
      },
      /**
       * Add a clear state call to the RealPredictiveLiquidityMining contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as RealPredictiveLiquidityMiningComposer
  }
}
export type RealPredictiveLiquidityMiningComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool(string,string,string,string)string ABI method.
   *
   * Create a new liquidity pool with REAL state tracking
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['createPool(string,string,string,string)string'] | undefined]>

  /**
   * Calls the stakeInPool(string,string,string)string ABI method.
   *
   * Stake tokens in a specific pool - GERÇEK blockchain işlemi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeInPool(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['stakeInPool(string,string,string)string'] | undefined]>

  /**
   * Calls the unstakeFromPool(string,string,string)string ABI method.
   *
   * Unstake tokens from a specific pool - GERÇEK blockchain işlemi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstakeFromPool(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(string,string,string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(string,string,string)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['unstakeFromPool(string,string,string)string'] | undefined]>

  /**
   * Calls the getUserStake(string)string ABI method.
   *
   * Get user's total staked amount - GERÇEK blockchain verisi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStake(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake(string)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getUserStake(string)string'] | undefined]>

  /**
   * Calls the getPoolStats(string)string ABI method.
   *
   * Get pool statistics - GERÇEK blockchain verisi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolStats(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getPoolStats(string)string'] | undefined]>

  /**
   * Calls the getAllTransactions()string ABI method.
   *
   * Get all transactions on the platform - GERÇEK blockchain verisi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAllTransactions(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getAllTransactions()string'] | undefined]>

  /**
   * Calls the getTransactionSummary()string ABI method.
   *
   * Get transaction summary statistics - GERÇEK blockchain verisi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionSummary(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getTransactionSummary()string'] | undefined]>

  /**
   * Calls the getPoolTransactions(string)string ABI method.
   *
   * Get all transactions for a specific pool - GERÇEK blockchain verisi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolTransactions(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(string)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getPoolTransactions(string)string'] | undefined]>

  /**
   * Calls the getPlatformStats()string ABI method.
   *
   * Get platform statistics - GERÇEK blockchain verisi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformStats(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getPlatformStats()string'] | undefined]>

  /**
   * Calls the getVolumeStatistics()string ABI method.
   *
   * Get volume statistics - GERÇEK blockchain verisi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVolumeStatistics(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getVolumeStatistics()string'] | undefined]>

  /**
   * Calls the getLastResetTime()uint64 ABI method.
   *
   * Get daily reset time - GERÇEK blockchain verisi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLastResetTime(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getLastResetTime()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getLastResetTime()uint64']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getLastResetTime()uint64'] | undefined]>

  /**
   * Calls the resetDailyCounters()string ABI method.
   *
   * Reset daily counters (admin function) - GERÇEK state güncelleme
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetDailyCounters(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['resetDailyCounters()string'] | RealPredictiveLiquidityMiningArgs['tuple']['resetDailyCounters()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['resetDailyCounters()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the RealPredictiveLiquidityMining smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): RealPredictiveLiquidityMiningComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): RealPredictiveLiquidityMiningComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<RealPredictiveLiquidityMiningComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<RealPredictiveLiquidityMiningComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<RealPredictiveLiquidityMiningComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<RealPredictiveLiquidityMiningComposerResults<TReturns>>
}
export type RealPredictiveLiquidityMiningComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

