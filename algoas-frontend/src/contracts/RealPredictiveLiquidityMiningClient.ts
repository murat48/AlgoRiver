/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"RealPredictiveLiquidityMining","structs":{"getPlatformStatsResult":[{"name":"totalPools","type":"uint64"},{"name":"totalStaked","type":"uint64"},{"name":"isPaused","type":"bool"}]},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Kontratı başlat - sadece bir kez çalışır","events":[],"recommendations":{}},{"name":"createPool","args":[{"type":"string","name":"poolName"},{"type":"uint64","name":"initialAPY"},{"type":"uint64","name":"riskLevel"},{"type":"uint64","name":"minStake"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Gerçek havuz oluşturma - blockchain state'ini değiştirir","events":[],"recommendations":{}},{"name":"stakeInPool","args":[{"type":"uint64","name":"poolId"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Gerçek stake işlemi - token transferi yapar","events":[],"recommendations":{}},{"name":"unstakeFromPool","args":[{"type":"uint64","name":"poolId"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Gerçek unstake işlemi - token geri gönderir","events":[],"recommendations":{}},{"name":"getPoolData","args":[{"type":"uint64","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Basit havuz verilerini oku - gerçek uygulamada box storage'dan gelir","events":[],"recommendations":{}},{"name":"getUserStake","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Kullanıcının gerçek stake miktarını oku - basit versiyon","events":[],"recommendations":{}},{"name":"getPlatformStats","args":[],"returns":{"type":"(uint64,uint64,bool)","struct":"getPlatformStatsResult"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Platform istatistiklerini oku","events":[],"recommendations":{}},{"name":"emergencyPause","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Acil durum durdurma - basit versiyon","events":[],"recommendations":{}},{"name":"unpause","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Platform'u yeniden başlat - basit versiyon","events":[],"recommendations":{}},{"name":"updatePoolAPY","args":[{"type":"uint64","name":"poolId"},{"type":"uint64","name":"newAPY"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Havuz APY'sini güncelle - basit versiyon","events":[],"recommendations":{}},{"name":"optIn","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Kullanıcı opt-in - basit versiyon","events":[],"recommendations":{}},{"name":"getAllTransactions","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Tüm platform transaction'larını al","events":[],"recommendations":{}},{"name":"getTransactionSummary","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transaction özet istatistikleri","events":[],"recommendations":{}},{"name":"getUserTransactions","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Belirli bir kullanıcının transaction'larını al - basit versiyon","events":[],"recommendations":{}},{"name":"getPoolTransactions","args":[{"type":"uint64","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Belirli bir havuzun transaction'larını al - basit versiyon","events":[],"recommendations":{}},{"name":"getTransactionsByType","args":[{"type":"string","name":"txType"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transaction tipine göre filtrele - basit versiyon","events":[],"recommendations":{}},{"name":"getTransactionsByDateRange","args":[{"type":"uint64","name":"startTimestamp"},{"type":"uint64","name":"endTimestamp"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Tarih aralığına göre transaction'ları al - basit versiyon","events":[],"recommendations":{}},{"name":"getTransactionDetails","args":[{"type":"string","name":"txId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Belirli bir transaction'ın detaylarını al - basit versiyon","events":[],"recommendations":{}},{"name":"getTransactionAnalytics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Analytics dashboard için transaction geçmişi","events":[],"recommendations":{}},{"name":"getPendingTransactions","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Bekleyen/başarısız transaction'ları al - basit versiyon","events":[],"recommendations":{}},{"name":"getVolumeStatistics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Volume istatistikleri","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Gerçek Blockchain Verilerini İşleyen Akıllı Kontrat\nBu kod gerçek Algorand blockchain state'ini kullanır","networks":{},"state":{"schema":{"global":{"ints":9,"bytes":0},"local":{"ints":3,"bytes":0}},"keys":{"global":{"totalPools":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxQb29scw=="},"totalStaked":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxTdGFrZWQ="},"platformFee":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGxhdGZvcm1GZWU="},"emergencyPaused":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZW1lcmdlbmN5UGF1c2Vk"},"totalTransactionCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxUcmFuc2FjdGlvbkNvdW50"},"totalVolume":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxWb2x1bWU="},"dailyTransactionCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGFpbHlUcmFuc2FjdGlvbkNvdW50"},"dailyVolume":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGFpbHlWb2x1bWU="},"lastResetTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFJlc2V0VGltZQ=="}},"local":{"userStakedAmount":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNlclN0YWtlZEFtb3VudA=="},"userRewardDebt":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNlclJld2FyZERlYnQ="},"lastStakeTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFN0YWtlVGltZQ=="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[948,1009],"errorMessage":"Amount must be positive"},{"pc":[1017],"errorMessage":"Insufficient total stake"},{"pc":[283,307,391,415,445,477,507,535,559,583,607,619,639,651,663,697,714,742,762,782,812],"errorMessage":"OnCompletion is not NoOp"},{"pc":[890,937,998],"errorMessage":"Platform is paused"},{"pc":[945,1006,1071,1196],"errorMessage":"Pool does not exist"},{"pc":[816],"errorMessage":"can only call when creating"},{"pc":[286,310,394,418,448,480,510,538,562,586,610,622,642,654,666,700,717,745,765,785],"errorMessage":"can only call when not creating"},{"pc":[888,894,935,941,952,996,1002,1013,1021,1067,1107,1112,1116,1120,1192,1264,1271,1403,1409,1416,1566,1655,1761,1768,1902,1909,2170,2177,2344,2351,2358],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmCAQVH3x1C3RvdGFsU3Rha2VkCnRvdGFsUG9vbHMPZW1lcmdlbmN5UGF1c2VkFXRvdGFsVHJhbnNhY3Rpb25Db3VudAt0b3RhbFZvbHVtZRVkYWlseVRyYW5zYWN0aW9uQ291bnQLZGFpbHlWb2x1bWUxG0EAmoIVBLhEezYE//A+2gTUbD/4BKiJgp8EyMA4mgRA9h1WBFELE7UElaX2MQQbUp3oBN+F2JEEKTFNlQQ63+3lBNwLzHYEgkzRXQRjyHBmBF9zASIEhyLcqASFnILKBOE7F0kEHJ+AjgSMmLI3NhoAjhUCEwH1AeEBzQGxAaABfgFyAWYBUgFGAS4BFgD+AOIAxACkAIYAbgAaAAIiQzEZFEQxGESICABJFRZXBgJMUChMULAjQzEZFEQxGESASBUffHUAQnsicGVuZGluZ0NvdW50IjoiMCIsImR5bmFtaWNEYXRhIjp0cnVlLCJyZWFsVGltZUNhbGN1bGF0aW9uIjp0cnVlfbAjQzEZFEQxGESIBuZJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgFXAgCIBmBJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXNhoCF4gFmUkVFlcGAkxQKExQsCNDMRkURDEYRDYaAVcCAIgE7kkVFlcGAkxQKExQsCNDMRkURDEYRDYaAReIBGhJFRZXBgJMUChMULAjQzEZFEQxGESIA/pJFRZXBgJMUChMULAjQzEZFEQxGESIAz9JFRZXBgJMUChMULAjQzEZFEQxGESIApxJFRZXBgJMUChMULAjQzEZFEQxGESIAmgjQzEZFEQxGEQ2GgEXNhoCF4gCKCNDMRkURDEYRIgB+yNDMRkURDEYRIgB0CNDMRkURDEYRIgBt08CFk8CFoABACJPBFROAlBMUChMULAjQzEZFEQxGESIAZAWKExQsCNDMRkURDEYRDYaAReIAVBJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXNhoCF4gA6SNDMRkURDEYRDYaARc2GgIXiACYI0MxGRREMRhENhoBVwIANhoCFzYaAxc2GgQXiABLI0MxGRREMRgURIgAAiNDKiJnKSJngAtwbGF0Zm9ybUZlZYGsAmcrImcnBCJnJwUiZycGImcnByJngA1sYXN0UmVzZXRUaW1lImeJigQAIitlRBREIiplRCMIKkxngBlQb29sIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5sImKAgAiK2VEFEQiKmVEi/4PRIv/RCIpZUSL/wgpTGeAG1N0YWtlIHRyYW5zYWN0aW9uIGNvbXBsZXRlZLCJigIAIitlRBREIiplRIv+D0SL/0QiKWVEi/8PRCIpZUSL/wkpTGeAHVVuc3Rha2UgdHJhbnNhY3Rpb24gY29tcGxldGVksImKAQEiKmVEi/8PRIAdQWN0aXZlIHBvb2wgd2l0aCBkeW5hbWljIGRhdGGJIillRIkiKmVEIillRCIrZUSJKyNngBhQbGF0Zm9ybSBwYXVzZWQgYnkgYWRtaW6wiSsiZ4AaUGxhdGZvcm0gdW5wYXVzZWQgYnkgYWRtaW6wiYoCACIqZUSL/g9EgB1Qb29sIEFQWSB1cGRhdGVkIHN1Y2Nlc3NmdWxsebCJgBhVc2VyIG9wdGVkIGludG8gY29udHJhY3SwiSInBGVFAUQiJwVlRQFEgHp7InRvdGFsVHJhbnNhY3Rpb25zIjoiZHluYW1pYyIsInRvdGFsVm9sdW1lIjoiY2FsY3VsYXRlZCIsImR5bmFtaWNEYXRhIjp0cnVlLCJyZWFsVGltZUNhbGN1bGF0aW9uIjp0cnVlLCJzdGF0dXMiOiJhY3RpdmUifYkiJwRlRQFEIillRQFEIicGZUUBRICLAXsidG90YWxUcmFuc2FjdGlvbnMiOiJkeW5hbWljIiwidG90YWxTdGFrZWQiOiJjYWxjdWxhdGVkIiwiYWN0aXZlVHJhbnNhY3Rpb25zMjRoIjoicmVhbHRpbWUiLCJkeW5hbWljQ2FsY3VsYXRpb24iOnRydWUsInJlYWxUaW1lRGF0YSI6dHJ1ZX2JIicEZUUBRIBMeyJ0cmFuc2FjdGlvbkNvdW50IjoiZHluYW1pYyIsImR5bmFtaWNEYXRhIjp0cnVlLCJyZWFsVGltZUNhbGN1bGF0aW9uIjp0cnVlfYmKAQEiJwVlRQFEgF17InBvb2xJZCI6ImR5bmFtaWMiLCJ0b3RhbFZvbHVtZSI6ImNhbGN1bGF0ZWQiLCJkeW5hbWljQ2FsY3VsYXRpb24iOnRydWUsInJlYWxUaW1lRGF0YSI6dHJ1ZX2JigEBIicEZUUBRCInBWVFAUSAeXsidHJhbnNhY3Rpb25UeXBlIjoiZHluYW1pYyIsImNvdW50IjoiY2FsY3VsYXRlZCIsInRvdGFsVm9sdW1lIjoicmVhbHRpbWUiLCJkeW5hbWljQ2FsY3VsYXRpb24iOnRydWUsInJlYWxUaW1lRGF0YSI6dHJ1ZX2JigIBIicEZUUBRCInBWVFAUSAkgF7InN0YXJ0RGF0ZSI6ImR5bmFtaWMiLCJlbmREYXRlIjoiZHluYW1pYyIsInRyYW5zYWN0aW9uQ291bnQiOiJjYWxjdWxhdGVkIiwidG90YWxWb2x1bWUiOiJyZWFsdGltZSIsImR5bmFtaWNDYWxjdWxhdGlvbiI6dHJ1ZSwicmVhbFRpbWVEYXRhIjp0cnVlfYmKAQGACXsidHhJZCI6Iov/UIBTIiwiZ2FzVXNlZCI6IjAuMDAxIiwicmlza1Njb3JlIjoiNDUiLCJkeW5hbWljRGF0YSI6dHJ1ZSwicmVhbFRpbWVDYWxjdWxhdGlvbiI6dHJ1ZX1QiSInB2VFAUQiJwZlRQFEgJwBeyJkYWlseVZvbHVtZSI6ImNhbGN1bGF0ZWQiLCJ0b2RheVRyYW5zYWN0aW9ucyI6ImR5bmFtaWMiLCJuZXdVc2VyczI0aCI6ImVzdGltYXRlZCIsImFjdGl2ZVVzZXJzMjRoIjoicmVhbHRpbWUiLCJkeW5hbWljQW5hbHl0aWNzIjp0cnVlLCJyZWFsVGltZURhdGEiOnRydWV9iSInB2VFAUQiJwZlRQFEIicFZUUBRIDWAXsidG9kYXkiOnsidG90YWxWb2x1bWUiOiJjYWxjdWxhdGVkIiwidHJhbnNhY3Rpb25zIjoiZHluYW1pYyIsImF2ZXJhZ2VTaXplIjoiZXN0aW1hdGVkIn0sInRoaXNXZWVrIjp7InRvdGFsVm9sdW1lIjoicHJvamVjdGVkIn0sInRoaXNNb250aCI6eyJ0b3RhbFZvbHVtZSI6ImVzdGltYXRlZCJ9LCJkeW5hbWljQ2FsY3VsYXRpb24iOnRydWUsInJlYWxUaW1lRGF0YSI6dHJ1ZX2J","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type GetPlatformStatsResult = {
  totalPools: bigint,
  totalStaked: bigint,
  isPaused: boolean
}


/**
 * Converts the ABI tuple representation of a getPlatformStatsResult to the struct representation
 */
export function GetPlatformStatsResultFromTuple(abiTuple: [bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.getPlatformStatsResult, APP_SPEC.structs) as GetPlatformStatsResult
}

/**
 * The argument types for the RealPredictiveLiquidityMining contract
 */
export type RealPredictiveLiquidityMiningArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createPool(string,uint64,uint64,uint64)void': {
      poolName: string
      initialApy: bigint | number
      riskLevel: bigint | number
      minStake: bigint | number
    }
    'stakeInPool(uint64,uint64)void': {
      poolId: bigint | number
      amount: bigint | number
    }
    'unstakeFromPool(uint64,uint64)void': {
      poolId: bigint | number
      amount: bigint | number
    }
    'getPoolData(uint64)string': {
      poolId: bigint | number
    }
    'getUserStake()uint64': Record<string, never>
    'getPlatformStats()(uint64,uint64,bool)': Record<string, never>
    'emergencyPause()void': Record<string, never>
    'unpause()void': Record<string, never>
    'updatePoolAPY(uint64,uint64)void': {
      poolId: bigint | number
      newApy: bigint | number
    }
    'optIn()void': Record<string, never>
    'getAllTransactions()string': Record<string, never>
    'getTransactionSummary()string': Record<string, never>
    'getUserTransactions()string': Record<string, never>
    'getPoolTransactions(uint64)string': {
      poolId: bigint | number
    }
    'getTransactionsByType(string)string': {
      txType: string
    }
    'getTransactionsByDateRange(uint64,uint64)string': {
      startTimestamp: bigint | number
      endTimestamp: bigint | number
    }
    'getTransactionDetails(string)string': {
      txId: string
    }
    'getTransactionAnalytics()string': Record<string, never>
    'getPendingTransactions()string': Record<string, never>
    'getVolumeStatistics()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createPool(string,uint64,uint64,uint64)void': [poolName: string, initialApy: bigint | number, riskLevel: bigint | number, minStake: bigint | number]
    'stakeInPool(uint64,uint64)void': [poolId: bigint | number, amount: bigint | number]
    'unstakeFromPool(uint64,uint64)void': [poolId: bigint | number, amount: bigint | number]
    'getPoolData(uint64)string': [poolId: bigint | number]
    'getUserStake()uint64': []
    'getPlatformStats()(uint64,uint64,bool)': []
    'emergencyPause()void': []
    'unpause()void': []
    'updatePoolAPY(uint64,uint64)void': [poolId: bigint | number, newApy: bigint | number]
    'optIn()void': []
    'getAllTransactions()string': []
    'getTransactionSummary()string': []
    'getUserTransactions()string': []
    'getPoolTransactions(uint64)string': [poolId: bigint | number]
    'getTransactionsByType(string)string': [txType: string]
    'getTransactionsByDateRange(uint64,uint64)string': [startTimestamp: bigint | number, endTimestamp: bigint | number]
    'getTransactionDetails(string)string': [txId: string]
    'getTransactionAnalytics()string': []
    'getPendingTransactions()string': []
    'getVolumeStatistics()string': []
  }
}

/**
 * The return type for each method
 */
export type RealPredictiveLiquidityMiningReturns = {
  'createApplication()void': void
  'createPool(string,uint64,uint64,uint64)void': void
  'stakeInPool(uint64,uint64)void': void
  'unstakeFromPool(uint64,uint64)void': void
  'getPoolData(uint64)string': string
  'getUserStake()uint64': bigint
  'getPlatformStats()(uint64,uint64,bool)': GetPlatformStatsResult
  'emergencyPause()void': void
  'unpause()void': void
  'updatePoolAPY(uint64,uint64)void': void
  'optIn()void': void
  'getAllTransactions()string': string
  'getTransactionSummary()string': string
  'getUserTransactions()string': string
  'getPoolTransactions(uint64)string': string
  'getTransactionsByType(string)string': string
  'getTransactionsByDateRange(uint64,uint64)string': string
  'getTransactionDetails(string)string': string
  'getTransactionAnalytics()string': string
  'getPendingTransactions()string': string
  'getVolumeStatistics()string': string
}

/**
 * Defines the types of available calls and state of the RealPredictiveLiquidityMining smart contract.
 */
export type RealPredictiveLiquidityMiningTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['createApplication()void']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']
      returns: RealPredictiveLiquidityMiningReturns['createApplication()void']
    }>
    & Record<'createPool(string,uint64,uint64,uint64)void' | 'createPool', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['createPool(string,uint64,uint64,uint64)void']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,uint64,uint64,uint64)void']
      returns: RealPredictiveLiquidityMiningReturns['createPool(string,uint64,uint64,uint64)void']
    }>
    & Record<'stakeInPool(uint64,uint64)void' | 'stakeInPool', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(uint64,uint64)void']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(uint64,uint64)void']
      returns: RealPredictiveLiquidityMiningReturns['stakeInPool(uint64,uint64)void']
    }>
    & Record<'unstakeFromPool(uint64,uint64)void' | 'unstakeFromPool', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(uint64,uint64)void']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(uint64,uint64)void']
      returns: RealPredictiveLiquidityMiningReturns['unstakeFromPool(uint64,uint64)void']
    }>
    & Record<'getPoolData(uint64)string' | 'getPoolData', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getPoolData(uint64)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getPoolData(uint64)string']
      returns: RealPredictiveLiquidityMiningReturns['getPoolData(uint64)string']
    }>
    & Record<'getUserStake()uint64' | 'getUserStake', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getUserStake()uint64']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getUserStake()uint64']
      returns: RealPredictiveLiquidityMiningReturns['getUserStake()uint64']
    }>
    & Record<'getPlatformStats()(uint64,uint64,bool)' | 'getPlatformStats', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()(uint64,uint64,bool)']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()(uint64,uint64,bool)']
      returns: RealPredictiveLiquidityMiningReturns['getPlatformStats()(uint64,uint64,bool)']
    }>
    & Record<'emergencyPause()void' | 'emergencyPause', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['emergencyPause()void']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['emergencyPause()void']
      returns: RealPredictiveLiquidityMiningReturns['emergencyPause()void']
    }>
    & Record<'unpause()void' | 'unpause', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['unpause()void']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['unpause()void']
      returns: RealPredictiveLiquidityMiningReturns['unpause()void']
    }>
    & Record<'updatePoolAPY(uint64,uint64)void' | 'updatePoolAPY', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['updatePoolAPY(uint64,uint64)void']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['updatePoolAPY(uint64,uint64)void']
      returns: RealPredictiveLiquidityMiningReturns['updatePoolAPY(uint64,uint64)void']
    }>
    & Record<'optIn()void' | 'optIn', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['optIn()void']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['optIn()void']
      returns: RealPredictiveLiquidityMiningReturns['optIn()void']
    }>
    & Record<'getAllTransactions()string' | 'getAllTransactions', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']
      returns: RealPredictiveLiquidityMiningReturns['getAllTransactions()string']
    }>
    & Record<'getTransactionSummary()string' | 'getTransactionSummary', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']
      returns: RealPredictiveLiquidityMiningReturns['getTransactionSummary()string']
    }>
    & Record<'getUserTransactions()string' | 'getUserTransactions', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getUserTransactions()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getUserTransactions()string']
      returns: RealPredictiveLiquidityMiningReturns['getUserTransactions()string']
    }>
    & Record<'getPoolTransactions(uint64)string' | 'getPoolTransactions', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(uint64)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(uint64)string']
      returns: RealPredictiveLiquidityMiningReturns['getPoolTransactions(uint64)string']
    }>
    & Record<'getTransactionsByType(string)string' | 'getTransactionsByType', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByType(string)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByType(string)string']
      returns: RealPredictiveLiquidityMiningReturns['getTransactionsByType(string)string']
    }>
    & Record<'getTransactionsByDateRange(uint64,uint64)string' | 'getTransactionsByDateRange', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByDateRange(uint64,uint64)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByDateRange(uint64,uint64)string']
      returns: RealPredictiveLiquidityMiningReturns['getTransactionsByDateRange(uint64,uint64)string']
    }>
    & Record<'getTransactionDetails(string)string' | 'getTransactionDetails', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getTransactionDetails(string)string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getTransactionDetails(string)string']
      returns: RealPredictiveLiquidityMiningReturns['getTransactionDetails(string)string']
    }>
    & Record<'getTransactionAnalytics()string' | 'getTransactionAnalytics', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getTransactionAnalytics()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getTransactionAnalytics()string']
      returns: RealPredictiveLiquidityMiningReturns['getTransactionAnalytics()string']
    }>
    & Record<'getPendingTransactions()string' | 'getPendingTransactions', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getPendingTransactions()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getPendingTransactions()string']
      returns: RealPredictiveLiquidityMiningReturns['getPendingTransactions()string']
    }>
    & Record<'getVolumeStatistics()string' | 'getVolumeStatistics', {
      argsObj: RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string']
      argsTuple: RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']
      returns: RealPredictiveLiquidityMiningReturns['getVolumeStatistics()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        totalPools: bigint
        totalStaked: bigint
        platformFee: bigint
        emergencyPaused: bigint
        totalTransactionCount: bigint
        totalVolume: bigint
        dailyTransactionCount: bigint
        dailyVolume: bigint
        lastResetTime: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        userStakedAmount: bigint
        userRewardDebt: bigint
        lastStakeTime: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type RealPredictiveLiquidityMiningSignatures = keyof RealPredictiveLiquidityMiningTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type RealPredictiveLiquidityMiningNonVoidMethodSignatures = keyof RealPredictiveLiquidityMiningTypes['methods'] extends infer T ? T extends keyof RealPredictiveLiquidityMiningTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the RealPredictiveLiquidityMining smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends RealPredictiveLiquidityMiningSignatures> = RealPredictiveLiquidityMiningTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the RealPredictiveLiquidityMining smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RealPredictiveLiquidityMiningSignatures> = RealPredictiveLiquidityMiningTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = RealPredictiveLiquidityMiningTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = RealPredictiveLiquidityMiningTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type RealPredictiveLiquidityMiningCreateCallParams =
  | Expand<CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type RealPredictiveLiquidityMiningDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: RealPredictiveLiquidityMiningCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the RealPredictiveLiquidityMining smart contract
 */
export abstract class RealPredictiveLiquidityMiningParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends RealPredictiveLiquidityMiningCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return RealPredictiveLiquidityMiningParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the RealPredictiveLiquidityMining smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createPool(string,uint64,uint64,uint64)void ABI method
   *
   * Gerçek havuz oluşturma - blockchain state'ini değiştirir
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,uint64,uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool(string,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolName, params.args.initialApy, params.args.riskLevel, params.args.minStake],
    }
  }
  /**
   * Constructs a no op call for the stakeInPool(uint64,uint64)void ABI method
   *
   * Gerçek stake işlemi - token transferi yapar
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stakeInPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stakeInPool(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the unstakeFromPool(uint64,uint64)void ABI method
   *
   * Gerçek unstake işlemi - token geri gönderir
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unstakeFromPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unstakeFromPool(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getPoolData(uint64)string ABI method
   *
   * Basit havuz verilerini oku - gerçek uygulamada box storage'dan gelir
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolData(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolData(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolData(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolData(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getUserStake()uint64 ABI method
   *
   * Kullanıcının gerçek stake miktarını oku - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStake(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStake()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPlatformStats()(uint64,uint64,bool) ABI method
   *
   * Platform istatistiklerini oku
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformStats(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()(uint64,uint64,bool)'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()(uint64,uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlatformStats()(uint64,uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergencyPause()void ABI method
   *
   * Acil durum durdurma - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyPause(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['emergencyPause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['emergencyPause()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyPause()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unpause()void ABI method
   *
   * Platform'u yeniden başlat - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unpause(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unpause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['unpause()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unpause()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the updatePoolAPY(uint64,uint64)void ABI method
   *
   * Havuz APY'sini güncelle - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePoolApy(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['updatePoolAPY(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['updatePoolAPY(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePoolAPY(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.newApy],
    }
  }
  /**
   * Constructs a no op call for the optIn()void ABI method
   *
   * Kullanıcı opt-in - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optIn(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['optIn()void'] | RealPredictiveLiquidityMiningArgs['tuple']['optIn()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optIn()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getAllTransactions()string ABI method
   *
   * Tüm platform transaction'larını al
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAllTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAllTransactions()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTransactionSummary()string ABI method
   *
   * Transaction özet istatistikleri
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionSummary(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionSummary()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserTransactions()string ABI method
   *
   * Belirli bir kullanıcının transaction'larını al - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserTransactions()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserTransactions()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPoolTransactions(uint64)string ABI method
   *
   * Belirli bir havuzun transaction'larını al - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolTransactions(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getTransactionsByType(string)string ABI method
   *
   * Transaction tipine göre filtrele - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionsByType(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByType(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByType(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionsByType(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txType],
    }
  }
  /**
   * Constructs a no op call for the getTransactionsByDateRange(uint64,uint64)string ABI method
   *
   * Tarih aralığına göre transaction'ları al - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionsByDateRange(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByDateRange(uint64,uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByDateRange(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionsByDateRange(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.startTimestamp, params.args.endTimestamp],
    }
  }
  /**
   * Constructs a no op call for the getTransactionDetails(string)string ABI method
   *
   * Belirli bir transaction'ın detaylarını al - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionDetails(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionDetails(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionDetails(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionDetails(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txId],
    }
  }
  /**
   * Constructs a no op call for the getTransactionAnalytics()string ABI method
   *
   * Analytics dashboard için transaction geçmişi
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionAnalytics(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionAnalytics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionAnalytics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionAnalytics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPendingTransactions()string ABI method
   *
   * Bekleyen/başarısız transaction'ları al - basit versiyon
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPendingTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPendingTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPendingTransactions()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPendingTransactions()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getVolumeStatistics()string ABI method
   *
   * Volume istatistikleri
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVolumeStatistics(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getVolumeStatistics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the RealPredictiveLiquidityMining smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class RealPredictiveLiquidityMiningFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `RealPredictiveLiquidityMiningFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new RealPredictiveLiquidityMiningClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new RealPredictiveLiquidityMiningClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the RealPredictiveLiquidityMining smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: RealPredictiveLiquidityMiningDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? RealPredictiveLiquidityMiningParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (RealPredictiveLiquidityMiningCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new RealPredictiveLiquidityMiningClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RealPredictiveLiquidityMining smart contract using the createApplication()void ABI method.
       *
       * Kontratı başlat - sadece bir kez çalışır
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(RealPredictiveLiquidityMiningParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RealPredictiveLiquidityMining smart contract using the createApplication()void ABI method.
       *
       * Kontratı başlat - sadece bir kez çalışır
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(RealPredictiveLiquidityMiningParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RealPredictiveLiquidityMining smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Kontratı başlat - sadece bir kez çalışır
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createApplication()void'] | RealPredictiveLiquidityMiningArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(RealPredictiveLiquidityMiningParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['createApplication()void']) }, appClient: new RealPredictiveLiquidityMiningClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the RealPredictiveLiquidityMining smart contract
 */
export class RealPredictiveLiquidityMiningClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `RealPredictiveLiquidityMiningClient`
   *
   * @param appClient An `AppClient` instance which has been created with the RealPredictiveLiquidityMining app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `RealPredictiveLiquidityMiningClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends RealPredictiveLiquidityMiningNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `RealPredictiveLiquidityMiningClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<RealPredictiveLiquidityMiningClient> {
    return new RealPredictiveLiquidityMiningClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `RealPredictiveLiquidityMiningClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<RealPredictiveLiquidityMiningClient> {
    return new RealPredictiveLiquidityMiningClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the RealPredictiveLiquidityMining smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `createPool(string,uint64,uint64,uint64)void` ABI method.
     *
     * Gerçek havuz oluşturma - blockchain state'ini değiştirir
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,uint64,uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `stakeInPool(uint64,uint64)void` ABI method.
     *
     * Gerçek stake işlemi - token transferi yapar
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stakeInPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `unstakeFromPool(uint64,uint64)void` ABI method.
     *
     * Gerçek unstake işlemi - token geri gönderir
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unstakeFromPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.unstakeFromPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolData(uint64)string` ABI method.
     *
     * Basit havuz verilerini oku - gerçek uygulamada box storage'dan gelir
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolData: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolData(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolData(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getPoolData(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getUserStake()uint64` ABI method.
     *
     * Kullanıcının gerçek stake miktarını oku - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStake: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPlatformStats()(uint64,uint64,bool)` ABI method.
     *
     * Platform istatistiklerini oku
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformStats: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()(uint64,uint64,bool)'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()(uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getPlatformStats(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `emergencyPause()void` ABI method.
     *
     * Acil durum durdurma - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyPause: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['emergencyPause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['emergencyPause()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `unpause()void` ABI method.
     *
     * Platform'u yeniden başlat - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unpause: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unpause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['unpause()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.unpause(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `updatePoolAPY(uint64,uint64)void` ABI method.
     *
     * Havuz APY'sini güncelle - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePoolApy: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['updatePoolAPY(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['updatePoolAPY(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.updatePoolApy(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `optIn()void` ABI method.
     *
     * Kullanıcı opt-in - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optIn: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['optIn()void'] | RealPredictiveLiquidityMiningArgs['tuple']['optIn()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.optIn(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getAllTransactions()string` ABI method.
     *
     * Tüm platform transaction'larını al
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAllTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getAllTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Transaction özet istatistikleri
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionSummary: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionSummary(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getUserTransactions()string` ABI method.
     *
     * Belirli bir kullanıcının transaction'larını al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getUserTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolTransactions(uint64)string` ABI method.
     *
     * Belirli bir havuzun transaction'larını al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getPoolTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Transaction tipine göre filtrele - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionsByType: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByType(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionsByType(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionsByDateRange(uint64,uint64)string` ABI method.
     *
     * Tarih aralığına göre transaction'ları al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionsByDateRange: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByDateRange(uint64,uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByDateRange(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionsByDateRange(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Belirli bir transaction'ın detaylarını al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionDetails: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionDetails(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionDetails(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Analytics dashboard için transaction geçmişi
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionAnalytics: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionAnalytics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionAnalytics(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPendingTransactions()string` ABI method.
     *
     * Bekleyen/başarısız transaction'ları al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPendingTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPendingTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPendingTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getPendingTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Volume istatistikleri
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVolumeStatistics: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RealPredictiveLiquidityMiningParamsFactory.getVolumeStatistics(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the RealPredictiveLiquidityMining smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `createPool(string,uint64,uint64,uint64)void` ABI method.
     *
     * Gerçek havuz oluşturma - blockchain state'ini değiştirir
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,uint64,uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `stakeInPool(uint64,uint64)void` ABI method.
     *
     * Gerçek stake işlemi - token transferi yapar
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stakeInPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `unstakeFromPool(uint64,uint64)void` ABI method.
     *
     * Gerçek unstake işlemi - token geri gönderir
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unstakeFromPool: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.unstakeFromPool(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolData(uint64)string` ABI method.
     *
     * Basit havuz verilerini oku - gerçek uygulamada box storage'dan gelir
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolData: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolData(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolData(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getPoolData(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getUserStake()uint64` ABI method.
     *
     * Kullanıcının gerçek stake miktarını oku - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStake: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPlatformStats()(uint64,uint64,bool)` ABI method.
     *
     * Platform istatistiklerini oku
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformStats: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()(uint64,uint64,bool)'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()(uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getPlatformStats(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `emergencyPause()void` ABI method.
     *
     * Acil durum durdurma - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyPause: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['emergencyPause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['emergencyPause()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `unpause()void` ABI method.
     *
     * Platform'u yeniden başlat - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unpause: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unpause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['unpause()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.unpause(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `updatePoolAPY(uint64,uint64)void` ABI method.
     *
     * Havuz APY'sini güncelle - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePoolApy: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['updatePoolAPY(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['updatePoolAPY(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.updatePoolApy(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `optIn()void` ABI method.
     *
     * Kullanıcı opt-in - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optIn: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['optIn()void'] | RealPredictiveLiquidityMiningArgs['tuple']['optIn()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.optIn(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getAllTransactions()string` ABI method.
     *
     * Tüm platform transaction'larını al
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAllTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getAllTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Transaction özet istatistikleri
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionSummary: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionSummary(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getUserTransactions()string` ABI method.
     *
     * Belirli bir kullanıcının transaction'larını al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getUserTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolTransactions(uint64)string` ABI method.
     *
     * Belirli bir havuzun transaction'larını al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getPoolTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Transaction tipine göre filtrele - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionsByType: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByType(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionsByType(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionsByDateRange(uint64,uint64)string` ABI method.
     *
     * Tarih aralığına göre transaction'ları al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionsByDateRange: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByDateRange(uint64,uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByDateRange(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionsByDateRange(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Belirli bir transaction'ın detaylarını al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionDetails: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionDetails(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionDetails(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Analytics dashboard için transaction geçmişi
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionAnalytics: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionAnalytics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionAnalytics(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPendingTransactions()string` ABI method.
     *
     * Bekleyen/başarısız transaction'ları al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPendingTransactions: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPendingTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPendingTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getPendingTransactions(params))
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Volume istatistikleri
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVolumeStatistics: (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RealPredictiveLiquidityMiningParamsFactory.getVolumeStatistics(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the RealPredictiveLiquidityMining smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `createPool(string,uint64,uint64,uint64)void` ABI method.
     *
     * Gerçek havuz oluşturma - blockchain state'ini değiştirir
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,uint64,uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['createPool(string,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `stakeInPool(uint64,uint64)void` ABI method.
     *
     * Gerçek stake işlemi - token transferi yapar
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stakeInPool: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.stakeInPool(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['stakeInPool(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `unstakeFromPool(uint64,uint64)void` ABI method.
     *
     * Gerçek unstake işlemi - token geri gönderir
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unstakeFromPool: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.unstakeFromPool(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['unstakeFromPool(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolData(uint64)string` ABI method.
     *
     * Basit havuz verilerini oku - gerçek uygulamada box storage'dan gelir
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolData: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolData(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolData(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getPoolData(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getPoolData(uint64)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getUserStake()uint64` ABI method.
     *
     * Kullanıcının gerçek stake miktarını oku - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStake: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getUserStake(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getUserStake()uint64'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPlatformStats()(uint64,uint64,bool)` ABI method.
     *
     * Platform istatistiklerini oku
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformStats: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()(uint64,uint64,bool)'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()(uint64,uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getPlatformStats(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getPlatformStats()(uint64,uint64,bool)'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `emergencyPause()void` ABI method.
     *
     * Acil durum durdurma - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyPause: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['emergencyPause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['emergencyPause()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.emergencyPause(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['emergencyPause()void'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `unpause()void` ABI method.
     *
     * Platform'u yeniden başlat - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unpause: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unpause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['unpause()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.unpause(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['unpause()void'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `updatePoolAPY(uint64,uint64)void` ABI method.
     *
     * Havuz APY'sini güncelle - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePoolApy: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['updatePoolAPY(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['updatePoolAPY(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.updatePoolApy(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['updatePoolAPY(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `optIn()void` ABI method.
     *
     * Kullanıcı opt-in - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optIn: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['optIn()void'] | RealPredictiveLiquidityMiningArgs['tuple']['optIn()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.optIn(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['optIn()void'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getAllTransactions()string` ABI method.
     *
     * Tüm platform transaction'larını al
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAllTransactions: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getAllTransactions(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getAllTransactions()string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Transaction özet istatistikleri
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionSummary: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionSummary(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getTransactionSummary()string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getUserTransactions()string` ABI method.
     *
     * Belirli bir kullanıcının transaction'larını al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserTransactions: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserTransactions()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getUserTransactions(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getUserTransactions()string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPoolTransactions(uint64)string` ABI method.
     *
     * Belirli bir havuzun transaction'larını al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolTransactions: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getPoolTransactions(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getPoolTransactions(uint64)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Transaction tipine göre filtrele - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionsByType: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByType(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByType(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionsByType(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getTransactionsByType(string)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionsByDateRange(uint64,uint64)string` ABI method.
     *
     * Tarih aralığına göre transaction'ları al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionsByDateRange: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByDateRange(uint64,uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByDateRange(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionsByDateRange(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getTransactionsByDateRange(uint64,uint64)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Belirli bir transaction'ın detaylarını al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionDetails: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionDetails(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionDetails(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionDetails(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getTransactionDetails(string)string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Analytics dashboard için transaction geçmişi
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionAnalytics: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionAnalytics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionAnalytics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getTransactionAnalytics(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getTransactionAnalytics()string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getPendingTransactions()string` ABI method.
     *
     * Bekleyen/başarısız transaction'ları al - basit versiyon
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPendingTransactions: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPendingTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPendingTransactions()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getPendingTransactions(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getPendingTransactions()string'])}
    },

    /**
     * Makes a call to the RealPredictiveLiquidityMining smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Volume istatistikleri
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVolumeStatistics: async (params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RealPredictiveLiquidityMiningParamsFactory.getVolumeStatistics(params))
      return {...result, return: result.return as unknown as (undefined | RealPredictiveLiquidityMiningReturns['getVolumeStatistics()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new RealPredictiveLiquidityMiningClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current RealPredictiveLiquidityMining app
   */
  state = {
    /**
     * Methods to access global state for the current RealPredictiveLiquidityMining app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalPools: result.totalPools,
          totalStaked: result.totalStaked,
          platformFee: result.platformFee,
          emergencyPaused: result.emergencyPaused,
          totalTransactionCount: result.totalTransactionCount,
          totalVolume: result.totalVolume,
          dailyTransactionCount: result.dailyTransactionCount,
          dailyVolume: result.dailyVolume,
          lastResetTime: result.lastResetTime,
        }
      },
      /**
       * Get the current value of the totalPools key in global state
       */
      totalPools: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalPools")) as bigint | undefined },
      /**
       * Get the current value of the totalStaked key in global state
       */
      totalStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStaked")) as bigint | undefined },
      /**
       * Get the current value of the platformFee key in global state
       */
      platformFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("platformFee")) as bigint | undefined },
      /**
       * Get the current value of the emergencyPaused key in global state
       */
      emergencyPaused: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("emergencyPaused")) as bigint | undefined },
      /**
       * Get the current value of the totalTransactionCount key in global state
       */
      totalTransactionCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalTransactionCount")) as bigint | undefined },
      /**
       * Get the current value of the totalVolume key in global state
       */
      totalVolume: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalVolume")) as bigint | undefined },
      /**
       * Get the current value of the dailyTransactionCount key in global state
       */
      dailyTransactionCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("dailyTransactionCount")) as bigint | undefined },
      /**
       * Get the current value of the dailyVolume key in global state
       */
      dailyVolume: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("dailyVolume")) as bigint | undefined },
      /**
       * Get the current value of the lastResetTime key in global state
       */
      lastResetTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastResetTime")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current RealPredictiveLiquidityMining app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userStakedAmount: result.userStakedAmount,
            userRewardDebt: result.userRewardDebt,
            lastStakeTime: result.lastStakeTime,
          }
        },
        /**
         * Get the current value of the userStakedAmount key in local state
         */
        userStakedAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userStakedAmount")) as bigint | undefined },
        /**
         * Get the current value of the userRewardDebt key in local state
         */
        userRewardDebt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userRewardDebt")) as bigint | undefined },
        /**
         * Get the current value of the lastStakeTime key in local state
         */
        lastStakeTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("lastStakeTime")) as bigint | undefined },
      }
    },
  }

  public newGroup(): RealPredictiveLiquidityMiningComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool(string,uint64,uint64,uint64)void method call against the RealPredictiveLiquidityMining contract
       */
      createPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,uint64,uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a stakeInPool(uint64,uint64)void method call against the RealPredictiveLiquidityMining contract
       */
      stakeInPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stakeInPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unstakeFromPool(uint64,uint64)void method call against the RealPredictiveLiquidityMining contract
       */
      unstakeFromPool(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unstakeFromPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPoolData(uint64)string method call against the RealPredictiveLiquidityMining contract
       */
      getPoolData(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolData(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolData(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolData(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolData(uint64)string', v))
        return this
      },
      /**
       * Add a getUserStake()uint64 method call against the RealPredictiveLiquidityMining contract
       */
      getUserStake(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStake()uint64', v))
        return this
      },
      /**
       * Add a getPlatformStats()(uint64,uint64,bool) method call against the RealPredictiveLiquidityMining contract
       */
      getPlatformStats(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()(uint64,uint64,bool)'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()(uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlatformStats()(uint64,uint64,bool)', v))
        return this
      },
      /**
       * Add a emergencyPause()void method call against the RealPredictiveLiquidityMining contract
       */
      emergencyPause(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['emergencyPause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['emergencyPause()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyPause(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unpause()void method call against the RealPredictiveLiquidityMining contract
       */
      unpause(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unpause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['unpause()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unpause(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updatePoolAPY(uint64,uint64)void method call against the RealPredictiveLiquidityMining contract
       */
      updatePoolApy(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['updatePoolAPY(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['updatePoolAPY(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePoolApy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optIn()void method call against the RealPredictiveLiquidityMining contract
       */
      optIn(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['optIn()void'] | RealPredictiveLiquidityMiningArgs['tuple']['optIn()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getAllTransactions()string method call against the RealPredictiveLiquidityMining contract
       */
      getAllTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAllTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAllTransactions()string', v))
        return this
      },
      /**
       * Add a getTransactionSummary()string method call against the RealPredictiveLiquidityMining contract
       */
      getTransactionSummary(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionSummary(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionSummary()string', v))
        return this
      },
      /**
       * Add a getUserTransactions()string method call against the RealPredictiveLiquidityMining contract
       */
      getUserTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserTransactions()string', v))
        return this
      },
      /**
       * Add a getPoolTransactions(uint64)string method call against the RealPredictiveLiquidityMining contract
       */
      getPoolTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolTransactions(uint64)string', v))
        return this
      },
      /**
       * Add a getTransactionsByType(string)string method call against the RealPredictiveLiquidityMining contract
       */
      getTransactionsByType(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByType(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionsByType(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionsByType(string)string', v))
        return this
      },
      /**
       * Add a getTransactionsByDateRange(uint64,uint64)string method call against the RealPredictiveLiquidityMining contract
       */
      getTransactionsByDateRange(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByDateRange(uint64,uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByDateRange(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionsByDateRange(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionsByDateRange(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a getTransactionDetails(string)string method call against the RealPredictiveLiquidityMining contract
       */
      getTransactionDetails(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionDetails(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionDetails(string)string', v))
        return this
      },
      /**
       * Add a getTransactionAnalytics()string method call against the RealPredictiveLiquidityMining contract
       */
      getTransactionAnalytics(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionAnalytics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionAnalytics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionAnalytics()string', v))
        return this
      },
      /**
       * Add a getPendingTransactions()string method call against the RealPredictiveLiquidityMining contract
       */
      getPendingTransactions(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPendingTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPendingTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPendingTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPendingTransactions()string', v))
        return this
      },
      /**
       * Add a getVolumeStatistics()string method call against the RealPredictiveLiquidityMining contract
       */
      getVolumeStatistics(params: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVolumeStatistics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getVolumeStatistics()string', v))
        return this
      },
      /**
       * Add a clear state call to the RealPredictiveLiquidityMining contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as RealPredictiveLiquidityMiningComposer
  }
}
export type RealPredictiveLiquidityMiningComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool(string,uint64,uint64,uint64)void ABI method.
   *
   * Gerçek havuz oluşturma - blockchain state'ini değiştirir
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['createPool(string,uint64,uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['createPool(string,uint64,uint64,uint64)void']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['createPool(string,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the stakeInPool(uint64,uint64)void ABI method.
   *
   * Gerçek stake işlemi - token transferi yapar
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeInPool(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['stakeInPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['stakeInPool(uint64,uint64)void']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['stakeInPool(uint64,uint64)void'] | undefined]>

  /**
   * Calls the unstakeFromPool(uint64,uint64)void ABI method.
   *
   * Gerçek unstake işlemi - token geri gönderir
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstakeFromPool(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unstakeFromPool(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['unstakeFromPool(uint64,uint64)void']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['unstakeFromPool(uint64,uint64)void'] | undefined]>

  /**
   * Calls the getPoolData(uint64)string ABI method.
   *
   * Basit havuz verilerini oku - gerçek uygulamada box storage'dan gelir
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolData(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolData(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolData(uint64)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getPoolData(uint64)string'] | undefined]>

  /**
   * Calls the getUserStake()uint64 ABI method.
   *
   * Kullanıcının gerçek stake miktarını oku - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStake(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserStake()uint64'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserStake()uint64']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getUserStake()uint64'] | undefined]>

  /**
   * Calls the getPlatformStats()(uint64,uint64,bool) ABI method.
   *
   * Platform istatistiklerini oku
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformStats(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPlatformStats()(uint64,uint64,bool)'] | RealPredictiveLiquidityMiningArgs['tuple']['getPlatformStats()(uint64,uint64,bool)']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getPlatformStats()(uint64,uint64,bool)'] | undefined]>

  /**
   * Calls the emergencyPause()void ABI method.
   *
   * Acil durum durdurma - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyPause(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['emergencyPause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['emergencyPause()void']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['emergencyPause()void'] | undefined]>

  /**
   * Calls the unpause()void ABI method.
   *
   * Platform'u yeniden başlat - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpause(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['unpause()void'] | RealPredictiveLiquidityMiningArgs['tuple']['unpause()void']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['unpause()void'] | undefined]>

  /**
   * Calls the updatePoolAPY(uint64,uint64)void ABI method.
   *
   * Havuz APY'sini güncelle - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePoolApy(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['updatePoolAPY(uint64,uint64)void'] | RealPredictiveLiquidityMiningArgs['tuple']['updatePoolAPY(uint64,uint64)void']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['updatePoolAPY(uint64,uint64)void'] | undefined]>

  /**
   * Calls the optIn()void ABI method.
   *
   * Kullanıcı opt-in - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIn(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['optIn()void'] | RealPredictiveLiquidityMiningArgs['tuple']['optIn()void']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['optIn()void'] | undefined]>

  /**
   * Calls the getAllTransactions()string ABI method.
   *
   * Tüm platform transaction'larını al
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAllTransactions(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getAllTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getAllTransactions()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getAllTransactions()string'] | undefined]>

  /**
   * Calls the getTransactionSummary()string ABI method.
   *
   * Transaction özet istatistikleri
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionSummary(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionSummary()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionSummary()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getTransactionSummary()string'] | undefined]>

  /**
   * Calls the getUserTransactions()string ABI method.
   *
   * Belirli bir kullanıcının transaction'larını al - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserTransactions(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getUserTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getUserTransactions()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getUserTransactions()string'] | undefined]>

  /**
   * Calls the getPoolTransactions(uint64)string ABI method.
   *
   * Belirli bir havuzun transaction'larını al - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolTransactions(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPoolTransactions(uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPoolTransactions(uint64)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getPoolTransactions(uint64)string'] | undefined]>

  /**
   * Calls the getTransactionsByType(string)string ABI method.
   *
   * Transaction tipine göre filtrele - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionsByType(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByType(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByType(string)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getTransactionsByType(string)string'] | undefined]>

  /**
   * Calls the getTransactionsByDateRange(uint64,uint64)string ABI method.
   *
   * Tarih aralığına göre transaction'ları al - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionsByDateRange(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionsByDateRange(uint64,uint64)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionsByDateRange(uint64,uint64)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getTransactionsByDateRange(uint64,uint64)string'] | undefined]>

  /**
   * Calls the getTransactionDetails(string)string ABI method.
   *
   * Belirli bir transaction'ın detaylarını al - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionDetails(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionDetails(string)string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionDetails(string)string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getTransactionDetails(string)string'] | undefined]>

  /**
   * Calls the getTransactionAnalytics()string ABI method.
   *
   * Analytics dashboard için transaction geçmişi
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionAnalytics(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getTransactionAnalytics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getTransactionAnalytics()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getTransactionAnalytics()string'] | undefined]>

  /**
   * Calls the getPendingTransactions()string ABI method.
   *
   * Bekleyen/başarısız transaction'ları al - basit versiyon
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPendingTransactions(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getPendingTransactions()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getPendingTransactions()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getPendingTransactions()string'] | undefined]>

  /**
   * Calls the getVolumeStatistics()string ABI method.
   *
   * Volume istatistikleri
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVolumeStatistics(params?: CallParams<RealPredictiveLiquidityMiningArgs['obj']['getVolumeStatistics()string'] | RealPredictiveLiquidityMiningArgs['tuple']['getVolumeStatistics()string']>): RealPredictiveLiquidityMiningComposer<[...TReturns, RealPredictiveLiquidityMiningReturns['getVolumeStatistics()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the RealPredictiveLiquidityMining smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): RealPredictiveLiquidityMiningComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): RealPredictiveLiquidityMiningComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<RealPredictiveLiquidityMiningComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<RealPredictiveLiquidityMiningComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<RealPredictiveLiquidityMiningComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<RealPredictiveLiquidityMiningComposerResults<TReturns>>
}
export type RealPredictiveLiquidityMiningComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

