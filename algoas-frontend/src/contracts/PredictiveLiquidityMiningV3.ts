/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PredictiveLiquidityMiningV3","structs":{},"methods":[{"name":"createPool","args":[{"type":"string","name":"poolName"},{"type":"string","name":"initialAPY"},{"type":"string","name":"riskLevel"},{"type":"string","name":"minStake"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new liquidity pool with AI prediction capabilities","events":[],"recommendations":{}},{"name":"stakeInPool","args":[{"type":"string","name":"poolId"},{"type":"string","name":"amount"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Stake tokens in a specific pool","events":[],"recommendations":{}},{"name":"unstakeFromPool","args":[{"type":"string","name":"poolId"},{"type":"string","name":"amount"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unstake tokens from a specific pool","events":[],"recommendations":{}},{"name":"emergencyWithdraw","args":[{"type":"string","name":"poolId"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency withdraw (with potential penalties)","events":[],"recommendations":{}},{"name":"getUserStake","args":[{"type":"string","name":"poolId"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user's staked amount in a pool","events":[],"recommendations":{}},{"name":"updateAIPrediction","args":[{"type":"string","name":"poolId"},{"type":"string","name":"newAPY"},{"type":"string","name":"confidence"},{"type":"string","name":"timeframe"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update AI prediction for a pool (admin/oracle function)","events":[],"recommendations":{}},{"name":"submitTrainingData","args":[{"type":"string","name":"contributor"},{"type":"string","name":"dataType"},{"type":"string","name":"dataHash"},{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Submit training data for AI models (Data-Donor DAO)","events":[],"recommendations":{}},{"name":"voteOnProposal","args":[{"type":"string","name":"proposalId"},{"type":"bool","name":"vote"},{"type":"string","name":"voter"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Vote on DAO governance proposals","events":[],"recommendations":{}},{"name":"calculateUserRiskScore","args":[{"type":"string","name":"userAddress"},{"type":"string","name":"portfolioValue"},{"type":"string","name":"tradingFrequency"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Calculate user's risk score based on behavior and portfolio","events":[],"recommendations":{}},{"name":"claimRewards","args":[{"type":"string","name":"userAddress"},{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Claim rewards with AI-enhanced calculations","events":[],"recommendations":{}},{"name":"getPoolStats","args":[{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get pool statistics with AI predictions","events":[],"recommendations":{}},{"name":"emergencyPause","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency pause mechanism for security","events":[],"recommendations":{}},{"name":"getUserPortfolio","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user portfolio summary","events":[],"recommendations":{}},{"name":"getPlatformAnalytics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get platform analytics","events":[],"recommendations":{}},{"name":"getAllTransactions","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions on the platform","events":[],"recommendations":{}},{"name":"getTransactionSummary","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transaction summary statistics","events":[],"recommendations":{}},{"name":"getUserTransactions","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions for a specific user","events":[],"recommendations":{}},{"name":"getPoolTransactions","args":[{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions for a specific pool","events":[],"recommendations":{}},{"name":"getTransactionsByType","args":[{"type":"string","name":"txType"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transactions filtered by type","events":[],"recommendations":{}},{"name":"getTransactionsByDateRange","args":[{"type":"string","name":"startDate"},{"type":"string","name":"endDate"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transactions within a date range","events":[],"recommendations":{}},{"name":"getTransactionDetails","args":[{"type":"string","name":"txId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get detailed information about a specific transaction","events":[],"recommendations":{}},{"name":"getTransactionAnalytics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transaction history for analytics dashboard","events":[],"recommendations":{}},{"name":"getPendingTransactions","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get pending/failed transactions for user","events":[],"recommendations":{}},{"name":"getVolumeStatistics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transaction volume statistics","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Predictive Liquidity Mining Platform Smart Contract v3.0\nFeatures: AI-powered predictions, dynamic rewards, risk scoring, Data-Donor DAO\nNEW: Transaction viewing functions, Complete analytics, Enhanced reporting","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[230,449,479,634,664,700,730,760,790,937,1072,1242,1272,1348,1378,1414,1456,1497,1545,1593,1629,1665,1707,1749],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1802],"errorMessage":"can only call when creating"},{"pc":[233,452,482,637,667,703,733,763,793,940,1075,1245,1275,1351,1381,1417,1459,1500,1548,1596,1632,1668,1710,1752],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmBAQVH3x1BVBvb2wgCSBieSB1c2VyIBB7InVzZXJBZGRyZXNzIjoiMRtBBtCCGATDuZIqBJbOq6kEWkG3oQTnGb29BKkLdy8E2EIfHQRsZBJIBDDGH+8EkOzJDgRjt0QlBN36nygEDQUdegT7C05jBMGJNPsEOt/t5QTcC8x2BKt3FoMEz+7FYwRfcwEiBNt6EUYEhZyCygThOxdJBGy3C/MEjJiyNzYaAI4YBfEFxwWdBXkFVQUlBPUEzASiBH4EYAQUA/YDTALFAjICFAH2AdgBtAGWAPsA3QACI0MxGRREMRhEgM4BFR98dQDIeyJ0b2RheSI6eyJ0b3RhbFZvbHVtZSI6IjIxNTAwMDAiLCJ0cmFuc2FjdGlvbnMiOiI4OSIsImF2ZXJhZ2VTaXplIjoiMjQxNTcifSwidGhpc1dlZWsiOnsidG90YWxWb2x1bWUiOiIxMjc1MDAwMCJ9LCJ0aGlzTW9udGgiOnsidG90YWxWb2x1bWUiOiI0NTI1MDAwMCJ9LCJkeW5hbWljQ2FsY3VsYXRpb24iOnRydWUsInJlYWxUaW1lRGF0YSI6dHJ1ZX2wIkMxGRREMRhENhoBVwIAiAwFSRUWVwYCTFAoTFCwIkMxGRREMRhEgI4BFR98dQCIeyJkYWlseVZvbHVtZSI6Ijg1MDAwMCIsInRvZGF5VHJhbnNhY3Rpb25zIjoiMTI1IiwibmV3VXNlcnMyNGgiOiIzNSIsImFjdGl2ZVVzZXJzMjRoIjoiNDU2IiwiZHluYW1pY0FuYWx5dGljcyI6dHJ1ZSwicmVhbFRpbWVEYXRhIjp0cnVlfbAiQzEZFEQxGEQ2GgFXAgCICtRJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCICiNJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgCICXtJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgCICOdJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgCICFJJFRZXBgJMUChMULAiQzEZFEQxGESAhgEVH3x1AIB7InRvdGFsVHJhbnNhY3Rpb25zIjoiMjE1MCIsInRvdGFsU3Rha2VkIjoiMjUwMDAwMDAiLCJhY3RpdmVUcmFuc2FjdGlvbnMyNGgiOiI4OSIsImR5bmFtaWNDYWxjdWxhdGlvbiI6dHJ1ZSwicmVhbFRpbWVEYXRhIjp0cnVlfbAiQzEZFEQxGESAexUffHUAdXsidG90YWxUcmFuc2FjdGlvbnMiOiIxNTAwIiwidG90YWxWb2x1bWUiOiIxNTAwMDAwMCIsImR5bmFtaWNEYXRhIjp0cnVlLCJyZWFsVGltZUNhbGN1bGF0aW9uIjp0cnVlLCJzdGF0dXMiOiJhY3RpdmUifbAiQzEZFEQxGESAnQEVH3x1AJdQbGF0Zm9ybSBBbmFseXRpY3M6IFRvdGFsIHBvb2xzOiA0NywgQWN0aXZlIG1pbmVyczogMSwyMzQsIFRvdGFsIHJld2FyZHMgZGlzdHJpYnV0ZWQ6IDEyNSwwMDAgdG9rZW5zLCBBdmVyYWdlIEFQWTogMTIuNSUsIEFJIHByZWRpY3Rpb24gYWNjdXJhY3k6IDg3LjMlsCJDMRkURDEYRDYaAVcCAIgGDkkVFlcGAkxQKExQsCJDMRkURDEYRIBAFR98dQA6UGxhdGZvcm0gcGF1c2VkIGZvciBtYWludGVuYW5jZS4gQWxsIG9wZXJhdGlvbnMgc3VzcGVuZGVkLrAiQzEZFEQxGEQ2GgFXAgCIBUVJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIBLlJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIBDJJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgIjUzYaA1cCAIgDw0kVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgC1kkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgCWEkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCAIgB7EkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCAIgBc0kVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCAIgBCUkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCAIgAo0kVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgAGUkVFlcGAkxQKExQsCJDMRlA+doxGBREIkOKBAEpi/xQgA4gY3JlYXRlZCB3aXRoIFCL/VCAEyUgQVBZLCByaXNrIGxldmVsOiBQi/5QgBEsIG1pbmltdW0gc3Rha2U6IFCL/1CACyBtaWNyb0FsZ29zUImKAwGAFFN1Y2Nlc3NmdWxseSBzdGFrZWQgi/5QgBQgbWljcm9BbGdvcyBpbiBwb29sIFCL/VAqUIv/UImKAwGAFlN1Y2Nlc3NmdWxseSB1bnN0YWtlZCCL/lCAFiBtaWNyb0FsZ29zIGZyb20gcG9vbCBQi/1QKlCL/1CJigIBgCJFbWVyZ2VuY3kgd2l0aGRyYXdhbCBleGVjdXRlZCBmb3Igi/9QgAsgZnJvbSBwb29sIFCL/lCAFi4gUGVuYWx0aWVzIG1heSBhcHBseS5QiYoCAYAFVXNlciCL/1CAGyBoYXMgc3Rha2VkIGFtb3VudCBpbiBwb29sIFCL/lCAFjogMSw1MDAsMDAwIG1pY3JvQWxnb3NQiYoEASmL/FCAGCBBSSBwcmVkaWN0aW9uIHVwZGF0ZWQ6IFCL/VCACyUgQVBZIHdpdGggUIv+UIARJSBjb25maWRlbmNlIGZvciBQi/9QiYoEAYv9gAttYXJrZXRfZGF0YRJBAGWAAzEwMIASRGF0YSBzdWJtaXR0ZWQgYnkgi/xQgAogZm9yIHBvb2wgUIv/UIANLiBEYXRhIGhhc2g6IFCL/lCAFS4gR292ZXJuYW5jZSByZXdhcmQ6IFBMUIAIIHRva2Vucy5QiYv9gA5saXF1aWRpdHlfZGF0YRJBAAiAAzE1MEL/gov9gA11c2VyX2JlaGF2aW9yEkEACIADMjAwQv9lgAI1MEL/XooDAYv+QQAygANGT1KAFlZvdGUgY2FzdCBvbiBwcm9wb3NhbCCL/VCABCBieSBQi/9QgAI6IFBMUImAB0FHQUlOU1RC/8eKAwGAD1Jpc2sgc2NvcmUgZm9yIIv9UIAiOiA2NS8xMDAgYmFzZWQgb24gcG9ydGZvbGlvIHZhbHVlIFCL/lCAFyBhbmQgdHJhZGluZyBmcmVxdWVuY3kgUIv/UImKAgGL/oAJIGNsYWltZWQgUIADMTIwUIASIHRva2VucyBmcm9tIHBvb2wgUIv/UIA1LiBSZXdhcmRzIGNhbGN1bGF0ZWQgdXNpbmcgQUktcG93ZXJlZCBkeW5hbWljIHN5c3RlbS5QiYoBASmL/1CAVDogQ3VycmVudCBBUFkgMTUuNSUsIFByZWRpY3RlZCBBUFkgMTguMiUgKDg3JSBjb25maWRlbmNlKSwgVFZMOiAxLDUwMCwwMDAgbWljcm9BbGdvc1CJigEBgA5Qb3J0Zm9saW8gZm9yIIv/UIBIOiBBY3RpdmUgcG9zaXRpb25zIHRyYWNrZWQsIHJld2FyZHMgYXZhaWxhYmxlLCByaXNrIGFzc2Vzc21lbnQgY29tcGxldGVkUImKAQEri/9QgGwiLCJ0cmFuc2FjdGlvbkNvdW50IjoiMTUiLCJsYXN0VHJhbnNhY3Rpb24iOnsiYW1vdW50IjoiMjUwMCJ9LCJkeW5hbWljRGF0YSI6dHJ1ZSwicmVhbFRpbWVDYWxjdWxhdGlvbiI6dHJ1ZX1QiYoBAYALeyJwb29sSWQiOiKL/1CAXyIsInRvdGFsVm9sdW1lIjoiNzUwMDAwIiwidHJhbnNhY3Rpb25Db3VudCI6IjQ1IiwiZHluYW1pY0NhbGN1bGF0aW9uIjp0cnVlLCJyZWFsVGltZURhdGEiOnRydWV9UImKAQGAFHsidHJhbnNhY3Rpb25UeXBlIjoii/9QgGoiLCJjb3VudCI6IjI1IiwidG90YWxWb2x1bWUiOiI2NTAwMDAiLCJhdmVyYWdlU2l6ZSI6IjI2MDAwIiwiZHluYW1pY0NhbGN1bGF0aW9uIjp0cnVlLCJyZWFsVGltZURhdGEiOnRydWV9UImKAgGADnsic3RhcnREYXRlIjoii/5QgA0iLCJlbmREYXRlIjoiUIv/UIBgIiwidHJhbnNhY3Rpb25Db3VudCI6IjY3IiwidG90YWxWb2x1bWUiOiIxMjUwMDAwIiwiZHluYW1pY0NhbGN1bGF0aW9uIjp0cnVlLCJyZWFsVGltZURhdGEiOnRydWV9UImKAQGACXsidHhJZCI6Iov/UIBjIiwiYW1vdW50IjoiMzUwMCIsImdhc1VzZWQiOiIwLjAwMSIsInJpc2tTY29yZSI6Ijc1IiwiZHluYW1pY0RhdGEiOnRydWUsInJlYWxUaW1lQ2FsY3VsYXRpb24iOnRydWV9UImKAQEri/9QgGUiLCJwZW5kaW5nQ291bnQiOiIyIiwibGF0ZXN0UGVuZGluZyI6eyJhbW91bnQiOiIxMjUwIn0sImR5bmFtaWNEYXRhIjp0cnVlLCJyZWFsVGltZUNhbGN1bGF0aW9uIjp0cnVlfVCJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PredictiveLiquidityMiningV3 contract
 */
export type PredictiveLiquidityMiningV3Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createPool(string,string,string,string)string': {
      poolName: string
      initialApy: string
      riskLevel: string
      minStake: string
    }
    'stakeInPool(string,string,string)string': {
      poolId: string
      amount: string
      userAddress: string
    }
    'unstakeFromPool(string,string,string)string': {
      poolId: string
      amount: string
      userAddress: string
    }
    'emergencyWithdraw(string,string)string': {
      poolId: string
      userAddress: string
    }
    'getUserStake(string,string)string': {
      poolId: string
      userAddress: string
    }
    'updateAIPrediction(string,string,string,string)string': {
      poolId: string
      newApy: string
      confidence: string
      timeframe: string
    }
    'submitTrainingData(string,string,string,string)string': {
      contributor: string
      dataType: string
      dataHash: string
      poolId: string
    }
    'voteOnProposal(string,bool,string)string': {
      proposalId: string
      vote: boolean
      voter: string
    }
    'calculateUserRiskScore(string,string,string)string': {
      userAddress: string
      portfolioValue: string
      tradingFrequency: string
    }
    'claimRewards(string,string)string': {
      userAddress: string
      poolId: string
    }
    'getPoolStats(string)string': {
      poolId: string
    }
    'emergencyPause()string': Record<string, never>
    'getUserPortfolio(string)string': {
      userAddress: string
    }
    'getPlatformAnalytics()string': Record<string, never>
    'getAllTransactions()string': Record<string, never>
    'getTransactionSummary()string': Record<string, never>
    'getUserTransactions(string)string': {
      userAddress: string
    }
    'getPoolTransactions(string)string': {
      poolId: string
    }
    'getTransactionsByType(string)string': {
      txType: string
    }
    'getTransactionsByDateRange(string,string)string': {
      startDate: string
      endDate: string
    }
    'getTransactionDetails(string)string': {
      txId: string
    }
    'getTransactionAnalytics()string': Record<string, never>
    'getPendingTransactions(string)string': {
      userAddress: string
    }
    'getVolumeStatistics()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createPool(string,string,string,string)string': [poolName: string, initialApy: string, riskLevel: string, minStake: string]
    'stakeInPool(string,string,string)string': [poolId: string, amount: string, userAddress: string]
    'unstakeFromPool(string,string,string)string': [poolId: string, amount: string, userAddress: string]
    'emergencyWithdraw(string,string)string': [poolId: string, userAddress: string]
    'getUserStake(string,string)string': [poolId: string, userAddress: string]
    'updateAIPrediction(string,string,string,string)string': [poolId: string, newApy: string, confidence: string, timeframe: string]
    'submitTrainingData(string,string,string,string)string': [contributor: string, dataType: string, dataHash: string, poolId: string]
    'voteOnProposal(string,bool,string)string': [proposalId: string, vote: boolean, voter: string]
    'calculateUserRiskScore(string,string,string)string': [userAddress: string, portfolioValue: string, tradingFrequency: string]
    'claimRewards(string,string)string': [userAddress: string, poolId: string]
    'getPoolStats(string)string': [poolId: string]
    'emergencyPause()string': []
    'getUserPortfolio(string)string': [userAddress: string]
    'getPlatformAnalytics()string': []
    'getAllTransactions()string': []
    'getTransactionSummary()string': []
    'getUserTransactions(string)string': [userAddress: string]
    'getPoolTransactions(string)string': [poolId: string]
    'getTransactionsByType(string)string': [txType: string]
    'getTransactionsByDateRange(string,string)string': [startDate: string, endDate: string]
    'getTransactionDetails(string)string': [txId: string]
    'getTransactionAnalytics()string': []
    'getPendingTransactions(string)string': [userAddress: string]
    'getVolumeStatistics()string': []
  }
}

/**
 * The return type for each method
 */
export type PredictiveLiquidityMiningV3Returns = {
  'createPool(string,string,string,string)string': string
  'stakeInPool(string,string,string)string': string
  'unstakeFromPool(string,string,string)string': string
  'emergencyWithdraw(string,string)string': string
  'getUserStake(string,string)string': string
  'updateAIPrediction(string,string,string,string)string': string
  'submitTrainingData(string,string,string,string)string': string
  'voteOnProposal(string,bool,string)string': string
  'calculateUserRiskScore(string,string,string)string': string
  'claimRewards(string,string)string': string
  'getPoolStats(string)string': string
  'emergencyPause()string': string
  'getUserPortfolio(string)string': string
  'getPlatformAnalytics()string': string
  'getAllTransactions()string': string
  'getTransactionSummary()string': string
  'getUserTransactions(string)string': string
  'getPoolTransactions(string)string': string
  'getTransactionsByType(string)string': string
  'getTransactionsByDateRange(string,string)string': string
  'getTransactionDetails(string)string': string
  'getTransactionAnalytics()string': string
  'getPendingTransactions(string)string': string
  'getVolumeStatistics()string': string
}

/**
 * Defines the types of available calls and state of the PredictiveLiquidityMiningV3 smart contract.
 */
export type PredictiveLiquidityMiningV3Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createPool(string,string,string,string)string' | 'createPool', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['createPool(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['createPool(string,string,string,string)string']
      returns: PredictiveLiquidityMiningV3Returns['createPool(string,string,string,string)string']
    }>
    & Record<'stakeInPool(string,string,string)string' | 'stakeInPool', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['stakeInPool(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['stakeInPool(string,string,string)string']
      returns: PredictiveLiquidityMiningV3Returns['stakeInPool(string,string,string)string']
    }>
    & Record<'unstakeFromPool(string,string,string)string' | 'unstakeFromPool', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['unstakeFromPool(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['unstakeFromPool(string,string,string)string']
      returns: PredictiveLiquidityMiningV3Returns['unstakeFromPool(string,string,string)string']
    }>
    & Record<'emergencyWithdraw(string,string)string' | 'emergencyWithdraw', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['emergencyWithdraw(string,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['emergencyWithdraw(string,string)string']
      returns: PredictiveLiquidityMiningV3Returns['emergencyWithdraw(string,string)string']
    }>
    & Record<'getUserStake(string,string)string' | 'getUserStake', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getUserStake(string,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getUserStake(string,string)string']
      returns: PredictiveLiquidityMiningV3Returns['getUserStake(string,string)string']
    }>
    & Record<'updateAIPrediction(string,string,string,string)string' | 'updateAIPrediction', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['updateAIPrediction(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['updateAIPrediction(string,string,string,string)string']
      returns: PredictiveLiquidityMiningV3Returns['updateAIPrediction(string,string,string,string)string']
    }>
    & Record<'submitTrainingData(string,string,string,string)string' | 'submitTrainingData', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['submitTrainingData(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['submitTrainingData(string,string,string,string)string']
      returns: PredictiveLiquidityMiningV3Returns['submitTrainingData(string,string,string,string)string']
    }>
    & Record<'voteOnProposal(string,bool,string)string' | 'voteOnProposal', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['voteOnProposal(string,bool,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['voteOnProposal(string,bool,string)string']
      returns: PredictiveLiquidityMiningV3Returns['voteOnProposal(string,bool,string)string']
    }>
    & Record<'calculateUserRiskScore(string,string,string)string' | 'calculateUserRiskScore', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['calculateUserRiskScore(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['calculateUserRiskScore(string,string,string)string']
      returns: PredictiveLiquidityMiningV3Returns['calculateUserRiskScore(string,string,string)string']
    }>
    & Record<'claimRewards(string,string)string' | 'claimRewards', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['claimRewards(string,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['claimRewards(string,string)string']
      returns: PredictiveLiquidityMiningV3Returns['claimRewards(string,string)string']
    }>
    & Record<'getPoolStats(string)string' | 'getPoolStats', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getPoolStats(string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getPoolStats(string)string']
      returns: PredictiveLiquidityMiningV3Returns['getPoolStats(string)string']
    }>
    & Record<'emergencyPause()string' | 'emergencyPause', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['emergencyPause()string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['emergencyPause()string']
      returns: PredictiveLiquidityMiningV3Returns['emergencyPause()string']
    }>
    & Record<'getUserPortfolio(string)string' | 'getUserPortfolio', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getUserPortfolio(string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getUserPortfolio(string)string']
      returns: PredictiveLiquidityMiningV3Returns['getUserPortfolio(string)string']
    }>
    & Record<'getPlatformAnalytics()string' | 'getPlatformAnalytics', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getPlatformAnalytics()string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getPlatformAnalytics()string']
      returns: PredictiveLiquidityMiningV3Returns['getPlatformAnalytics()string']
    }>
    & Record<'getAllTransactions()string' | 'getAllTransactions', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getAllTransactions()string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getAllTransactions()string']
      returns: PredictiveLiquidityMiningV3Returns['getAllTransactions()string']
    }>
    & Record<'getTransactionSummary()string' | 'getTransactionSummary', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getTransactionSummary()string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getTransactionSummary()string']
      returns: PredictiveLiquidityMiningV3Returns['getTransactionSummary()string']
    }>
    & Record<'getUserTransactions(string)string' | 'getUserTransactions', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getUserTransactions(string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getUserTransactions(string)string']
      returns: PredictiveLiquidityMiningV3Returns['getUserTransactions(string)string']
    }>
    & Record<'getPoolTransactions(string)string' | 'getPoolTransactions', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getPoolTransactions(string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getPoolTransactions(string)string']
      returns: PredictiveLiquidityMiningV3Returns['getPoolTransactions(string)string']
    }>
    & Record<'getTransactionsByType(string)string' | 'getTransactionsByType', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getTransactionsByType(string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByType(string)string']
      returns: PredictiveLiquidityMiningV3Returns['getTransactionsByType(string)string']
    }>
    & Record<'getTransactionsByDateRange(string,string)string' | 'getTransactionsByDateRange', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getTransactionsByDateRange(string,string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByDateRange(string,string)string']
      returns: PredictiveLiquidityMiningV3Returns['getTransactionsByDateRange(string,string)string']
    }>
    & Record<'getTransactionDetails(string)string' | 'getTransactionDetails', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getTransactionDetails(string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getTransactionDetails(string)string']
      returns: PredictiveLiquidityMiningV3Returns['getTransactionDetails(string)string']
    }>
    & Record<'getTransactionAnalytics()string' | 'getTransactionAnalytics', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getTransactionAnalytics()string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getTransactionAnalytics()string']
      returns: PredictiveLiquidityMiningV3Returns['getTransactionAnalytics()string']
    }>
    & Record<'getPendingTransactions(string)string' | 'getPendingTransactions', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getPendingTransactions(string)string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getPendingTransactions(string)string']
      returns: PredictiveLiquidityMiningV3Returns['getPendingTransactions(string)string']
    }>
    & Record<'getVolumeStatistics()string' | 'getVolumeStatistics', {
      argsObj: PredictiveLiquidityMiningV3Args['obj']['getVolumeStatistics()string']
      argsTuple: PredictiveLiquidityMiningV3Args['tuple']['getVolumeStatistics()string']
      returns: PredictiveLiquidityMiningV3Returns['getVolumeStatistics()string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type PredictiveLiquidityMiningV3Signatures = keyof PredictiveLiquidityMiningV3Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PredictiveLiquidityMiningV3NonVoidMethodSignatures = keyof PredictiveLiquidityMiningV3Types['methods'] extends infer T ? T extends keyof PredictiveLiquidityMiningV3Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PredictiveLiquidityMiningV3 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PredictiveLiquidityMiningV3Signatures> = PredictiveLiquidityMiningV3Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PredictiveLiquidityMiningV3 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PredictiveLiquidityMiningV3Signatures> = PredictiveLiquidityMiningV3Types['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type PredictiveLiquidityMiningV3CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PredictiveLiquidityMiningV3DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PredictiveLiquidityMiningV3CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PredictiveLiquidityMiningV3 smart contract
 */
export abstract class PredictiveLiquidityMiningV3ParamsFactory {
  /**
   * Constructs a no op call for the createPool(string,string,string,string)string ABI method
   *
   * Create a new liquidity pool with AI prediction capabilities
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['createPool(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolName, params.args.initialApy, params.args.riskLevel, params.args.minStake],
    }
  }
  /**
   * Constructs a no op call for the stakeInPool(string,string,string)string ABI method
   *
   * Stake tokens in a specific pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stakeInPool(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['stakeInPool(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stakeInPool(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the unstakeFromPool(string,string,string)string ABI method
   *
   * Unstake tokens from a specific pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unstakeFromPool(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['unstakeFromPool(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unstakeFromPool(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the emergencyWithdraw(string,string)string ABI method
   *
   * Emergency withdraw (with potential penalties)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdraw(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyWithdraw(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyWithdraw(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getUserStake(string,string)string ABI method
   *
   * Get user's staked amount in a pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStake(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserStake(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStake(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the updateAIPrediction(string,string,string,string)string ABI method
   *
   * Update AI prediction for a pool (admin/oracle function)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAiPrediction(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['updateAIPrediction(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAIPrediction(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.newApy, params.args.confidence, params.args.timeframe],
    }
  }
  /**
   * Constructs a no op call for the submitTrainingData(string,string,string,string)string ABI method
   *
   * Submit training data for AI models (Data-Donor DAO)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitTrainingData(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['submitTrainingData(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submitTrainingData(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contributor, params.args.dataType, params.args.dataHash, params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the voteOnProposal(string,bool,string)string ABI method
   *
   * Vote on DAO governance proposals
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteOnProposal(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['voteOnProposal(string,bool,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'voteOnProposal(string,bool,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.vote, params.args.voter],
    }
  }
  /**
   * Constructs a no op call for the calculateUserRiskScore(string,string,string)string ABI method
   *
   * Calculate user's risk score based on behavior and portfolio
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateUserRiskScore(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['calculateUserRiskScore(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateUserRiskScore(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.portfolioValue, params.args.tradingFrequency],
    }
  }
  /**
   * Constructs a no op call for the claimRewards(string,string)string ABI method
   *
   * Claim rewards with AI-enhanced calculations
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRewards(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['claimRewards(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimRewards(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getPoolStats(string)string ABI method
   *
   * Get pool statistics with AI predictions
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolStats(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolStats(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolStats(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the emergencyPause()string ABI method
   *
   * Emergency pause mechanism for security
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyPause(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyPause()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyPause()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserPortfolio(string)string ABI method
   *
   * Get user portfolio summary
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserPortfolio(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserPortfolio(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserPortfolio(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getPlatformAnalytics()string ABI method
   *
   * Get platform analytics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformAnalytics(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getPlatformAnalytics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlatformAnalytics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getAllTransactions()string ABI method
   *
   * Get all transactions on the platform
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAllTransactions(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV3Args['tuple']['getAllTransactions()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAllTransactions()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTransactionSummary()string ABI method
   *
   * Get transaction summary statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionSummary(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionSummary()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionSummary()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserTransactions(string)string ABI method
   *
   * Get all transactions for a specific user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserTransactions(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserTransactions(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserTransactions(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getPoolTransactions(string)string ABI method
   *
   * Get all transactions for a specific pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolTransactions(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolTransactions(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolTransactions(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getTransactionsByType(string)string ABI method
   *
   * Get transactions filtered by type
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionsByType(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByType(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionsByType(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txType],
    }
  }
  /**
   * Constructs a no op call for the getTransactionsByDateRange(string,string)string ABI method
   *
   * Get transactions within a date range
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionsByDateRange(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByDateRange(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionsByDateRange(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.startDate, params.args.endDate],
    }
  }
  /**
   * Constructs a no op call for the getTransactionDetails(string)string ABI method
   *
   * Get detailed information about a specific transaction
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionDetails(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionDetails(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionDetails(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txId],
    }
  }
  /**
   * Constructs a no op call for the getTransactionAnalytics()string ABI method
   *
   * Get transaction history for analytics dashboard
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionAnalytics(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionAnalytics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionAnalytics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPendingTransactions(string)string ABI method
   *
   * Get pending/failed transactions for user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPendingTransactions(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPendingTransactions(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPendingTransactions(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getVolumeStatistics()string ABI method
   *
   * Get transaction volume statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVolumeStatistics(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getVolumeStatistics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getVolumeStatistics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PredictiveLiquidityMiningV3 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PredictiveLiquidityMiningV3Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PredictiveLiquidityMiningV3Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PredictiveLiquidityMiningV3Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PredictiveLiquidityMiningV3Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PredictiveLiquidityMiningV3 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PredictiveLiquidityMiningV3DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PredictiveLiquidityMiningV3Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMiningV3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMiningV3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMiningV3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PredictiveLiquidityMiningV3Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PredictiveLiquidityMiningV3 smart contract
 */
export class PredictiveLiquidityMiningV3Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PredictiveLiquidityMiningV3Client`
   *
   * @param appClient An `AppClient` instance which has been created with the PredictiveLiquidityMiningV3 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PredictiveLiquidityMiningV3Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PredictiveLiquidityMiningV3NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PredictiveLiquidityMiningV3Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PredictiveLiquidityMiningV3Client> {
    return new PredictiveLiquidityMiningV3Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PredictiveLiquidityMiningV3Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PredictiveLiquidityMiningV3Client> {
    return new PredictiveLiquidityMiningV3Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stakeInPool: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unstakeFromPool: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.unstakeFromPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `emergencyWithdraw(string,string)string` ABI method.
     *
     * Emergency withdraw (with potential penalties)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdraw: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyWithdraw(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getUserStake(string,string)string` ABI method.
     *
     * Get user's staked amount in a pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStake: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserStake(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAiPrediction: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.updateAiPrediction(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitTrainingData: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.submitTrainingData(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteOnProposal: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.voteOnProposal(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateUserRiskScore: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.calculateUserRiskScore(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRewards: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolStats: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyPause: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserPortfolio: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getUserPortfolio(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformAnalytics: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getPlatformAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAllTransactions: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV3Args['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getAllTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionSummary: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionSummary(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getUserTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserTransactions: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getUserTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolTransactions: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getPoolTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Get transactions filtered by type
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionsByType: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionsByType(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionsByDateRange(string,string)string` ABI method.
     *
     * Get transactions within a date range
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionsByDateRange: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByDateRange(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionsByDateRange(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Get detailed information about a specific transaction
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionDetails: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionDetails(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Get transaction history for analytics dashboard
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionAnalytics: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPendingTransactions(string)string` ABI method.
     *
     * Get pending/failed transactions for user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPendingTransactions: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPendingTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getPendingTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get transaction volume statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVolumeStatistics: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV3ParamsFactory.getVolumeStatistics(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stakeInPool: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unstakeFromPool: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.unstakeFromPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `emergencyWithdraw(string,string)string` ABI method.
     *
     * Emergency withdraw (with potential penalties)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdraw: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyWithdraw(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getUserStake(string,string)string` ABI method.
     *
     * Get user's staked amount in a pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStake: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserStake(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAiPrediction: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.updateAiPrediction(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitTrainingData: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.submitTrainingData(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteOnProposal: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.voteOnProposal(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateUserRiskScore: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.calculateUserRiskScore(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRewards: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolStats: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyPause: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserPortfolio: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getUserPortfolio(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformAnalytics: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getPlatformAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAllTransactions: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV3Args['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getAllTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionSummary: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionSummary(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getUserTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserTransactions: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getUserTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolTransactions: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getPoolTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Get transactions filtered by type
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionsByType: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionsByType(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionsByDateRange(string,string)string` ABI method.
     *
     * Get transactions within a date range
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionsByDateRange: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByDateRange(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionsByDateRange(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Get detailed information about a specific transaction
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionDetails: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionDetails(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Get transaction history for analytics dashboard
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionAnalytics: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPendingTransactions(string)string` ABI method.
     *
     * Get pending/failed transactions for user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPendingTransactions: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPendingTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getPendingTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get transaction volume statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVolumeStatistics: (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV3ParamsFactory.getVolumeStatistics(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['createPool(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['createPool(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stakeInPool: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['stakeInPool(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.stakeInPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['stakeInPool(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unstakeFromPool: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['unstakeFromPool(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.unstakeFromPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['unstakeFromPool(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `emergencyWithdraw(string,string)string` ABI method.
     *
     * Emergency withdraw (with potential penalties)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdraw: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyWithdraw(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.emergencyWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['emergencyWithdraw(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getUserStake(string,string)string` ABI method.
     *
     * Get user's staked amount in a pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStake: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserStake(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getUserStake(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getUserStake(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAiPrediction: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['updateAIPrediction(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.updateAiPrediction(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['updateAIPrediction(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitTrainingData: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['submitTrainingData(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.submitTrainingData(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['submitTrainingData(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteOnProposal: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['voteOnProposal(string,bool,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.voteOnProposal(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['voteOnProposal(string,bool,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateUserRiskScore: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['calculateUserRiskScore(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.calculateUserRiskScore(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['calculateUserRiskScore(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRewards: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['claimRewards(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.claimRewards(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['claimRewards(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolStats: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolStats(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getPoolStats(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getPoolStats(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyPause: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyPause()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.emergencyPause(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['emergencyPause()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserPortfolio: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserPortfolio(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getUserPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getUserPortfolio(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformAnalytics: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getPlatformAnalytics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getPlatformAnalytics(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getPlatformAnalytics()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAllTransactions: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV3Args['tuple']['getAllTransactions()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getAllTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getAllTransactions()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionSummary: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionSummary()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionSummary(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getTransactionSummary()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getUserTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserTransactions: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserTransactions(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getUserTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getUserTransactions(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolTransactions: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolTransactions(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getPoolTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getPoolTransactions(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Get transactions filtered by type
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionsByType: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByType(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionsByType(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getTransactionsByType(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionsByDateRange(string,string)string` ABI method.
     *
     * Get transactions within a date range
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionsByDateRange: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByDateRange(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionsByDateRange(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getTransactionsByDateRange(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Get detailed information about a specific transaction
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionDetails: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionDetails(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionDetails(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getTransactionDetails(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Get transaction history for analytics dashboard
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionAnalytics: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionAnalytics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getTransactionAnalytics(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getTransactionAnalytics()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getPendingTransactions(string)string` ABI method.
     *
     * Get pending/failed transactions for user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPendingTransactions: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPendingTransactions(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getPendingTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getPendingTransactions(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV3 smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get transaction volume statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVolumeStatistics: async (params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getVolumeStatistics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV3ParamsFactory.getVolumeStatistics(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV3Returns['getVolumeStatistics()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PredictiveLiquidityMiningV3Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PredictiveLiquidityMiningV3 app
   */
  state = {
  }

  public newGroup(): PredictiveLiquidityMiningV3Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool(string,string,string,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      createPool(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('createPool(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a stakeInPool(string,string,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      stakeInPool(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stakeInPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('stakeInPool(string,string,string)string', v))
        return this
      },
      /**
       * Add a unstakeFromPool(string,string,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      unstakeFromPool(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unstakeFromPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('unstakeFromPool(string,string,string)string', v))
        return this
      },
      /**
       * Add a emergencyWithdraw(string,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      emergencyWithdraw(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyWithdraw(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdraw(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergencyWithdraw(string,string)string', v))
        return this
      },
      /**
       * Add a getUserStake(string,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      getUserStake(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserStake(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStake(string,string)string', v))
        return this
      },
      /**
       * Add a updateAIPrediction(string,string,string,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      updateAiPrediction(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAiPrediction(params)))
        resultMappers.push((v) => client.decodeReturnValue('updateAIPrediction(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a submitTrainingData(string,string,string,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      submitTrainingData(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitTrainingData(params)))
        resultMappers.push((v) => client.decodeReturnValue('submitTrainingData(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a voteOnProposal(string,bool,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      voteOnProposal(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteOnProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('voteOnProposal(string,bool,string)string', v))
        return this
      },
      /**
       * Add a calculateUserRiskScore(string,string,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      calculateUserRiskScore(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateUserRiskScore(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateUserRiskScore(string,string,string)string', v))
        return this
      },
      /**
       * Add a claimRewards(string,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      claimRewards(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('claimRewards(string,string)string', v))
        return this
      },
      /**
       * Add a getPoolStats(string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      getPoolStats(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolStats(string)string', v))
        return this
      },
      /**
       * Add a emergencyPause()string method call against the PredictiveLiquidityMiningV3 contract
       */
      emergencyPause(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyPause(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergencyPause()string', v))
        return this
      },
      /**
       * Add a getUserPortfolio(string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      getUserPortfolio(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserPortfolio(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserPortfolio(string)string', v))
        return this
      },
      /**
       * Add a getPlatformAnalytics()string method call against the PredictiveLiquidityMiningV3 contract
       */
      getPlatformAnalytics(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformAnalytics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlatformAnalytics()string', v))
        return this
      },
      /**
       * Add a getAllTransactions()string method call against the PredictiveLiquidityMiningV3 contract
       */
      getAllTransactions(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV3Args['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAllTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAllTransactions()string', v))
        return this
      },
      /**
       * Add a getTransactionSummary()string method call against the PredictiveLiquidityMiningV3 contract
       */
      getTransactionSummary(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionSummary(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionSummary()string', v))
        return this
      },
      /**
       * Add a getUserTransactions(string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      getUserTransactions(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserTransactions(string)string', v))
        return this
      },
      /**
       * Add a getPoolTransactions(string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      getPoolTransactions(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolTransactions(string)string', v))
        return this
      },
      /**
       * Add a getTransactionsByType(string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      getTransactionsByType(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionsByType(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionsByType(string)string', v))
        return this
      },
      /**
       * Add a getTransactionsByDateRange(string,string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      getTransactionsByDateRange(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByDateRange(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionsByDateRange(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionsByDateRange(string,string)string', v))
        return this
      },
      /**
       * Add a getTransactionDetails(string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      getTransactionDetails(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionDetails(string)string', v))
        return this
      },
      /**
       * Add a getTransactionAnalytics()string method call against the PredictiveLiquidityMiningV3 contract
       */
      getTransactionAnalytics(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionAnalytics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionAnalytics()string', v))
        return this
      },
      /**
       * Add a getPendingTransactions(string)string method call against the PredictiveLiquidityMiningV3 contract
       */
      getPendingTransactions(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPendingTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPendingTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPendingTransactions(string)string', v))
        return this
      },
      /**
       * Add a getVolumeStatistics()string method call against the PredictiveLiquidityMiningV3 contract
       */
      getVolumeStatistics(params: CallParams<PredictiveLiquidityMiningV3Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVolumeStatistics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getVolumeStatistics()string', v))
        return this
      },
      /**
       * Add a clear state call to the PredictiveLiquidityMiningV3 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PredictiveLiquidityMiningV3Composer
  }
}
export type PredictiveLiquidityMiningV3Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool(string,string,string,string)string ABI method.
   *
   * Create a new liquidity pool with AI prediction capabilities
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['createPool(string,string,string,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['createPool(string,string,string,string)string'] | undefined]>

  /**
   * Calls the stakeInPool(string,string,string)string ABI method.
   *
   * Stake tokens in a specific pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeInPool(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['stakeInPool(string,string,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['stakeInPool(string,string,string)string'] | undefined]>

  /**
   * Calls the unstakeFromPool(string,string,string)string ABI method.
   *
   * Unstake tokens from a specific pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstakeFromPool(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['unstakeFromPool(string,string,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['unstakeFromPool(string,string,string)string'] | undefined]>

  /**
   * Calls the emergencyWithdraw(string,string)string ABI method.
   *
   * Emergency withdraw (with potential penalties)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdraw(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyWithdraw(string,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['emergencyWithdraw(string,string)string'] | undefined]>

  /**
   * Calls the getUserStake(string,string)string ABI method.
   *
   * Get user's staked amount in a pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStake(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserStake(string,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getUserStake(string,string)string'] | undefined]>

  /**
   * Calls the updateAIPrediction(string,string,string,string)string ABI method.
   *
   * Update AI prediction for a pool (admin/oracle function)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAiPrediction(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['updateAIPrediction(string,string,string,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['updateAIPrediction(string,string,string,string)string'] | undefined]>

  /**
   * Calls the submitTrainingData(string,string,string,string)string ABI method.
   *
   * Submit training data for AI models (Data-Donor DAO)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitTrainingData(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['submitTrainingData(string,string,string,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['submitTrainingData(string,string,string,string)string'] | undefined]>

  /**
   * Calls the voteOnProposal(string,bool,string)string ABI method.
   *
   * Vote on DAO governance proposals
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOnProposal(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['voteOnProposal(string,bool,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['voteOnProposal(string,bool,string)string'] | undefined]>

  /**
   * Calls the calculateUserRiskScore(string,string,string)string ABI method.
   *
   * Calculate user's risk score based on behavior and portfolio
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateUserRiskScore(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['calculateUserRiskScore(string,string,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['calculateUserRiskScore(string,string,string)string'] | undefined]>

  /**
   * Calls the claimRewards(string,string)string ABI method.
   *
   * Claim rewards with AI-enhanced calculations
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['claimRewards(string,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['claimRewards(string,string)string'] | undefined]>

  /**
   * Calls the getPoolStats(string)string ABI method.
   *
   * Get pool statistics with AI predictions
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolStats(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolStats(string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getPoolStats(string)string'] | undefined]>

  /**
   * Calls the emergencyPause()string ABI method.
   *
   * Emergency pause mechanism for security
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyPause(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV3Args['tuple']['emergencyPause()string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['emergencyPause()string'] | undefined]>

  /**
   * Calls the getUserPortfolio(string)string ABI method.
   *
   * Get user portfolio summary
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserPortfolio(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserPortfolio(string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getUserPortfolio(string)string'] | undefined]>

  /**
   * Calls the getPlatformAnalytics()string ABI method.
   *
   * Get platform analytics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformAnalytics(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getPlatformAnalytics()string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getPlatformAnalytics()string'] | undefined]>

  /**
   * Calls the getAllTransactions()string ABI method.
   *
   * Get all transactions on the platform
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAllTransactions(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV3Args['tuple']['getAllTransactions()string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getAllTransactions()string'] | undefined]>

  /**
   * Calls the getTransactionSummary()string ABI method.
   *
   * Get transaction summary statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionSummary(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionSummary()string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getTransactionSummary()string'] | undefined]>

  /**
   * Calls the getUserTransactions(string)string ABI method.
   *
   * Get all transactions for a specific user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserTransactions(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getUserTransactions(string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getUserTransactions(string)string'] | undefined]>

  /**
   * Calls the getPoolTransactions(string)string ABI method.
   *
   * Get all transactions for a specific pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolTransactions(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPoolTransactions(string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getPoolTransactions(string)string'] | undefined]>

  /**
   * Calls the getTransactionsByType(string)string ABI method.
   *
   * Get transactions filtered by type
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionsByType(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByType(string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getTransactionsByType(string)string'] | undefined]>

  /**
   * Calls the getTransactionsByDateRange(string,string)string ABI method.
   *
   * Get transactions within a date range
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionsByDateRange(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionsByDateRange(string,string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getTransactionsByDateRange(string,string)string'] | undefined]>

  /**
   * Calls the getTransactionDetails(string)string ABI method.
   *
   * Get detailed information about a specific transaction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionDetails(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionDetails(string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getTransactionDetails(string)string'] | undefined]>

  /**
   * Calls the getTransactionAnalytics()string ABI method.
   *
   * Get transaction history for analytics dashboard
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionAnalytics(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getTransactionAnalytics()string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getTransactionAnalytics()string'] | undefined]>

  /**
   * Calls the getPendingTransactions(string)string ABI method.
   *
   * Get pending/failed transactions for user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPendingTransactions(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV3Args['tuple']['getPendingTransactions(string)string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getPendingTransactions(string)string'] | undefined]>

  /**
   * Calls the getVolumeStatistics()string ABI method.
   *
   * Get transaction volume statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVolumeStatistics(params?: CallParams<PredictiveLiquidityMiningV3Args['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV3Args['tuple']['getVolumeStatistics()string']>): PredictiveLiquidityMiningV3Composer<[...TReturns, PredictiveLiquidityMiningV3Returns['getVolumeStatistics()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV3 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PredictiveLiquidityMiningV3Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PredictiveLiquidityMiningV3Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PredictiveLiquidityMiningV3ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PredictiveLiquidityMiningV3ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PredictiveLiquidityMiningV3ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PredictiveLiquidityMiningV3ComposerResults<TReturns>>
}
export type PredictiveLiquidityMiningV3ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

