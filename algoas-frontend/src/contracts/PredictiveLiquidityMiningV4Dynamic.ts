/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PredictiveLiquidityMiningV4Dynamic","structs":{},"methods":[{"name":"createPool","args":[{"type":"string","name":"poolName"},{"type":"string","name":"initialAPY"},{"type":"string","name":"riskLevel"},{"type":"string","name":"minStake"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new liquidity pool with AI prediction capabilities","events":[],"recommendations":{}},{"name":"stakeInPool","args":[{"type":"string","name":"poolId"},{"type":"string","name":"amount"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Stake tokens in a specific pool","events":[],"recommendations":{}},{"name":"unstakeFromPool","args":[{"type":"string","name":"poolId"},{"type":"string","name":"amount"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Unstake tokens from a specific pool","events":[],"recommendations":{}},{"name":"emergencyWithdraw","args":[{"type":"string","name":"poolId"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency withdraw (with potential penalties)","events":[],"recommendations":{}},{"name":"getUserStake","args":[{"type":"string","name":"poolId"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user's staked amount in a pool","events":[],"recommendations":{}},{"name":"updateAIPrediction","args":[{"type":"string","name":"poolId"},{"type":"string","name":"newAPY"},{"type":"string","name":"confidence"},{"type":"string","name":"timeframe"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update AI prediction for a pool (admin/oracle function)","events":[],"recommendations":{}},{"name":"submitTrainingData","args":[{"type":"string","name":"contributor"},{"type":"string","name":"dataType"},{"type":"string","name":"dataHash"},{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Submit training data for AI models (Data-Donor DAO)","events":[],"recommendations":{}},{"name":"voteOnProposal","args":[{"type":"string","name":"proposalId"},{"type":"bool","name":"vote"},{"type":"string","name":"voter"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Vote on DAO governance proposals","events":[],"recommendations":{}},{"name":"calculateUserRiskScore","args":[{"type":"string","name":"userAddress"},{"type":"string","name":"portfolioValue"},{"type":"string","name":"tradingFrequency"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Calculate user's risk score based on behavior and portfolio","events":[],"recommendations":{}},{"name":"claimRewards","args":[{"type":"string","name":"userAddress"},{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Claim rewards with AI-enhanced calculations","events":[],"recommendations":{}},{"name":"getPoolStats","args":[{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get pool statistics with AI predictions","events":[],"recommendations":{}},{"name":"emergencyPause","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency pause mechanism for security","events":[],"recommendations":{}},{"name":"getUserPortfolio","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user portfolio summary","events":[],"recommendations":{}},{"name":"getPlatformAnalytics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get platform analytics","events":[],"recommendations":{}},{"name":"getAllTransactions","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions on the platform","events":[],"recommendations":{}},{"name":"getTransactionSummary","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transaction summary statistics","events":[],"recommendations":{}},{"name":"getUserTransactions","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions for a specific user","events":[],"recommendations":{}},{"name":"getPoolTransactions","args":[{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get all transactions for a specific pool","events":[],"recommendations":{}},{"name":"getTransactionsByType","args":[{"type":"string","name":"txType"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transactions filtered by type","events":[],"recommendations":{}},{"name":"getTransactionsByDateRange","args":[{"type":"string","name":"startDate"},{"type":"string","name":"endDate"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transactions within a date range","events":[],"recommendations":{}},{"name":"getTransactionDetails","args":[{"type":"string","name":"txId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get detailed information about a specific transaction","events":[],"recommendations":{}},{"name":"getTransactionAnalytics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transaction history for analytics dashboard","events":[],"recommendations":{}},{"name":"getPendingTransactions","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get pending/failed transactions for user","events":[],"recommendations":{}},{"name":"getVolumeStatistics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get transaction volume statistics","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Predictive Liquidity Mining Platform Smart Contract v4.0 DYNAMIC\nFeatures: AI-powered predictions, dynamic rewards, risk scoring, Data-Donor DAO\nNEW: FULLY Dynamic transaction viewing functions, Real-time analytics, Enhanced reporting","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[230,449,479,634,664,700,730,760,790,937,1072,1242,1272,1348,1378,1414,1456,1497,1545,1593,1629,1665,1707,1749],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1802],"errorMessage":"can only call when creating"},{"pc":[233,452,482,637,667,703,733,763,793,940,1075,1245,1275,1351,1381,1417,1459,1500,1548,1596,1632,1668,1710,1752],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwCiAgICBieXRlY2Jsb2NrIDB4MTUxZjdjNzUgIlBvb2wgIiAiIGJ5IHVzZXIgIiAie1widXNlckFkZHJlc3NcIjpcIiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBleHBvcnQgY2xhc3MgUHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AyOQogICAgcHVzaGJ5dGVzcyAweGMzYjk5MjJhIDB4OTZjZWFiYTkgMHg1YTQxYjdhMSAweGU3MTliZGJkIDB4YTkwYjc3MmYgMHhkODQyMWYxZCAweDZjNjQxMjQ4IDB4MzBjNjFmZWYgMHg5MGVjYzkwZSAweDYzYjc0NDI1IDB4ZGRmYTlmMjggMHgwZDA1MWQ3YSAweGZiMGI0ZTYzIDB4YzE4OTM0ZmIgMHgzYWRmZWRlNSAweGRjMGJjYzc2IDB4YWI3NzE2ODMgMHhjZmVlYzU2MyAweDVmNzMwMTIyIDB4ZGI3YTExNDYgMHg4NTljODJjYSAweGUxM2IxNzQ5IDB4NmNiNzBiZjMgMHg4Yzk4YjIzNyAvLyBtZXRob2QgImNyZWF0ZVBvb2woc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAic3Rha2VJblBvb2woc3RyaW5nLHN0cmluZyxzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJ1bnN0YWtlRnJvbVBvb2woc3RyaW5nLHN0cmluZyxzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJlbWVyZ2VuY3lXaXRoZHJhdyhzdHJpbmcsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAiZ2V0VXNlclN0YWtlKHN0cmluZyxzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJ1cGRhdGVBSVByZWRpY3Rpb24oc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAic3VibWl0VHJhaW5pbmdEYXRhKHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZylzdHJpbmciLCBtZXRob2QgInZvdGVPblByb3Bvc2FsKHN0cmluZyxib29sLHN0cmluZylzdHJpbmciLCBtZXRob2QgImNhbGN1bGF0ZVVzZXJSaXNrU2NvcmUoc3RyaW5nLHN0cmluZyxzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJjbGFpbVJld2FyZHMoc3RyaW5nLHN0cmluZylzdHJpbmciLCBtZXRob2QgImdldFBvb2xTdGF0cyhzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJlbWVyZ2VuY3lQYXVzZSgpc3RyaW5nIiwgbWV0aG9kICJnZXRVc2VyUG9ydGZvbGlvKHN0cmluZylzdHJpbmciLCBtZXRob2QgImdldFBsYXRmb3JtQW5hbHl0aWNzKClzdHJpbmciLCBtZXRob2QgImdldEFsbFRyYW5zYWN0aW9ucygpc3RyaW5nIiwgbWV0aG9kICJnZXRUcmFuc2FjdGlvblN1bW1hcnkoKXN0cmluZyIsIG1ldGhvZCAiZ2V0VXNlclRyYW5zYWN0aW9ucyhzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJnZXRQb29sVHJhbnNhY3Rpb25zKHN0cmluZylzdHJpbmciLCBtZXRob2QgImdldFRyYW5zYWN0aW9uc0J5VHlwZShzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJnZXRUcmFuc2FjdGlvbnNCeURhdGVSYW5nZShzdHJpbmcsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAiZ2V0VHJhbnNhY3Rpb25EZXRhaWxzKHN0cmluZylzdHJpbmciLCBtZXRob2QgImdldFRyYW5zYWN0aW9uQW5hbHl0aWNzKClzdHJpbmciLCBtZXRob2QgImdldFBlbmRpbmdUcmFuc2FjdGlvbnMoc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAiZ2V0Vm9sdW1lU3RhdGlzdGljcygpc3RyaW5nIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9jcmVhdGVQb29sX3JvdXRlQDMgbWFpbl9zdGFrZUluUG9vbF9yb3V0ZUA0IG1haW5fdW5zdGFrZUZyb21Qb29sX3JvdXRlQDUgbWFpbl9lbWVyZ2VuY3lXaXRoZHJhd19yb3V0ZUA2IG1haW5fZ2V0VXNlclN0YWtlX3JvdXRlQDcgbWFpbl91cGRhdGVBSVByZWRpY3Rpb25fcm91dGVAOCBtYWluX3N1Ym1pdFRyYWluaW5nRGF0YV9yb3V0ZUA5IG1haW5fdm90ZU9uUHJvcG9zYWxfcm91dGVAMTAgbWFpbl9jYWxjdWxhdGVVc2VyUmlza1Njb3JlX3JvdXRlQDExIG1haW5fY2xhaW1SZXdhcmRzX3JvdXRlQDEyIG1haW5fZ2V0UG9vbFN0YXRzX3JvdXRlQDEzIG1haW5fZW1lcmdlbmN5UGF1c2Vfcm91dGVAMTQgbWFpbl9nZXRVc2VyUG9ydGZvbGlvX3JvdXRlQDE1IG1haW5fZ2V0UGxhdGZvcm1BbmFseXRpY3Nfcm91dGVAMTYgbWFpbl9nZXRBbGxUcmFuc2FjdGlvbnNfcm91dGVAMTcgbWFpbl9nZXRUcmFuc2FjdGlvblN1bW1hcnlfcm91dGVAMTggbWFpbl9nZXRVc2VyVHJhbnNhY3Rpb25zX3JvdXRlQDE5IG1haW5fZ2V0UG9vbFRyYW5zYWN0aW9uc19yb3V0ZUAyMCBtYWluX2dldFRyYW5zYWN0aW9uc0J5VHlwZV9yb3V0ZUAyMSBtYWluX2dldFRyYW5zYWN0aW9uc0J5RGF0ZVJhbmdlX3JvdXRlQDIyIG1haW5fZ2V0VHJhbnNhY3Rpb25EZXRhaWxzX3JvdXRlQDIzIG1haW5fZ2V0VHJhbnNhY3Rpb25BbmFseXRpY3Nfcm91dGVAMjQgbWFpbl9nZXRQZW5kaW5nVHJhbnNhY3Rpb25zX3JvdXRlQDI1IG1haW5fZ2V0Vm9sdW1lU3RhdGlzdGljc19yb3V0ZUAyNgoKbWFpbl9hZnRlcl9pZl9lbHNlQDMzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjgKICAgIC8vIGV4cG9ydCBjbGFzcyBQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18xIC8vIDAKICAgIHJldHVybgoKbWFpbl9nZXRWb2x1bWVTdGF0aXN0aWNzX3JvdXRlQDI2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjI0NQogICAgLy8gZ2V0Vm9sdW1lU3RhdGlzdGljcygpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwYzg3YjIyNzQ2ZjY0NjE3OTIyM2E3YjIyNzQ2Zjc0NjE2YzU2NmY2Yzc1NmQ2NTIyM2EyMjMyMzEzNTMwMzAzMDMwMjIyYzIyNzQ3MjYxNmU3MzYxNjM3NDY5NmY2ZTczMjIzYTIyMzgzOTIyMmMyMjYxNzY2NTcyNjE2NzY1NTM2OTdhNjUyMjNhMjIzMjM0MzEzNTM3MjI3ZDJjMjI3NDY4Njk3MzU3NjU2NTZiMjIzYTdiMjI3NDZmNzQ2MTZjNTY2ZjZjNzU2ZDY1MjIzYTIyMzEzMjM3MzUzMDMwMzAzMDIyN2QyYzIyNzQ2ODY5NzM0ZDZmNmU3NDY4MjIzYTdiMjI3NDZmNzQ2MTZjNTY2ZjZjNzU2ZDY1MjIzYTIyMzQzNTMyMzUzMDMwMzAzMDIyN2QyYzIyNjQ3OTZlNjE2ZDY5NjM0MzYxNmM2Mzc1NmM2MTc0Njk2ZjZlMjIzYTc0NzI3NTY1MmMyMjcyNjU2MTZjNTQ2OTZkNjU0NDYxNzQ2MTIyM2E3NDcyNzU2NTdkCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0UGVuZGluZ1RyYW5zYWN0aW9uc19yb3V0ZUAyNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoyMzcKICAgIC8vIGdldFBlbmRpbmdUcmFuc2FjdGlvbnModXNlckFkZHJlc3M6IHN0cmluZyk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBleHBvcnQgY2xhc3MgUHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MjM3CiAgICAvLyBnZXRQZW5kaW5nVHJhbnNhY3Rpb25zKHVzZXJBZGRyZXNzOiBzdHJpbmcpOiBzdHJpbmcgewogICAgY2FsbHN1YiBnZXRQZW5kaW5nVHJhbnNhY3Rpb25zCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRUcmFuc2FjdGlvbkFuYWx5dGljc19yb3V0ZUAyNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoyMjkKICAgIC8vIGdldFRyYW5zYWN0aW9uQW5hbHl0aWNzKCk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDA4ODdiMjI2NDYxNjk2Yzc5NTY2ZjZjNzU2ZDY1MjIzYTIyMzgzNTMwMzAzMDMwMjIyYzIyNzQ2ZjY0NjE3OTU0NzI2MTZlNzM2MTYzNzQ2OTZmNmU3MzIyM2EyMjMxMzIzNTIyMmMyMjZlNjU3NzU1NzM2NTcyNzMzMjM0NjgyMjNhMjIzMzM1MjIyYzIyNjE2Mzc0Njk3NjY1NTU3MzY1NzI3MzMyMzQ2ODIyM2EyMjM0MzUzNjIyMmMyMjY0Nzk2ZTYxNmQ2OTYzNDE2ZTYxNmM3OTc0Njk2MzczMjIzYTc0NzI3NTY1MmMyMjcyNjU2MTZjNTQ2OTZkNjU0NDYxNzQ2MTIyM2E3NDcyNzU2NTdkCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0VHJhbnNhY3Rpb25EZXRhaWxzX3JvdXRlQDIzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjIyMQogICAgLy8gZ2V0VHJhbnNhY3Rpb25EZXRhaWxzKHR4SWQ6IHN0cmluZyk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBleHBvcnQgY2xhc3MgUHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MjIxCiAgICAvLyBnZXRUcmFuc2FjdGlvbkRldGFpbHModHhJZDogc3RyaW5nKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgZ2V0VHJhbnNhY3Rpb25EZXRhaWxzCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRUcmFuc2FjdGlvbnNCeURhdGVSYW5nZV9yb3V0ZUAyMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoyMTMKICAgIC8vIGdldFRyYW5zYWN0aW9uc0J5RGF0ZVJhbmdlKHN0YXJ0RGF0ZTogc3RyaW5nLCBlbmREYXRlOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gZXhwb3J0IGNsYXNzIFByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoyMTMKICAgIC8vIGdldFRyYW5zYWN0aW9uc0J5RGF0ZVJhbmdlKHN0YXJ0RGF0ZTogc3RyaW5nLCBlbmREYXRlOiBzdHJpbmcpOiBzdHJpbmcgewogICAgY2FsbHN1YiBnZXRUcmFuc2FjdGlvbnNCeURhdGVSYW5nZQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0VHJhbnNhY3Rpb25zQnlUeXBlX3JvdXRlQDIxOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjIwNQogICAgLy8gZ2V0VHJhbnNhY3Rpb25zQnlUeXBlKHR4VHlwZTogc3RyaW5nKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjgKICAgIC8vIGV4cG9ydCBjbGFzcyBQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoyMDUKICAgIC8vIGdldFRyYW5zYWN0aW9uc0J5VHlwZSh0eFR5cGU6IHN0cmluZyk6IHN0cmluZyB7CiAgICBjYWxsc3ViIGdldFRyYW5zYWN0aW9uc0J5VHlwZQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0UG9vbFRyYW5zYWN0aW9uc19yb3V0ZUAyMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxOTcKICAgIC8vIGdldFBvb2xUcmFuc2FjdGlvbnMocG9vbElkOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gZXhwb3J0IGNsYXNzIFByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjE5NwogICAgLy8gZ2V0UG9vbFRyYW5zYWN0aW9ucyhwb29sSWQ6IHN0cmluZyk6IHN0cmluZyB7CiAgICBjYWxsc3ViIGdldFBvb2xUcmFuc2FjdGlvbnMKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFVzZXJUcmFuc2FjdGlvbnNfcm91dGVAMTk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTg5CiAgICAvLyBnZXRVc2VyVHJhbnNhY3Rpb25zKHVzZXJBZGRyZXNzOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gZXhwb3J0IGNsYXNzIFByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjE4OQogICAgLy8gZ2V0VXNlclRyYW5zYWN0aW9ucyh1c2VyQWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgZ2V0VXNlclRyYW5zYWN0aW9ucwogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0VHJhbnNhY3Rpb25TdW1tYXJ5X3JvdXRlQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjE4MQogICAgLy8gZ2V0VHJhbnNhY3Rpb25TdW1tYXJ5KCk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDA4MDdiMjI3NDZmNzQ2MTZjNTQ3MjYxNmU3MzYxNjM3NDY5NmY2ZTczMjIzYTIyMzIzMTM1MzAyMjJjMjI3NDZmNzQ2MTZjNTM3NDYxNmI2NTY0MjIzYTIyMzIzNTMwMzAzMDMwMzAzMDIyMmMyMjYxNjM3NDY5NzY2NTU0NzI2MTZlNzM2MTYzNzQ2OTZmNmU3MzMyMzQ2ODIyM2EyMjM4MzkyMjJjMjI2NDc5NmU2MTZkNjk2MzQzNjE2YzYzNzU2YzYxNzQ2OTZmNmUyMjNhNzQ3Mjc1NjUyYzIyNzI2NTYxNmM1NDY5NmQ2NTQ0NjE3NDYxMjIzYTc0NzI3NTY1N2QKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRBbGxUcmFuc2FjdGlvbnNfcm91dGVAMTc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTczCiAgICAvLyBnZXRBbGxUcmFuc2FjdGlvbnMoKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUwMDc1N2IyMjc0NmY3NDYxNmM1NDcyNjE2ZTczNjE2Mzc0Njk2ZjZlNzMyMjNhMjIzMTM1MzAzMDIyMmMyMjc0NmY3NDYxNmM1NjZmNmM3NTZkNjUyMjNhMjIzMTM1MzAzMDMwMzAzMDMwMjIyYzIyNjQ3OTZlNjE2ZDY5NjM0NDYxNzQ2MTIyM2E3NDcyNzU2NTJjMjI3MjY1NjE2YzU0Njk2ZDY1NDM2MTZjNjM3NTZjNjE3NDY5NmY2ZTIyM2E3NDcyNzU2NTJjMjI3Mzc0NjE3NDc1NzMyMjNhMjI2MTYzNzQ2OTc2NjUyMjdkCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0UGxhdGZvcm1BbmFseXRpY3Nfcm91dGVAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTYyCiAgICAvLyBnZXRQbGF0Zm9ybUFuYWx5dGljcygpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwOTc1MDZjNjE3NDY2NmY3MjZkMjA0MTZlNjE2Yzc5NzQ2OTYzNzMzYTIwNTQ2Zjc0NjE2YzIwNzA2ZjZmNmM3MzNhMjAzNDM3MmMyMDQxNjM3NDY5NzY2NTIwNmQ2OTZlNjU3MjczM2EyMDMxMmMzMjMzMzQyYzIwNTQ2Zjc0NjE2YzIwNzI2NTc3NjE3MjY0NzMyMDY0Njk3Mzc0NzI2OTYyNzU3NDY1NjQzYTIwMzEzMjM1MmMzMDMwMzAyMDc0NmY2YjY1NmU3MzJjMjA0MTc2NjU3MjYxNjc2NTIwNDE1MDU5M2EyMDMxMzIyZTM1MjUyYzIwNDE0OTIwNzA3MjY1NjQ2OTYzNzQ2OTZmNmUyMDYxNjM2Mzc1NzI2MTYzNzkzYTIwMzgzNzJlMzMyNQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFVzZXJQb3J0Zm9saW9fcm91dGVAMTU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTU1CiAgICAvLyBnZXRVc2VyUG9ydGZvbGlvKHVzZXJBZGRyZXNzOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gZXhwb3J0IGNsYXNzIFByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjE1NQogICAgLy8gZ2V0VXNlclBvcnRmb2xpbyh1c2VyQWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgZ2V0VXNlclBvcnRmb2xpbwogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZW1lcmdlbmN5UGF1c2Vfcm91dGVAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTQ4CiAgICAvLyBlbWVyZ2VuY3lQYXVzZSgpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwM2E1MDZjNjE3NDY2NmY3MjZkMjA3MDYxNzU3MzY1NjQyMDY2NmY3MjIwNmQ2MTY5NmU3NDY1NmU2MTZlNjM2NTJlMjA0MTZjNmMyMDZmNzA2NTcyNjE3NDY5NmY2ZTczMjA3Mzc1NzM3MDY1NmU2NDY1NjQyZQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFBvb2xTdGF0c19yb3V0ZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxNDAKICAgIC8vIGdldFBvb2xTdGF0cyhwb29sSWQ6IHN0cmluZyk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBleHBvcnQgY2xhc3MgUHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTQwCiAgICAvLyBnZXRQb29sU3RhdHMocG9vbElkOiBzdHJpbmcpOiBzdHJpbmcgewogICAgY2FsbHN1YiBnZXRQb29sU3RhdHMKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NsYWltUmV3YXJkc19yb3V0ZUAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMjctMTMwCiAgICAvLyBjbGFpbVJld2FyZHMoCiAgICAvLyAgICAgdXNlckFkZHJlc3M6IHN0cmluZywKICAgIC8vICAgICBwb29sSWQ6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjgKICAgIC8vIGV4cG9ydCBjbGFzcyBQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTI3LTEzMAogICAgLy8gY2xhaW1SZXdhcmRzKAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcsCiAgICAvLyAgICAgcG9vbElkOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBjYWxsc3ViIGNsYWltUmV3YXJkcwogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY2FsY3VsYXRlVXNlclJpc2tTY29yZV9yb3V0ZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMTUtMTE5CiAgICAvLyBjYWxjdWxhdGVVc2VyUmlza1Njb3JlKAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcsCiAgICAvLyAgICAgcG9ydGZvbGlvVmFsdWU6IHN0cmluZywKICAgIC8vICAgICB0cmFkaW5nRnJlcXVlbmN5OiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBleHBvcnQgY2xhc3MgUHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMTUtMTE5CiAgICAvLyBjYWxjdWxhdGVVc2VyUmlza1Njb3JlKAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcsCiAgICAvLyAgICAgcG9ydGZvbGlvVmFsdWU6IHN0cmluZywKICAgIC8vICAgICB0cmFkaW5nRnJlcXVlbmN5OiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBjYWxsc3ViIGNhbGN1bGF0ZVVzZXJSaXNrU2NvcmUKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3ZvdGVPblByb3Bvc2FsX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjEwMy0xMDcKICAgIC8vIHZvdGVPblByb3Bvc2FsKAogICAgLy8gICAgIHByb3Bvc2FsSWQ6IHN0cmluZywKICAgIC8vICAgICB2b3RlOiBib29sZWFuLAogICAgLy8gICAgIHZvdGVyOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBleHBvcnQgY2xhc3MgUHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBpbnRjXzEgLy8gMAogICAgZ2V0Yml0CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjEwMy0xMDcKICAgIC8vIHZvdGVPblByb3Bvc2FsKAogICAgLy8gICAgIHByb3Bvc2FsSWQ6IHN0cmluZywKICAgIC8vICAgICB2b3RlOiBib29sZWFuLAogICAgLy8gICAgIHZvdGVyOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBjYWxsc3ViIHZvdGVPblByb3Bvc2FsCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9zdWJtaXRUcmFpbmluZ0RhdGFfcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo3OS04NAogICAgLy8gc3VibWl0VHJhaW5pbmdEYXRhKAogICAgLy8gICAgIGNvbnRyaWJ1dG9yOiBzdHJpbmcsCiAgICAvLyAgICAgZGF0YVR5cGU6IHN0cmluZywKICAgIC8vICAgICBkYXRhSGFzaDogc3RyaW5nLAogICAgLy8gICAgIHBvb2xJZDogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gZXhwb3J0IGNsYXNzIFByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjc5LTg0CiAgICAvLyBzdWJtaXRUcmFpbmluZ0RhdGEoCiAgICAvLyAgICAgY29udHJpYnV0b3I6IHN0cmluZywKICAgIC8vICAgICBkYXRhVHlwZTogc3RyaW5nLAogICAgLy8gICAgIGRhdGFIYXNoOiBzdHJpbmcsCiAgICAvLyAgICAgcG9vbElkOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBjYWxsc3ViIHN1Ym1pdFRyYWluaW5nRGF0YQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlQUlQcmVkaWN0aW9uX3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6NjctNzIKICAgIC8vIHVwZGF0ZUFJUHJlZGljdGlvbigKICAgIC8vICAgICBwb29sSWQ6IHN0cmluZywKICAgIC8vICAgICBuZXdBUFk6IHN0cmluZywKICAgIC8vICAgICBjb25maWRlbmNlOiBzdHJpbmcsCiAgICAvLyAgICAgdGltZWZyYW1lOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBleHBvcnQgY2xhc3MgUHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6NjctNzIKICAgIC8vIHVwZGF0ZUFJUHJlZGljdGlvbigKICAgIC8vICAgICBwb29sSWQ6IHN0cmluZywKICAgIC8vICAgICBuZXdBUFk6IHN0cmluZywKICAgIC8vICAgICBjb25maWRlbmNlOiBzdHJpbmcsCiAgICAvLyAgICAgdGltZWZyYW1lOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBjYWxsc3ViIHVwZGF0ZUFJUHJlZGljdGlvbgogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0VXNlclN0YWtlX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6NTctNjAKICAgIC8vIGdldFVzZXJTdGFrZSgKICAgIC8vICAgICBwb29sSWQ6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gZXhwb3J0IGNsYXNzIFByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo1Ny02MAogICAgLy8gZ2V0VXNlclN0YWtlKAogICAgLy8gICAgIHBvb2xJZDogc3RyaW5nLAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBjYWxsc3ViIGdldFVzZXJTdGFrZQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZW1lcmdlbmN5V2l0aGRyYXdfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo0Ny01MAogICAgLy8gZW1lcmdlbmN5V2l0aGRyYXcoCiAgICAvLyAgICAgcG9vbElkOiBzdHJpbmcsCiAgICAvLyAgICAgdXNlckFkZHJlc3M6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjgKICAgIC8vIGV4cG9ydCBjbGFzcyBQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6NDctNTAKICAgIC8vIGVtZXJnZW5jeVdpdGhkcmF3KAogICAgLy8gICAgIHBvb2xJZDogc3RyaW5nLAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBjYWxsc3ViIGVtZXJnZW5jeVdpdGhkcmF3CiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl91bnN0YWtlRnJvbVBvb2xfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czozNi00MAogICAgLy8gdW5zdGFrZUZyb21Qb29sKAogICAgLy8gICAgIHBvb2xJZDogc3RyaW5nLAogICAgLy8gICAgIGFtb3VudDogc3RyaW5nLAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBleHBvcnQgY2xhc3MgUHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czozNi00MAogICAgLy8gdW5zdGFrZUZyb21Qb29sKAogICAgLy8gICAgIHBvb2xJZDogc3RyaW5nLAogICAgLy8gICAgIGFtb3VudDogc3RyaW5nLAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBjYWxsc3ViIHVuc3Rha2VGcm9tUG9vbAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fc3Rha2VJblBvb2xfcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoyNS0yOQogICAgLy8gc3Rha2VJblBvb2woCiAgICAvLyAgICAgcG9vbElkOiBzdHJpbmcsCiAgICAvLyAgICAgYW1vdW50OiBzdHJpbmcsCiAgICAvLyAgICAgdXNlckFkZHJlc3M6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjgKICAgIC8vIGV4cG9ydCBjbGFzcyBQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjI1LTI5CiAgICAvLyBzdGFrZUluUG9vbCgKICAgIC8vICAgICBwb29sSWQ6IHN0cmluZywKICAgIC8vICAgICBhbW91bnQ6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgY2FsbHN1YiBzdGFrZUluUG9vbAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlUG9vbF9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjEzLTE4CiAgICAvLyBjcmVhdGVQb29sKAogICAgLy8gICAgIHBvb2xOYW1lOiBzdHJpbmcsCiAgICAvLyAgICAgaW5pdGlhbEFQWTogc3RyaW5nLAogICAgLy8gICAgIHJpc2tMZXZlbDogc3RyaW5nLAogICAgLy8gICAgIG1pblN0YWtlOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBleHBvcnQgY2xhc3MgUHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTMtMTgKICAgIC8vIGNyZWF0ZVBvb2woCiAgICAvLyAgICAgcG9vbE5hbWU6IHN0cmluZywKICAgIC8vICAgICBpbml0aWFsQVBZOiBzdHJpbmcsCiAgICAvLyAgICAgcmlza0xldmVsOiBzdHJpbmcsCiAgICAvLyAgICAgbWluU3Rha2U6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgY3JlYXRlUG9vbAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDI5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjgKICAgIC8vIGV4cG9ydCBjbGFzcyBQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAzMwogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuY3JlYXRlUG9vbChwb29sTmFtZTogYnl0ZXMsIGluaXRpYWxBUFk6IGJ5dGVzLCByaXNrTGV2ZWw6IGJ5dGVzLCBtaW5TdGFrZTogYnl0ZXMpIC0+IGJ5dGVzOgpjcmVhdGVQb29sOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjEzLTE4CiAgICAvLyBjcmVhdGVQb29sKAogICAgLy8gICAgIHBvb2xOYW1lOiBzdHJpbmcsCiAgICAvLyAgICAgaW5pdGlhbEFQWTogc3RyaW5nLAogICAgLy8gICAgIHJpc2tMZXZlbDogc3RyaW5nLAogICAgLy8gICAgIG1pblN0YWtlOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBwcm90byA0IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxOQogICAgLy8gcmV0dXJuIGBQb29sICR7cG9vbE5hbWV9IGNyZWF0ZWQgd2l0aCAke2luaXRpYWxBUFl9JSBBUFksIHJpc2sgbGV2ZWw6ICR7cmlza0xldmVsfSwgbWluaW11bSBzdGFrZTogJHttaW5TdGFrZX0gbWljcm9BbGdvc2AKICAgIGJ5dGVjXzEgLy8gIlBvb2wgIgogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIGNyZWF0ZWQgd2l0aCAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiUgQVBZLCByaXNrIGxldmVsOiAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiwgbWluaW11bSBzdGFrZTogIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICIgbWljcm9BbGdvcyIKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjpQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljLnN0YWtlSW5Qb29sKHBvb2xJZDogYnl0ZXMsIGFtb3VudDogYnl0ZXMsIHVzZXJBZGRyZXNzOiBieXRlcykgLT4gYnl0ZXM6CnN0YWtlSW5Qb29sOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjI1LTI5CiAgICAvLyBzdGFrZUluUG9vbCgKICAgIC8vICAgICBwb29sSWQ6IHN0cmluZywKICAgIC8vICAgICBhbW91bnQ6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgcHJvdG8gMyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MzAKICAgIC8vIHJldHVybiBgU3VjY2Vzc2Z1bGx5IHN0YWtlZCAke2Ftb3VudH0gbWljcm9BbGdvcyBpbiBwb29sICR7cG9vbElkfSBieSB1c2VyICR7dXNlckFkZHJlc3N9YAogICAgcHVzaGJ5dGVzICJTdWNjZXNzZnVsbHkgc3Rha2VkICIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiBtaWNyb0FsZ29zIGluIHBvb2wgIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgYnl0ZWNfMiAvLyAiIGJ5IHVzZXIgIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjpQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljLnVuc3Rha2VGcm9tUG9vbChwb29sSWQ6IGJ5dGVzLCBhbW91bnQ6IGJ5dGVzLCB1c2VyQWRkcmVzczogYnl0ZXMpIC0+IGJ5dGVzOgp1bnN0YWtlRnJvbVBvb2w6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MzYtNDAKICAgIC8vIHVuc3Rha2VGcm9tUG9vbCgKICAgIC8vICAgICBwb29sSWQ6IHN0cmluZywKICAgIC8vICAgICBhbW91bnQ6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgcHJvdG8gMyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6NDEKICAgIC8vIHJldHVybiBgU3VjY2Vzc2Z1bGx5IHVuc3Rha2VkICR7YW1vdW50fSBtaWNyb0FsZ29zIGZyb20gcG9vbCAke3Bvb2xJZH0gYnkgdXNlciAke3VzZXJBZGRyZXNzfWAKICAgIHB1c2hieXRlcyAiU3VjY2Vzc2Z1bGx5IHVuc3Rha2VkICIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiBtaWNyb0FsZ29zIGZyb20gcG9vbCAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBieXRlY18yIC8vICIgYnkgdXNlciAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuZW1lcmdlbmN5V2l0aGRyYXcocG9vbElkOiBieXRlcywgdXNlckFkZHJlc3M6IGJ5dGVzKSAtPiBieXRlczoKZW1lcmdlbmN5V2l0aGRyYXc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6NDctNTAKICAgIC8vIGVtZXJnZW5jeVdpdGhkcmF3KAogICAgLy8gICAgIHBvb2xJZDogc3RyaW5nLAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo1MQogICAgLy8gcmV0dXJuIGBFbWVyZ2VuY3kgd2l0aGRyYXdhbCBleGVjdXRlZCBmb3IgJHt1c2VyQWRkcmVzc30gZnJvbSBwb29sICR7cG9vbElkfS4gUGVuYWx0aWVzIG1heSBhcHBseS5gCiAgICBwdXNoYnl0ZXMgIkVtZXJnZW5jeSB3aXRoZHJhd2FsIGV4ZWN1dGVkIGZvciAiCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICIgZnJvbSBwb29sICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiLiBQZW5hbHRpZXMgbWF5IGFwcGx5LiIKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjpQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljLmdldFVzZXJTdGFrZShwb29sSWQ6IGJ5dGVzLCB1c2VyQWRkcmVzczogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRVc2VyU3Rha2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6NTctNjAKICAgIC8vIGdldFVzZXJTdGFrZSgKICAgIC8vICAgICBwb29sSWQ6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6NjEKICAgIC8vIHJldHVybiBgVXNlciAke3VzZXJBZGRyZXNzfSBoYXMgc3Rha2VkIGFtb3VudCBpbiBwb29sICR7cG9vbElkfTogMSw1MDAsMDAwIG1pY3JvQWxnb3NgCiAgICBwdXNoYnl0ZXMgIlVzZXIgIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIGhhcyBzdGFrZWQgYW1vdW50IGluIHBvb2wgIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICI6IDEsNTAwLDAwMCBtaWNyb0FsZ29zIgogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMudXBkYXRlQUlQcmVkaWN0aW9uKHBvb2xJZDogYnl0ZXMsIG5ld0FQWTogYnl0ZXMsIGNvbmZpZGVuY2U6IGJ5dGVzLCB0aW1lZnJhbWU6IGJ5dGVzKSAtPiBieXRlczoKdXBkYXRlQUlQcmVkaWN0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjY3LTcyCiAgICAvLyB1cGRhdGVBSVByZWRpY3Rpb24oCiAgICAvLyAgICAgcG9vbElkOiBzdHJpbmcsCiAgICAvLyAgICAgbmV3QVBZOiBzdHJpbmcsCiAgICAvLyAgICAgY29uZmlkZW5jZTogc3RyaW5nLAogICAgLy8gICAgIHRpbWVmcmFtZTogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgcHJvdG8gNCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6NzMKICAgIC8vIHJldHVybiBgUG9vbCAke3Bvb2xJZH0gQUkgcHJlZGljdGlvbiB1cGRhdGVkOiAke25ld0FQWX0lIEFQWSB3aXRoICR7Y29uZmlkZW5jZX0lIGNvbmZpZGVuY2UgZm9yICR7dGltZWZyYW1lfWAKICAgIGJ5dGVjXzEgLy8gIlBvb2wgIgogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIEFJIHByZWRpY3Rpb24gdXBkYXRlZDogIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICIlIEFQWSB3aXRoICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiJSBjb25maWRlbmNlIGZvciAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuc3VibWl0VHJhaW5pbmdEYXRhKGNvbnRyaWJ1dG9yOiBieXRlcywgZGF0YVR5cGU6IGJ5dGVzLCBkYXRhSGFzaDogYnl0ZXMsIHBvb2xJZDogYnl0ZXMpIC0+IGJ5dGVzOgpzdWJtaXRUcmFpbmluZ0RhdGE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6NzktODQKICAgIC8vIHN1Ym1pdFRyYWluaW5nRGF0YSgKICAgIC8vICAgICBjb250cmlidXRvcjogc3RyaW5nLAogICAgLy8gICAgIGRhdGFUeXBlOiBzdHJpbmcsCiAgICAvLyAgICAgZGF0YUhhc2g6IHN0cmluZywKICAgIC8vICAgICBwb29sSWQ6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIHByb3RvIDQgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjk0CiAgICAvLyBpZiAoZGF0YVR5cGUgPT09ICdtYXJrZXRfZGF0YScpIHJldHVybiAnMTAwJwogICAgZnJhbWVfZGlnIC0zCiAgICBwdXNoYnl0ZXMgIm1hcmtldF9kYXRhIgogICAgPT0KICAgIGJ6IHN1Ym1pdFRyYWluaW5nRGF0YV9hZnRlcl9pZl9lbHNlQDMKICAgIHB1c2hieXRlcyAiMTAwIgoKc3VibWl0VHJhaW5pbmdEYXRhX2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjpQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljLmNhbGN1bGF0ZURhdGFSZXdhcmRAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4NgogICAgLy8gcmV0dXJuIGBEYXRhIHN1Ym1pdHRlZCBieSAke2NvbnRyaWJ1dG9yfSBmb3IgcG9vbCAke3Bvb2xJZH0uIERhdGEgaGFzaDogJHtkYXRhSGFzaH0uIEdvdmVybmFuY2UgcmV3YXJkOiAke3Jld2FyZEFtb3VudH0gdG9rZW5zLmAKICAgIHB1c2hieXRlcyAiRGF0YSBzdWJtaXR0ZWQgYnkgIgogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIGZvciBwb29sICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiLiBEYXRhIGhhc2g6ICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiLiBHb3Zlcm5hbmNlIHJld2FyZDogIgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIHRva2Vucy4iCiAgICBjb25jYXQKICAgIHJldHN1YgoKc3VibWl0VHJhaW5pbmdEYXRhX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo5NQogICAgLy8gaWYgKGRhdGFUeXBlID09PSAnbGlxdWlkaXR5X2RhdGEnKSByZXR1cm4gJzE1MCcKICAgIGZyYW1lX2RpZyAtMwogICAgcHVzaGJ5dGVzICJsaXF1aWRpdHlfZGF0YSIKICAgID09CiAgICBieiBzdWJtaXRUcmFpbmluZ0RhdGFfYWZ0ZXJfaWZfZWxzZUA1CiAgICBwdXNoYnl0ZXMgIjE1MCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4NQogICAgLy8gY29uc3QgcmV3YXJkQW1vdW50ID0gdGhpcy5jYWxjdWxhdGVEYXRhUmV3YXJkKGRhdGFUeXBlKQogICAgYiBzdWJtaXRUcmFpbmluZ0RhdGFfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuY2FsY3VsYXRlRGF0YVJld2FyZEA4CgpzdWJtaXRUcmFpbmluZ0RhdGFfYWZ0ZXJfaWZfZWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjk2CiAgICAvLyBpZiAoZGF0YVR5cGUgPT09ICd1c2VyX2JlaGF2aW9yJykgcmV0dXJuICcyMDAnCiAgICBmcmFtZV9kaWcgLTMKICAgIHB1c2hieXRlcyAidXNlcl9iZWhhdmlvciIKICAgID09CiAgICBieiBzdWJtaXRUcmFpbmluZ0RhdGFfYWZ0ZXJfaWZfZWxzZUA3CiAgICBwdXNoYnl0ZXMgIjIwMCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4NQogICAgLy8gY29uc3QgcmV3YXJkQW1vdW50ID0gdGhpcy5jYWxjdWxhdGVEYXRhUmV3YXJkKGRhdGFUeXBlKQogICAgYiBzdWJtaXRUcmFpbmluZ0RhdGFfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuY2FsY3VsYXRlRGF0YVJld2FyZEA4CgpzdWJtaXRUcmFpbmluZ0RhdGFfYWZ0ZXJfaWZfZWxzZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjk3CiAgICAvLyByZXR1cm4gJzUwJyAvLyBEZWZhdWx0IHJld2FyZAogICAgcHVzaGJ5dGVzICI1MCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo4NQogICAgLy8gY29uc3QgcmV3YXJkQW1vdW50ID0gdGhpcy5jYWxjdWxhdGVEYXRhUmV3YXJkKGRhdGFUeXBlKQogICAgYiBzdWJtaXRUcmFpbmluZ0RhdGFfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuY2FsY3VsYXRlRGF0YVJld2FyZEA4CgoKLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjpQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljLnZvdGVPblByb3Bvc2FsKHByb3Bvc2FsSWQ6IGJ5dGVzLCB2b3RlOiB1aW50NjQsIHZvdGVyOiBieXRlcykgLT4gYnl0ZXM6CnZvdGVPblByb3Bvc2FsOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjEwMy0xMDcKICAgIC8vIHZvdGVPblByb3Bvc2FsKAogICAgLy8gICAgIHByb3Bvc2FsSWQ6IHN0cmluZywKICAgIC8vICAgICB2b3RlOiBib29sZWFuLAogICAgLy8gICAgIHZvdGVyOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBwcm90byAzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMDgKICAgIC8vIGNvbnN0IHZvdGVTdHJpbmcgPSB2b3RlID8gJ0ZPUicgOiAnQUdBSU5TVCcKICAgIGZyYW1lX2RpZyAtMgogICAgYnogdm90ZU9uUHJvcG9zYWxfdGVybmFyeV9mYWxzZUAyCiAgICBwdXNoYnl0ZXMgIkZPUiIKCnZvdGVPblByb3Bvc2FsX3Rlcm5hcnlfbWVyZ2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMDkKICAgIC8vIHJldHVybiBgVm90ZSBjYXN0IG9uIHByb3Bvc2FsICR7cHJvcG9zYWxJZH0gYnkgJHt2b3Rlcn06ICR7dm90ZVN0cmluZ31gCiAgICBwdXNoYnl0ZXMgIlZvdGUgY2FzdCBvbiBwcm9wb3NhbCAiCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICIgYnkgIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICI6ICIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICByZXRzdWIKCnZvdGVPblByb3Bvc2FsX3Rlcm5hcnlfZmFsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMDgKICAgIC8vIGNvbnN0IHZvdGVTdHJpbmcgPSB2b3RlID8gJ0ZPUicgOiAnQUdBSU5TVCcKICAgIHB1c2hieXRlcyAiQUdBSU5TVCIKICAgIGIgdm90ZU9uUHJvcG9zYWxfdGVybmFyeV9tZXJnZUAzCgoKLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjpQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljLmNhbGN1bGF0ZVVzZXJSaXNrU2NvcmUodXNlckFkZHJlc3M6IGJ5dGVzLCBwb3J0Zm9saW9WYWx1ZTogYnl0ZXMsIHRyYWRpbmdGcmVxdWVuY3k6IGJ5dGVzKSAtPiBieXRlczoKY2FsY3VsYXRlVXNlclJpc2tTY29yZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMTUtMTE5CiAgICAvLyBjYWxjdWxhdGVVc2VyUmlza1Njb3JlKAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcsCiAgICAvLyAgICAgcG9ydGZvbGlvVmFsdWU6IHN0cmluZywKICAgIC8vICAgICB0cmFkaW5nRnJlcXVlbmN5OiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBwcm90byAzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMjEKICAgIC8vIHJldHVybiBgUmlzayBzY29yZSBmb3IgJHt1c2VyQWRkcmVzc306IDY1LzEwMCBiYXNlZCBvbiBwb3J0Zm9saW8gdmFsdWUgJHtwb3J0Zm9saW9WYWx1ZX0gYW5kIHRyYWRpbmcgZnJlcXVlbmN5ICR7dHJhZGluZ0ZyZXF1ZW5jeX1gCiAgICBwdXNoYnl0ZXMgIlJpc2sgc2NvcmUgZm9yICIKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIjogNjUvMTAwIGJhc2VkIG9uIHBvcnRmb2xpbyB2YWx1ZSAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiBhbmQgdHJhZGluZyBmcmVxdWVuY3kgIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjpQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljLmNsYWltUmV3YXJkcyh1c2VyQWRkcmVzczogYnl0ZXMsIHBvb2xJZDogYnl0ZXMpIC0+IGJ5dGVzOgpjbGFpbVJld2FyZHM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTI3LTEzMAogICAgLy8gY2xhaW1SZXdhcmRzKAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcsCiAgICAvLyAgICAgcG9vbElkOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMzQKICAgIC8vIHJldHVybiBgJHt1c2VyQWRkcmVzc30gY2xhaW1lZCAke3RvdGFsUmV3YXJkc30gdG9rZW5zIGZyb20gcG9vbCAke3Bvb2xJZH0uIFJld2FyZHMgY2FsY3VsYXRlZCB1c2luZyBBSS1wb3dlcmVkIGR5bmFtaWMgc3lzdGVtLmAKICAgIGZyYW1lX2RpZyAtMgogICAgcHVzaGJ5dGVzICIgY2xhaW1lZCAiCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMzIKICAgIC8vIGNvbnN0IHRvdGFsUmV3YXJkcyA9ICcxMjAnCiAgICBwdXNoYnl0ZXMgIjEyMCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxMzQKICAgIC8vIHJldHVybiBgJHt1c2VyQWRkcmVzc30gY2xhaW1lZCAke3RvdGFsUmV3YXJkc30gdG9rZW5zIGZyb20gcG9vbCAke3Bvb2xJZH0uIFJld2FyZHMgY2FsY3VsYXRlZCB1c2luZyBBSS1wb3dlcmVkIGR5bmFtaWMgc3lzdGVtLmAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICIgdG9rZW5zIGZyb20gcG9vbCAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIi4gUmV3YXJkcyBjYWxjdWxhdGVkIHVzaW5nIEFJLXBvd2VyZWQgZHluYW1pYyBzeXN0ZW0uIgogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuZ2V0UG9vbFN0YXRzKHBvb2xJZDogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRQb29sU3RhdHM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTQwCiAgICAvLyBnZXRQb29sU3RhdHMocG9vbElkOiBzdHJpbmcpOiBzdHJpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTQyCiAgICAvLyByZXR1cm4gYFBvb2wgJHtwb29sSWR9OiBDdXJyZW50IEFQWSAxNS41JSwgUHJlZGljdGVkIEFQWSAxOC4yJSAoODclIGNvbmZpZGVuY2UpLCBUVkw6IDEsNTAwLDAwMCBtaWNyb0FsZ29zYAogICAgYnl0ZWNfMSAvLyAiUG9vbCAiCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICI6IEN1cnJlbnQgQVBZIDE1LjUlLCBQcmVkaWN0ZWQgQVBZIDE4LjIlICg4NyUgY29uZmlkZW5jZSksIFRWTDogMSw1MDAsMDAwIG1pY3JvQWxnb3MiCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo6UHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYy5nZXRVc2VyUG9ydGZvbGlvKHVzZXJBZGRyZXNzOiBieXRlcykgLT4gYnl0ZXM6CmdldFVzZXJQb3J0Zm9saW86CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTU1CiAgICAvLyBnZXRVc2VyUG9ydGZvbGlvKHVzZXJBZGRyZXNzOiBzdHJpbmcpOiBzdHJpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTU2CiAgICAvLyByZXR1cm4gYFBvcnRmb2xpbyBmb3IgJHt1c2VyQWRkcmVzc306IEFjdGl2ZSBwb3NpdGlvbnMgdHJhY2tlZCwgcmV3YXJkcyBhdmFpbGFibGUsIHJpc2sgYXNzZXNzbWVudCBjb21wbGV0ZWRgCiAgICBwdXNoYnl0ZXMgIlBvcnRmb2xpbyBmb3IgIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiOiBBY3RpdmUgcG9zaXRpb25zIHRyYWNrZWQsIHJld2FyZHMgYXZhaWxhYmxlLCByaXNrIGFzc2Vzc21lbnQgY29tcGxldGVkIgogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuZ2V0VXNlclRyYW5zYWN0aW9ucyh1c2VyQWRkcmVzczogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRVc2VyVHJhbnNhY3Rpb25zOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjE4OQogICAgLy8gZ2V0VXNlclRyYW5zYWN0aW9ucyh1c2VyQWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjE5MQogICAgLy8gcmV0dXJuIGB7InVzZXJBZGRyZXNzIjoiJHt1c2VyQWRkcmVzc30iLCJ0cmFuc2FjdGlvbkNvdW50IjoiMTUiLCJsYXN0VHJhbnNhY3Rpb24iOnsiYW1vdW50IjoiMjUwMCJ9LCJkeW5hbWljRGF0YSI6dHJ1ZSwicmVhbFRpbWVDYWxjdWxhdGlvbiI6dHJ1ZX1gCiAgICBieXRlY18zIC8vICJ7XCJ1c2VyQWRkcmVzc1wiOlwiIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiXCIsXCJ0cmFuc2FjdGlvbkNvdW50XCI6XCIxNVwiLFwibGFzdFRyYW5zYWN0aW9uXCI6e1wiYW1vdW50XCI6XCIyNTAwXCJ9LFwiZHluYW1pY0RhdGFcIjp0cnVlLFwicmVhbFRpbWVDYWxjdWxhdGlvblwiOnRydWV9IgogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuZ2V0UG9vbFRyYW5zYWN0aW9ucyhwb29sSWQ6IGJ5dGVzKSAtPiBieXRlczoKZ2V0UG9vbFRyYW5zYWN0aW9uczoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoxOTcKICAgIC8vIGdldFBvb2xUcmFuc2FjdGlvbnMocG9vbElkOiBzdHJpbmcpOiBzdHJpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MTk5CiAgICAvLyByZXR1cm4gYHsicG9vbElkIjoiJHtwb29sSWR9IiwidG90YWxWb2x1bWUiOiI3NTAwMDAiLCJ0cmFuc2FjdGlvbkNvdW50IjoiNDUiLCJkeW5hbWljQ2FsY3VsYXRpb24iOnRydWUsInJlYWxUaW1lRGF0YSI6dHJ1ZX1gCiAgICBwdXNoYnl0ZXMgIntcInBvb2xJZFwiOlwiIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiXCIsXCJ0b3RhbFZvbHVtZVwiOlwiNzUwMDAwXCIsXCJ0cmFuc2FjdGlvbkNvdW50XCI6XCI0NVwiLFwiZHluYW1pY0NhbGN1bGF0aW9uXCI6dHJ1ZSxcInJlYWxUaW1lRGF0YVwiOnRydWV9IgogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuZ2V0VHJhbnNhY3Rpb25zQnlUeXBlKHR4VHlwZTogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRUcmFuc2FjdGlvbnNCeVR5cGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MjA1CiAgICAvLyBnZXRUcmFuc2FjdGlvbnNCeVR5cGUodHhUeXBlOiBzdHJpbmcpOiBzdHJpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MjA3CiAgICAvLyByZXR1cm4gYHsidHJhbnNhY3Rpb25UeXBlIjoiJHt0eFR5cGV9IiwiY291bnQiOiIyNSIsInRvdGFsVm9sdW1lIjoiNjUwMDAwIiwiYXZlcmFnZVNpemUiOiIyNjAwMCIsImR5bmFtaWNDYWxjdWxhdGlvbiI6dHJ1ZSwicmVhbFRpbWVEYXRhIjp0cnVlfWAKICAgIHB1c2hieXRlcyAie1widHJhbnNhY3Rpb25UeXBlXCI6XCIiCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICJcIixcImNvdW50XCI6XCIyNVwiLFwidG90YWxWb2x1bWVcIjpcIjY1MDAwMFwiLFwiYXZlcmFnZVNpemVcIjpcIjI2MDAwXCIsXCJkeW5hbWljQ2FsY3VsYXRpb25cIjp0cnVlLFwicmVhbFRpbWVEYXRhXCI6dHJ1ZX0iCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czo6UHJlZGljdGl2ZUxpcXVpZGl0eU1pbmluZ1Y0RHluYW1pYy5nZXRUcmFuc2FjdGlvbnNCeURhdGVSYW5nZShzdGFydERhdGU6IGJ5dGVzLCBlbmREYXRlOiBieXRlcykgLT4gYnl0ZXM6CmdldFRyYW5zYWN0aW9uc0J5RGF0ZVJhbmdlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjIxMwogICAgLy8gZ2V0VHJhbnNhY3Rpb25zQnlEYXRlUmFuZ2Uoc3RhcnREYXRlOiBzdHJpbmcsIGVuZERhdGU6IHN0cmluZyk6IHN0cmluZyB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoyMTUKICAgIC8vIHJldHVybiBgeyJzdGFydERhdGUiOiIke3N0YXJ0RGF0ZX0iLCJlbmREYXRlIjoiJHtlbmREYXRlfSIsInRyYW5zYWN0aW9uQ291bnQiOiI2NyIsInRvdGFsVm9sdW1lIjoiMTI1MDAwMCIsImR5bmFtaWNDYWxjdWxhdGlvbiI6dHJ1ZSwicmVhbFRpbWVEYXRhIjp0cnVlfWAKICAgIHB1c2hieXRlcyAie1wic3RhcnREYXRlXCI6XCIiCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICJcIixcImVuZERhdGVcIjpcIiIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiXCIsXCJ0cmFuc2FjdGlvbkNvdW50XCI6XCI2N1wiLFwidG90YWxWb2x1bWVcIjpcIjEyNTAwMDBcIixcImR5bmFtaWNDYWxjdWxhdGlvblwiOnRydWUsXCJyZWFsVGltZURhdGFcIjp0cnVlfSIKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjpQcmVkaWN0aXZlTGlxdWlkaXR5TWluaW5nVjREeW5hbWljLmdldFRyYW5zYWN0aW9uRGV0YWlscyh0eElkOiBieXRlcykgLT4gYnl0ZXM6CmdldFRyYW5zYWN0aW9uRGV0YWlsczoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcmVkaWN0aXZlX2xpcXVpZGl0eV9taW5pbmcvY29udHJhY3QuYWxnby50czoyMjEKICAgIC8vIGdldFRyYW5zYWN0aW9uRGV0YWlscyh0eElkOiBzdHJpbmcpOiBzdHJpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6MjIzCiAgICAvLyByZXR1cm4gYHsidHhJZCI6IiR7dHhJZH0iLCJhbW91bnQiOiIzNTAwIiwiZ2FzVXNlZCI6IjAuMDAxIiwicmlza1Njb3JlIjoiNzUiLCJkeW5hbWljRGF0YSI6dHJ1ZSwicmVhbFRpbWVDYWxjdWxhdGlvbiI6dHJ1ZX1gCiAgICBwdXNoYnl0ZXMgIntcInR4SWRcIjpcIiIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIlwiLFwiYW1vdW50XCI6XCIzNTAwXCIsXCJnYXNVc2VkXCI6XCIwLjAwMVwiLFwicmlza1Njb3JlXCI6XCI3NVwiLFwiZHluYW1pY0RhdGFcIjp0cnVlLFwicmVhbFRpbWVDYWxjdWxhdGlvblwiOnRydWV9IgogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcHJlZGljdGl2ZV9saXF1aWRpdHlfbWluaW5nL2NvbnRyYWN0LmFsZ28udHM6OlByZWRpY3RpdmVMaXF1aWRpdHlNaW5pbmdWNER5bmFtaWMuZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucyh1c2VyQWRkcmVzczogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRQZW5kaW5nVHJhbnNhY3Rpb25zOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjIzNwogICAgLy8gZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucyh1c2VyQWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3ByZWRpY3RpdmVfbGlxdWlkaXR5X21pbmluZy9jb250cmFjdC5hbGdvLnRzOjIzOQogICAgLy8gcmV0dXJuIGB7InVzZXJBZGRyZXNzIjoiJHt1c2VyQWRkcmVzc30iLCJwZW5kaW5nQ291bnQiOiIyIiwibGF0ZXN0UGVuZGluZyI6eyJhbW91bnQiOiIxMjUwIn0sImR5bmFtaWNEYXRhIjp0cnVlLCJyZWFsVGltZUNhbGN1bGF0aW9uIjp0cnVlfWAKICAgIGJ5dGVjXzMgLy8gIntcInVzZXJBZGRyZXNzXCI6XCIiCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICJcIixcInBlbmRpbmdDb3VudFwiOlwiMlwiLFwibGF0ZXN0UGVuZGluZ1wiOntcImFtb3VudFwiOlwiMTI1MFwifSxcImR5bmFtaWNEYXRhXCI6dHJ1ZSxcInJlYWxUaW1lQ2FsY3VsYXRpb25cIjp0cnVlfSIKICAgIGNvbmNhdAogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmBAQVH3x1BVBvb2wgCSBieSB1c2VyIBB7InVzZXJBZGRyZXNzIjoiMRtBBtCCGATDuZIqBJbOq6kEWkG3oQTnGb29BKkLdy8E2EIfHQRsZBJIBDDGH+8EkOzJDgRjt0QlBN36nygEDQUdegT7C05jBMGJNPsEOt/t5QTcC8x2BKt3FoMEz+7FYwRfcwEiBNt6EUYEhZyCygThOxdJBGy3C/MEjJiyNzYaAI4YBfEFxwWdBXkFVQUlBPUEzASiBH4EYAQUA/YDTALFAjICFAH2AdgBtAGWAPsA3QACI0MxGRREMRhEgM4BFR98dQDIeyJ0b2RheSI6eyJ0b3RhbFZvbHVtZSI6IjIxNTAwMDAiLCJ0cmFuc2FjdGlvbnMiOiI4OSIsImF2ZXJhZ2VTaXplIjoiMjQxNTcifSwidGhpc1dlZWsiOnsidG90YWxWb2x1bWUiOiIxMjc1MDAwMCJ9LCJ0aGlzTW9udGgiOnsidG90YWxWb2x1bWUiOiI0NTI1MDAwMCJ9LCJkeW5hbWljQ2FsY3VsYXRpb24iOnRydWUsInJlYWxUaW1lRGF0YSI6dHJ1ZX2wIkMxGRREMRhENhoBVwIAiAwFSRUWVwYCTFAoTFCwIkMxGRREMRhEgI4BFR98dQCIeyJkYWlseVZvbHVtZSI6Ijg1MDAwMCIsInRvZGF5VHJhbnNhY3Rpb25zIjoiMTI1IiwibmV3VXNlcnMyNGgiOiIzNSIsImFjdGl2ZVVzZXJzMjRoIjoiNDU2IiwiZHluYW1pY0FuYWx5dGljcyI6dHJ1ZSwicmVhbFRpbWVEYXRhIjp0cnVlfbAiQzEZFEQxGEQ2GgFXAgCICtRJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCICiNJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgCICXtJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgCICOdJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgCICFJJFRZXBgJMUChMULAiQzEZFEQxGESAhgEVH3x1AIB7InRvdGFsVHJhbnNhY3Rpb25zIjoiMjE1MCIsInRvdGFsU3Rha2VkIjoiMjUwMDAwMDAiLCJhY3RpdmVUcmFuc2FjdGlvbnMyNGgiOiI4OSIsImR5bmFtaWNDYWxjdWxhdGlvbiI6dHJ1ZSwicmVhbFRpbWVEYXRhIjp0cnVlfbAiQzEZFEQxGESAexUffHUAdXsidG90YWxUcmFuc2FjdGlvbnMiOiIxNTAwIiwidG90YWxWb2x1bWUiOiIxNTAwMDAwMCIsImR5bmFtaWNEYXRhIjp0cnVlLCJyZWFsVGltZUNhbGN1bGF0aW9uIjp0cnVlLCJzdGF0dXMiOiJhY3RpdmUifbAiQzEZFEQxGESAnQEVH3x1AJdQbGF0Zm9ybSBBbmFseXRpY3M6IFRvdGFsIHBvb2xzOiA0NywgQWN0aXZlIG1pbmVyczogMSwyMzQsIFRvdGFsIHJld2FyZHMgZGlzdHJpYnV0ZWQ6IDEyNSwwMDAgdG9rZW5zLCBBdmVyYWdlIEFQWTogMTIuNSUsIEFJIHByZWRpY3Rpb24gYWNjdXJhY3k6IDg3LjMlsCJDMRkURDEYRDYaAVcCAIgGDkkVFlcGAkxQKExQsCJDMRkURDEYRIBAFR98dQA6UGxhdGZvcm0gcGF1c2VkIGZvciBtYWludGVuYW5jZS4gQWxsIG9wZXJhdGlvbnMgc3VzcGVuZGVkLrAiQzEZFEQxGEQ2GgFXAgCIBUVJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIBLlJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIBDJJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgIjUzYaA1cCAIgDw0kVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgC1kkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgCWEkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCAIgB7EkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCAIgBc0kVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCAIgBCUkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCAIgAo0kVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgAGUkVFlcGAkxQKExQsCJDMRlA+doxGBREIkOKBAEpi/xQgA4gY3JlYXRlZCB3aXRoIFCL/VCAEyUgQVBZLCByaXNrIGxldmVsOiBQi/5QgBEsIG1pbmltdW0gc3Rha2U6IFCL/1CACyBtaWNyb0FsZ29zUImKAwGAFFN1Y2Nlc3NmdWxseSBzdGFrZWQgi/5QgBQgbWljcm9BbGdvcyBpbiBwb29sIFCL/VAqUIv/UImKAwGAFlN1Y2Nlc3NmdWxseSB1bnN0YWtlZCCL/lCAFiBtaWNyb0FsZ29zIGZyb20gcG9vbCBQi/1QKlCL/1CJigIBgCJFbWVyZ2VuY3kgd2l0aGRyYXdhbCBleGVjdXRlZCBmb3Igi/9QgAsgZnJvbSBwb29sIFCL/lCAFi4gUGVuYWx0aWVzIG1heSBhcHBseS5QiYoCAYAFVXNlciCL/1CAGyBoYXMgc3Rha2VkIGFtb3VudCBpbiBwb29sIFCL/lCAFjogMSw1MDAsMDAwIG1pY3JvQWxnb3NQiYoEASmL/FCAGCBBSSBwcmVkaWN0aW9uIHVwZGF0ZWQ6IFCL/VCACyUgQVBZIHdpdGggUIv+UIARJSBjb25maWRlbmNlIGZvciBQi/9QiYoEAYv9gAttYXJrZXRfZGF0YRJBAGWAAzEwMIASRGF0YSBzdWJtaXR0ZWQgYnkgi/xQgAogZm9yIHBvb2wgUIv/UIANLiBEYXRhIGhhc2g6IFCL/lCAFS4gR292ZXJuYW5jZSByZXdhcmQ6IFBMUIAIIHRva2Vucy5QiYv9gA5saXF1aWRpdHlfZGF0YRJBAAiAAzE1MEL/gov9gA11c2VyX2JlaGF2aW9yEkEACIADMjAwQv9lgAI1MEL/XooDAYv+QQAygANGT1KAFlZvdGUgY2FzdCBvbiBwcm9wb3NhbCCL/VCABCBieSBQi/9QgAI6IFBMUImAB0FHQUlOU1RC/8eKAwGAD1Jpc2sgc2NvcmUgZm9yIIv9UIAiOiA2NS8xMDAgYmFzZWQgb24gcG9ydGZvbGlvIHZhbHVlIFCL/lCAFyBhbmQgdHJhZGluZyBmcmVxdWVuY3kgUIv/UImKAgGL/oAJIGNsYWltZWQgUIADMTIwUIASIHRva2VucyBmcm9tIHBvb2wgUIv/UIA1LiBSZXdhcmRzIGNhbGN1bGF0ZWQgdXNpbmcgQUktcG93ZXJlZCBkeW5hbWljIHN5c3RlbS5QiYoBASmL/1CAVDogQ3VycmVudCBBUFkgMTUuNSUsIFByZWRpY3RlZCBBUFkgMTguMiUgKDg3JSBjb25maWRlbmNlKSwgVFZMOiAxLDUwMCwwMDAgbWljcm9BbGdvc1CJigEBgA5Qb3J0Zm9saW8gZm9yIIv/UIBIOiBBY3RpdmUgcG9zaXRpb25zIHRyYWNrZWQsIHJld2FyZHMgYXZhaWxhYmxlLCByaXNrIGFzc2Vzc21lbnQgY29tcGxldGVkUImKAQEri/9QgGwiLCJ0cmFuc2FjdGlvbkNvdW50IjoiMTUiLCJsYXN0VHJhbnNhY3Rpb24iOnsiYW1vdW50IjoiMjUwMCJ9LCJkeW5hbWljRGF0YSI6dHJ1ZSwicmVhbFRpbWVDYWxjdWxhdGlvbiI6dHJ1ZX1QiYoBAYALeyJwb29sSWQiOiKL/1CAXyIsInRvdGFsVm9sdW1lIjoiNzUwMDAwIiwidHJhbnNhY3Rpb25Db3VudCI6IjQ1IiwiZHluYW1pY0NhbGN1bGF0aW9uIjp0cnVlLCJyZWFsVGltZURhdGEiOnRydWV9UImKAQGAFHsidHJhbnNhY3Rpb25UeXBlIjoii/9QgGoiLCJjb3VudCI6IjI1IiwidG90YWxWb2x1bWUiOiI2NTAwMDAiLCJhdmVyYWdlU2l6ZSI6IjI2MDAwIiwiZHluYW1pY0NhbGN1bGF0aW9uIjp0cnVlLCJyZWFsVGltZURhdGEiOnRydWV9UImKAgGADnsic3RhcnREYXRlIjoii/5QgA0iLCJlbmREYXRlIjoiUIv/UIBgIiwidHJhbnNhY3Rpb25Db3VudCI6IjY3IiwidG90YWxWb2x1bWUiOiIxMjUwMDAwIiwiZHluYW1pY0NhbGN1bGF0aW9uIjp0cnVlLCJyZWFsVGltZURhdGEiOnRydWV9UImKAQGACXsidHhJZCI6Iov/UIBjIiwiYW1vdW50IjoiMzUwMCIsImdhc1VzZWQiOiIwLjAwMSIsInJpc2tTY29yZSI6Ijc1IiwiZHluYW1pY0RhdGEiOnRydWUsInJlYWxUaW1lQ2FsY3VsYXRpb24iOnRydWV9UImKAQEri/9QgGUiLCJwZW5kaW5nQ291bnQiOiIyIiwibGF0ZXN0UGVuZGluZyI6eyJhbW91bnQiOiIxMjUwIn0sImR5bmFtaWNEYXRhIjp0cnVlLCJyZWFsVGltZUNhbGN1bGF0aW9uIjp0cnVlfVCJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PredictiveLiquidityMiningV4Dynamic contract
 */
export type PredictiveLiquidityMiningV4DynamicArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createPool(string,string,string,string)string': {
      poolName: string
      initialApy: string
      riskLevel: string
      minStake: string
    }
    'stakeInPool(string,string,string)string': {
      poolId: string
      amount: string
      userAddress: string
    }
    'unstakeFromPool(string,string,string)string': {
      poolId: string
      amount: string
      userAddress: string
    }
    'emergencyWithdraw(string,string)string': {
      poolId: string
      userAddress: string
    }
    'getUserStake(string,string)string': {
      poolId: string
      userAddress: string
    }
    'updateAIPrediction(string,string,string,string)string': {
      poolId: string
      newApy: string
      confidence: string
      timeframe: string
    }
    'submitTrainingData(string,string,string,string)string': {
      contributor: string
      dataType: string
      dataHash: string
      poolId: string
    }
    'voteOnProposal(string,bool,string)string': {
      proposalId: string
      vote: boolean
      voter: string
    }
    'calculateUserRiskScore(string,string,string)string': {
      userAddress: string
      portfolioValue: string
      tradingFrequency: string
    }
    'claimRewards(string,string)string': {
      userAddress: string
      poolId: string
    }
    'getPoolStats(string)string': {
      poolId: string
    }
    'emergencyPause()string': Record<string, never>
    'getUserPortfolio(string)string': {
      userAddress: string
    }
    'getPlatformAnalytics()string': Record<string, never>
    'getAllTransactions()string': Record<string, never>
    'getTransactionSummary()string': Record<string, never>
    'getUserTransactions(string)string': {
      userAddress: string
    }
    'getPoolTransactions(string)string': {
      poolId: string
    }
    'getTransactionsByType(string)string': {
      txType: string
    }
    'getTransactionsByDateRange(string,string)string': {
      startDate: string
      endDate: string
    }
    'getTransactionDetails(string)string': {
      txId: string
    }
    'getTransactionAnalytics()string': Record<string, never>
    'getPendingTransactions(string)string': {
      userAddress: string
    }
    'getVolumeStatistics()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createPool(string,string,string,string)string': [poolName: string, initialApy: string, riskLevel: string, minStake: string]
    'stakeInPool(string,string,string)string': [poolId: string, amount: string, userAddress: string]
    'unstakeFromPool(string,string,string)string': [poolId: string, amount: string, userAddress: string]
    'emergencyWithdraw(string,string)string': [poolId: string, userAddress: string]
    'getUserStake(string,string)string': [poolId: string, userAddress: string]
    'updateAIPrediction(string,string,string,string)string': [poolId: string, newApy: string, confidence: string, timeframe: string]
    'submitTrainingData(string,string,string,string)string': [contributor: string, dataType: string, dataHash: string, poolId: string]
    'voteOnProposal(string,bool,string)string': [proposalId: string, vote: boolean, voter: string]
    'calculateUserRiskScore(string,string,string)string': [userAddress: string, portfolioValue: string, tradingFrequency: string]
    'claimRewards(string,string)string': [userAddress: string, poolId: string]
    'getPoolStats(string)string': [poolId: string]
    'emergencyPause()string': []
    'getUserPortfolio(string)string': [userAddress: string]
    'getPlatformAnalytics()string': []
    'getAllTransactions()string': []
    'getTransactionSummary()string': []
    'getUserTransactions(string)string': [userAddress: string]
    'getPoolTransactions(string)string': [poolId: string]
    'getTransactionsByType(string)string': [txType: string]
    'getTransactionsByDateRange(string,string)string': [startDate: string, endDate: string]
    'getTransactionDetails(string)string': [txId: string]
    'getTransactionAnalytics()string': []
    'getPendingTransactions(string)string': [userAddress: string]
    'getVolumeStatistics()string': []
  }
}

/**
 * The return type for each method
 */
export type PredictiveLiquidityMiningV4DynamicReturns = {
  'createPool(string,string,string,string)string': string
  'stakeInPool(string,string,string)string': string
  'unstakeFromPool(string,string,string)string': string
  'emergencyWithdraw(string,string)string': string
  'getUserStake(string,string)string': string
  'updateAIPrediction(string,string,string,string)string': string
  'submitTrainingData(string,string,string,string)string': string
  'voteOnProposal(string,bool,string)string': string
  'calculateUserRiskScore(string,string,string)string': string
  'claimRewards(string,string)string': string
  'getPoolStats(string)string': string
  'emergencyPause()string': string
  'getUserPortfolio(string)string': string
  'getPlatformAnalytics()string': string
  'getAllTransactions()string': string
  'getTransactionSummary()string': string
  'getUserTransactions(string)string': string
  'getPoolTransactions(string)string': string
  'getTransactionsByType(string)string': string
  'getTransactionsByDateRange(string,string)string': string
  'getTransactionDetails(string)string': string
  'getTransactionAnalytics()string': string
  'getPendingTransactions(string)string': string
  'getVolumeStatistics()string': string
}

/**
 * Defines the types of available calls and state of the PredictiveLiquidityMiningV4Dynamic smart contract.
 */
export type PredictiveLiquidityMiningV4DynamicTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createPool(string,string,string,string)string' | 'createPool', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['createPool(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['createPool(string,string,string,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['createPool(string,string,string,string)string']
    }>
    & Record<'stakeInPool(string,string,string)string' | 'stakeInPool', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['stakeInPool(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['stakeInPool(string,string,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['stakeInPool(string,string,string)string']
    }>
    & Record<'unstakeFromPool(string,string,string)string' | 'unstakeFromPool', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['unstakeFromPool(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['unstakeFromPool(string,string,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['unstakeFromPool(string,string,string)string']
    }>
    & Record<'emergencyWithdraw(string,string)string' | 'emergencyWithdraw', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyWithdraw(string,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyWithdraw(string,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['emergencyWithdraw(string,string)string']
    }>
    & Record<'getUserStake(string,string)string' | 'getUserStake', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserStake(string,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserStake(string,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getUserStake(string,string)string']
    }>
    & Record<'updateAIPrediction(string,string,string,string)string' | 'updateAIPrediction', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['updateAIPrediction(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['updateAIPrediction(string,string,string,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['updateAIPrediction(string,string,string,string)string']
    }>
    & Record<'submitTrainingData(string,string,string,string)string' | 'submitTrainingData', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['submitTrainingData(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['submitTrainingData(string,string,string,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['submitTrainingData(string,string,string,string)string']
    }>
    & Record<'voteOnProposal(string,bool,string)string' | 'voteOnProposal', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['voteOnProposal(string,bool,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['voteOnProposal(string,bool,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['voteOnProposal(string,bool,string)string']
    }>
    & Record<'calculateUserRiskScore(string,string,string)string' | 'calculateUserRiskScore', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['calculateUserRiskScore(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['calculateUserRiskScore(string,string,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['calculateUserRiskScore(string,string,string)string']
    }>
    & Record<'claimRewards(string,string)string' | 'claimRewards', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['claimRewards(string,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['claimRewards(string,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['claimRewards(string,string)string']
    }>
    & Record<'getPoolStats(string)string' | 'getPoolStats', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolStats(string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolStats(string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getPoolStats(string)string']
    }>
    & Record<'emergencyPause()string' | 'emergencyPause', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyPause()string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyPause()string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['emergencyPause()string']
    }>
    & Record<'getUserPortfolio(string)string' | 'getUserPortfolio', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserPortfolio(string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserPortfolio(string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getUserPortfolio(string)string']
    }>
    & Record<'getPlatformAnalytics()string' | 'getPlatformAnalytics', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getPlatformAnalytics()string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPlatformAnalytics()string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getPlatformAnalytics()string']
    }>
    & Record<'getAllTransactions()string' | 'getAllTransactions', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getAllTransactions()string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getAllTransactions()string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getAllTransactions()string']
    }>
    & Record<'getTransactionSummary()string' | 'getTransactionSummary', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionSummary()string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionSummary()string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getTransactionSummary()string']
    }>
    & Record<'getUserTransactions(string)string' | 'getUserTransactions', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserTransactions(string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserTransactions(string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getUserTransactions(string)string']
    }>
    & Record<'getPoolTransactions(string)string' | 'getPoolTransactions', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolTransactions(string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolTransactions(string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getPoolTransactions(string)string']
    }>
    & Record<'getTransactionsByType(string)string' | 'getTransactionsByType', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByType(string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByType(string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getTransactionsByType(string)string']
    }>
    & Record<'getTransactionsByDateRange(string,string)string' | 'getTransactionsByDateRange', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByDateRange(string,string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByDateRange(string,string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getTransactionsByDateRange(string,string)string']
    }>
    & Record<'getTransactionDetails(string)string' | 'getTransactionDetails', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionDetails(string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionDetails(string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getTransactionDetails(string)string']
    }>
    & Record<'getTransactionAnalytics()string' | 'getTransactionAnalytics', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionAnalytics()string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionAnalytics()string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getTransactionAnalytics()string']
    }>
    & Record<'getPendingTransactions(string)string' | 'getPendingTransactions', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getPendingTransactions(string)string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPendingTransactions(string)string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getPendingTransactions(string)string']
    }>
    & Record<'getVolumeStatistics()string' | 'getVolumeStatistics', {
      argsObj: PredictiveLiquidityMiningV4DynamicArgs['obj']['getVolumeStatistics()string']
      argsTuple: PredictiveLiquidityMiningV4DynamicArgs['tuple']['getVolumeStatistics()string']
      returns: PredictiveLiquidityMiningV4DynamicReturns['getVolumeStatistics()string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type PredictiveLiquidityMiningV4DynamicSignatures = keyof PredictiveLiquidityMiningV4DynamicTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PredictiveLiquidityMiningV4DynamicNonVoidMethodSignatures = keyof PredictiveLiquidityMiningV4DynamicTypes['methods'] extends infer T ? T extends keyof PredictiveLiquidityMiningV4DynamicTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PredictiveLiquidityMiningV4Dynamic smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PredictiveLiquidityMiningV4DynamicSignatures> = PredictiveLiquidityMiningV4DynamicTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PredictiveLiquidityMiningV4Dynamic smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PredictiveLiquidityMiningV4DynamicSignatures> = PredictiveLiquidityMiningV4DynamicTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type PredictiveLiquidityMiningV4DynamicCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PredictiveLiquidityMiningV4DynamicDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PredictiveLiquidityMiningV4DynamicCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PredictiveLiquidityMiningV4Dynamic smart contract
 */
export abstract class PredictiveLiquidityMiningV4DynamicParamsFactory {
  /**
   * Constructs a no op call for the createPool(string,string,string,string)string ABI method
   *
   * Create a new liquidity pool with AI prediction capabilities
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['createPool(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolName, params.args.initialApy, params.args.riskLevel, params.args.minStake],
    }
  }
  /**
   * Constructs a no op call for the stakeInPool(string,string,string)string ABI method
   *
   * Stake tokens in a specific pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stakeInPool(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['stakeInPool(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stakeInPool(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the unstakeFromPool(string,string,string)string ABI method
   *
   * Unstake tokens from a specific pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unstakeFromPool(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['unstakeFromPool(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unstakeFromPool(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the emergencyWithdraw(string,string)string ABI method
   *
   * Emergency withdraw (with potential penalties)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdraw(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyWithdraw(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyWithdraw(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getUserStake(string,string)string ABI method
   *
   * Get user's staked amount in a pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStake(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserStake(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStake(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the updateAIPrediction(string,string,string,string)string ABI method
   *
   * Update AI prediction for a pool (admin/oracle function)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAiPrediction(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['updateAIPrediction(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAIPrediction(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.newApy, params.args.confidence, params.args.timeframe],
    }
  }
  /**
   * Constructs a no op call for the submitTrainingData(string,string,string,string)string ABI method
   *
   * Submit training data for AI models (Data-Donor DAO)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitTrainingData(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['submitTrainingData(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submitTrainingData(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contributor, params.args.dataType, params.args.dataHash, params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the voteOnProposal(string,bool,string)string ABI method
   *
   * Vote on DAO governance proposals
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteOnProposal(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['voteOnProposal(string,bool,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'voteOnProposal(string,bool,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.vote, params.args.voter],
    }
  }
  /**
   * Constructs a no op call for the calculateUserRiskScore(string,string,string)string ABI method
   *
   * Calculate user's risk score based on behavior and portfolio
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateUserRiskScore(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['calculateUserRiskScore(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateUserRiskScore(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.portfolioValue, params.args.tradingFrequency],
    }
  }
  /**
   * Constructs a no op call for the claimRewards(string,string)string ABI method
   *
   * Claim rewards with AI-enhanced calculations
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRewards(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['claimRewards(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimRewards(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getPoolStats(string)string ABI method
   *
   * Get pool statistics with AI predictions
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolStats(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolStats(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolStats(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the emergencyPause()string ABI method
   *
   * Emergency pause mechanism for security
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyPause(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyPause()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyPause()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserPortfolio(string)string ABI method
   *
   * Get user portfolio summary
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserPortfolio(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserPortfolio(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserPortfolio(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getPlatformAnalytics()string ABI method
   *
   * Get platform analytics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformAnalytics(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPlatformAnalytics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlatformAnalytics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getAllTransactions()string ABI method
   *
   * Get all transactions on the platform
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAllTransactions(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getAllTransactions()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAllTransactions()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTransactionSummary()string ABI method
   *
   * Get transaction summary statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionSummary(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionSummary()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionSummary()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserTransactions(string)string ABI method
   *
   * Get all transactions for a specific user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserTransactions(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserTransactions(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserTransactions(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getPoolTransactions(string)string ABI method
   *
   * Get all transactions for a specific pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolTransactions(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolTransactions(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolTransactions(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getTransactionsByType(string)string ABI method
   *
   * Get transactions filtered by type
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionsByType(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByType(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionsByType(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txType],
    }
  }
  /**
   * Constructs a no op call for the getTransactionsByDateRange(string,string)string ABI method
   *
   * Get transactions within a date range
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionsByDateRange(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByDateRange(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionsByDateRange(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.startDate, params.args.endDate],
    }
  }
  /**
   * Constructs a no op call for the getTransactionDetails(string)string ABI method
   *
   * Get detailed information about a specific transaction
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionDetails(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionDetails(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionDetails(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txId],
    }
  }
  /**
   * Constructs a no op call for the getTransactionAnalytics()string ABI method
   *
   * Get transaction history for analytics dashboard
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTransactionAnalytics(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionAnalytics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTransactionAnalytics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPendingTransactions(string)string ABI method
   *
   * Get pending/failed transactions for user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPendingTransactions(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPendingTransactions(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPendingTransactions(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getVolumeStatistics()string ABI method
   *
   * Get transaction volume statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVolumeStatistics(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getVolumeStatistics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getVolumeStatistics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PredictiveLiquidityMiningV4Dynamic smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PredictiveLiquidityMiningV4DynamicFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PredictiveLiquidityMiningV4DynamicFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PredictiveLiquidityMiningV4DynamicClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PredictiveLiquidityMiningV4DynamicClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PredictiveLiquidityMiningV4Dynamic smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PredictiveLiquidityMiningV4DynamicDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PredictiveLiquidityMiningV4DynamicClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMiningV4Dynamic smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMiningV4Dynamic smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMiningV4Dynamic smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PredictiveLiquidityMiningV4DynamicClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PredictiveLiquidityMiningV4Dynamic smart contract
 */
export class PredictiveLiquidityMiningV4DynamicClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PredictiveLiquidityMiningV4DynamicClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PredictiveLiquidityMiningV4Dynamic app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PredictiveLiquidityMiningV4DynamicClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PredictiveLiquidityMiningV4DynamicNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PredictiveLiquidityMiningV4DynamicClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PredictiveLiquidityMiningV4DynamicClient> {
    return new PredictiveLiquidityMiningV4DynamicClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PredictiveLiquidityMiningV4DynamicClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PredictiveLiquidityMiningV4DynamicClient> {
    return new PredictiveLiquidityMiningV4DynamicClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV4Dynamic smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stakeInPool: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unstakeFromPool: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.unstakeFromPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `emergencyWithdraw(string,string)string` ABI method.
     *
     * Emergency withdraw (with potential penalties)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdraw: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyWithdraw(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getUserStake(string,string)string` ABI method.
     *
     * Get user's staked amount in a pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStake: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserStake(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAiPrediction: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.updateAiPrediction(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitTrainingData: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.submitTrainingData(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteOnProposal: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.voteOnProposal(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateUserRiskScore: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.calculateUserRiskScore(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRewards: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolStats: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyPause: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserPortfolio: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getUserPortfolio(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformAnalytics: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPlatformAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAllTransactions: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getAllTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionSummary: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionSummary(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getUserTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserTransactions: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getUserTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolTransactions: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPoolTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Get transactions filtered by type
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionsByType: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionsByType(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionsByDateRange(string,string)string` ABI method.
     *
     * Get transactions within a date range
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionsByDateRange: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByDateRange(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionsByDateRange(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Get detailed information about a specific transaction
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionDetails: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionDetails(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Get transaction history for analytics dashboard
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTransactionAnalytics: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPendingTransactions(string)string` ABI method.
     *
     * Get pending/failed transactions for user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPendingTransactions: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPendingTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPendingTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get transaction volume statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVolumeStatistics: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getVolumeStatistics(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV4Dynamic smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stakeInPool: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unstakeFromPool: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.unstakeFromPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `emergencyWithdraw(string,string)string` ABI method.
     *
     * Emergency withdraw (with potential penalties)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdraw: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyWithdraw(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getUserStake(string,string)string` ABI method.
     *
     * Get user's staked amount in a pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStake: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserStake(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAiPrediction: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.updateAiPrediction(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitTrainingData: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.submitTrainingData(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteOnProposal: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.voteOnProposal(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateUserRiskScore: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.calculateUserRiskScore(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRewards: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolStats: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyPause: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserPortfolio: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getUserPortfolio(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformAnalytics: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPlatformAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAllTransactions: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getAllTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionSummary: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionSummary(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getUserTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserTransactions: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getUserTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolTransactions: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPoolTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Get transactions filtered by type
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionsByType: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionsByType(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionsByDateRange(string,string)string` ABI method.
     *
     * Get transactions within a date range
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionsByDateRange: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByDateRange(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionsByDateRange(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Get detailed information about a specific transaction
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionDetails: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionDetails(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Get transaction history for analytics dashboard
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTransactionAnalytics: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionAnalytics(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPendingTransactions(string)string` ABI method.
     *
     * Get pending/failed transactions for user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPendingTransactions: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPendingTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPendingTransactions(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get transaction volume statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVolumeStatistics: (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getVolumeStatistics(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV4Dynamic smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['createPool(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['createPool(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stakeInPool: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['stakeInPool(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.stakeInPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['stakeInPool(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `unstakeFromPool(string,string,string)string` ABI method.
     *
     * Unstake tokens from a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unstakeFromPool: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['unstakeFromPool(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.unstakeFromPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['unstakeFromPool(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `emergencyWithdraw(string,string)string` ABI method.
     *
     * Emergency withdraw (with potential penalties)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdraw: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyWithdraw(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.emergencyWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['emergencyWithdraw(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getUserStake(string,string)string` ABI method.
     *
     * Get user's staked amount in a pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStake: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserStake(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getUserStake(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getUserStake(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAiPrediction: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['updateAIPrediction(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.updateAiPrediction(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['updateAIPrediction(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitTrainingData: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['submitTrainingData(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.submitTrainingData(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['submitTrainingData(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteOnProposal: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['voteOnProposal(string,bool,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.voteOnProposal(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['voteOnProposal(string,bool,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateUserRiskScore: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['calculateUserRiskScore(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.calculateUserRiskScore(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['calculateUserRiskScore(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRewards: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['claimRewards(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.claimRewards(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['claimRewards(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolStats: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolStats(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPoolStats(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getPoolStats(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyPause: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyPause()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.emergencyPause(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['emergencyPause()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserPortfolio: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserPortfolio(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getUserPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getUserPortfolio(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformAnalytics: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPlatformAnalytics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPlatformAnalytics(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getPlatformAnalytics()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getAllTransactions()string` ABI method.
     *
     * Get all transactions on the platform
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAllTransactions: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getAllTransactions()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getAllTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getAllTransactions()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionSummary()string` ABI method.
     *
     * Get transaction summary statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionSummary: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionSummary()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionSummary(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getTransactionSummary()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getUserTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserTransactions: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserTransactions(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getUserTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getUserTransactions(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPoolTransactions(string)string` ABI method.
     *
     * Get all transactions for a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolTransactions: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolTransactions(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPoolTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getPoolTransactions(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionsByType(string)string` ABI method.
     *
     * Get transactions filtered by type
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionsByType: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByType(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionsByType(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getTransactionsByType(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionsByDateRange(string,string)string` ABI method.
     *
     * Get transactions within a date range
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionsByDateRange: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByDateRange(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionsByDateRange(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getTransactionsByDateRange(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionDetails(string)string` ABI method.
     *
     * Get detailed information about a specific transaction
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionDetails: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionDetails(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionDetails(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getTransactionDetails(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getTransactionAnalytics()string` ABI method.
     *
     * Get transaction history for analytics dashboard
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTransactionAnalytics: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionAnalytics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getTransactionAnalytics(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getTransactionAnalytics()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getPendingTransactions(string)string` ABI method.
     *
     * Get pending/failed transactions for user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPendingTransactions: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPendingTransactions(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getPendingTransactions(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getPendingTransactions(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMiningV4Dynamic smart contract using the `getVolumeStatistics()string` ABI method.
     *
     * Get transaction volume statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVolumeStatistics: async (params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getVolumeStatistics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningV4DynamicParamsFactory.getVolumeStatistics(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningV4DynamicReturns['getVolumeStatistics()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PredictiveLiquidityMiningV4DynamicClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PredictiveLiquidityMiningV4Dynamic app
   */
  state = {
  }

  public newGroup(): PredictiveLiquidityMiningV4DynamicComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool(string,string,string,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      createPool(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('createPool(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a stakeInPool(string,string,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      stakeInPool(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stakeInPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('stakeInPool(string,string,string)string', v))
        return this
      },
      /**
       * Add a unstakeFromPool(string,string,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      unstakeFromPool(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['unstakeFromPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unstakeFromPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('unstakeFromPool(string,string,string)string', v))
        return this
      },
      /**
       * Add a emergencyWithdraw(string,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      emergencyWithdraw(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyWithdraw(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdraw(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergencyWithdraw(string,string)string', v))
        return this
      },
      /**
       * Add a getUserStake(string,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getUserStake(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserStake(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStake(string,string)string', v))
        return this
      },
      /**
       * Add a updateAIPrediction(string,string,string,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      updateAiPrediction(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAiPrediction(params)))
        resultMappers.push((v) => client.decodeReturnValue('updateAIPrediction(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a submitTrainingData(string,string,string,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      submitTrainingData(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitTrainingData(params)))
        resultMappers.push((v) => client.decodeReturnValue('submitTrainingData(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a voteOnProposal(string,bool,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      voteOnProposal(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteOnProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('voteOnProposal(string,bool,string)string', v))
        return this
      },
      /**
       * Add a calculateUserRiskScore(string,string,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      calculateUserRiskScore(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateUserRiskScore(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateUserRiskScore(string,string,string)string', v))
        return this
      },
      /**
       * Add a claimRewards(string,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      claimRewards(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('claimRewards(string,string)string', v))
        return this
      },
      /**
       * Add a getPoolStats(string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getPoolStats(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolStats(string)string', v))
        return this
      },
      /**
       * Add a emergencyPause()string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      emergencyPause(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyPause(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergencyPause()string', v))
        return this
      },
      /**
       * Add a getUserPortfolio(string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getUserPortfolio(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserPortfolio(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserPortfolio(string)string', v))
        return this
      },
      /**
       * Add a getPlatformAnalytics()string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getPlatformAnalytics(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformAnalytics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlatformAnalytics()string', v))
        return this
      },
      /**
       * Add a getAllTransactions()string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getAllTransactions(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getAllTransactions()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAllTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAllTransactions()string', v))
        return this
      },
      /**
       * Add a getTransactionSummary()string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getTransactionSummary(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionSummary()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionSummary(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionSummary()string', v))
        return this
      },
      /**
       * Add a getUserTransactions(string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getUserTransactions(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserTransactions(string)string', v))
        return this
      },
      /**
       * Add a getPoolTransactions(string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getPoolTransactions(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolTransactions(string)string', v))
        return this
      },
      /**
       * Add a getTransactionsByType(string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getTransactionsByType(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByType(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionsByType(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionsByType(string)string', v))
        return this
      },
      /**
       * Add a getTransactionsByDateRange(string,string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getTransactionsByDateRange(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByDateRange(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionsByDateRange(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionsByDateRange(string,string)string', v))
        return this
      },
      /**
       * Add a getTransactionDetails(string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getTransactionDetails(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionDetails(string)string', v))
        return this
      },
      /**
       * Add a getTransactionAnalytics()string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getTransactionAnalytics(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTransactionAnalytics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTransactionAnalytics()string', v))
        return this
      },
      /**
       * Add a getPendingTransactions(string)string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getPendingTransactions(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPendingTransactions(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPendingTransactions(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPendingTransactions(string)string', v))
        return this
      },
      /**
       * Add a getVolumeStatistics()string method call against the PredictiveLiquidityMiningV4Dynamic contract
       */
      getVolumeStatistics(params: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getVolumeStatistics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVolumeStatistics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getVolumeStatistics()string', v))
        return this
      },
      /**
       * Add a clear state call to the PredictiveLiquidityMiningV4Dynamic contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PredictiveLiquidityMiningV4DynamicComposer
  }
}
export type PredictiveLiquidityMiningV4DynamicComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool(string,string,string,string)string ABI method.
   *
   * Create a new liquidity pool with AI prediction capabilities
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['createPool(string,string,string,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['createPool(string,string,string,string)string'] | undefined]>

  /**
   * Calls the stakeInPool(string,string,string)string ABI method.
   *
   * Stake tokens in a specific pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeInPool(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['stakeInPool(string,string,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['stakeInPool(string,string,string)string'] | undefined]>

  /**
   * Calls the unstakeFromPool(string,string,string)string ABI method.
   *
   * Unstake tokens from a specific pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstakeFromPool(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['unstakeFromPool(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['unstakeFromPool(string,string,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['unstakeFromPool(string,string,string)string'] | undefined]>

  /**
   * Calls the emergencyWithdraw(string,string)string ABI method.
   *
   * Emergency withdraw (with potential penalties)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdraw(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyWithdraw(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyWithdraw(string,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['emergencyWithdraw(string,string)string'] | undefined]>

  /**
   * Calls the getUserStake(string,string)string ABI method.
   *
   * Get user's staked amount in a pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStake(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserStake(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserStake(string,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getUserStake(string,string)string'] | undefined]>

  /**
   * Calls the updateAIPrediction(string,string,string,string)string ABI method.
   *
   * Update AI prediction for a pool (admin/oracle function)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAiPrediction(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['updateAIPrediction(string,string,string,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['updateAIPrediction(string,string,string,string)string'] | undefined]>

  /**
   * Calls the submitTrainingData(string,string,string,string)string ABI method.
   *
   * Submit training data for AI models (Data-Donor DAO)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitTrainingData(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['submitTrainingData(string,string,string,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['submitTrainingData(string,string,string,string)string'] | undefined]>

  /**
   * Calls the voteOnProposal(string,bool,string)string ABI method.
   *
   * Vote on DAO governance proposals
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOnProposal(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['voteOnProposal(string,bool,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['voteOnProposal(string,bool,string)string'] | undefined]>

  /**
   * Calls the calculateUserRiskScore(string,string,string)string ABI method.
   *
   * Calculate user's risk score based on behavior and portfolio
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateUserRiskScore(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['calculateUserRiskScore(string,string,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['calculateUserRiskScore(string,string,string)string'] | undefined]>

  /**
   * Calls the claimRewards(string,string)string ABI method.
   *
   * Claim rewards with AI-enhanced calculations
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['claimRewards(string,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['claimRewards(string,string)string'] | undefined]>

  /**
   * Calls the getPoolStats(string)string ABI method.
   *
   * Get pool statistics with AI predictions
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolStats(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolStats(string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getPoolStats(string)string'] | undefined]>

  /**
   * Calls the emergencyPause()string ABI method.
   *
   * Emergency pause mechanism for security
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyPause(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['emergencyPause()string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['emergencyPause()string'] | undefined]>

  /**
   * Calls the getUserPortfolio(string)string ABI method.
   *
   * Get user portfolio summary
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserPortfolio(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserPortfolio(string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getUserPortfolio(string)string'] | undefined]>

  /**
   * Calls the getPlatformAnalytics()string ABI method.
   *
   * Get platform analytics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformAnalytics(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPlatformAnalytics()string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getPlatformAnalytics()string'] | undefined]>

  /**
   * Calls the getAllTransactions()string ABI method.
   *
   * Get all transactions on the platform
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAllTransactions(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getAllTransactions()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getAllTransactions()string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getAllTransactions()string'] | undefined]>

  /**
   * Calls the getTransactionSummary()string ABI method.
   *
   * Get transaction summary statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionSummary(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionSummary()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionSummary()string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getTransactionSummary()string'] | undefined]>

  /**
   * Calls the getUserTransactions(string)string ABI method.
   *
   * Get all transactions for a specific user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserTransactions(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getUserTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getUserTransactions(string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getUserTransactions(string)string'] | undefined]>

  /**
   * Calls the getPoolTransactions(string)string ABI method.
   *
   * Get all transactions for a specific pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolTransactions(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPoolTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPoolTransactions(string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getPoolTransactions(string)string'] | undefined]>

  /**
   * Calls the getTransactionsByType(string)string ABI method.
   *
   * Get transactions filtered by type
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionsByType(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByType(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByType(string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getTransactionsByType(string)string'] | undefined]>

  /**
   * Calls the getTransactionsByDateRange(string,string)string ABI method.
   *
   * Get transactions within a date range
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionsByDateRange(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionsByDateRange(string,string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionsByDateRange(string,string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getTransactionsByDateRange(string,string)string'] | undefined]>

  /**
   * Calls the getTransactionDetails(string)string ABI method.
   *
   * Get detailed information about a specific transaction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionDetails(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionDetails(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionDetails(string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getTransactionDetails(string)string'] | undefined]>

  /**
   * Calls the getTransactionAnalytics()string ABI method.
   *
   * Get transaction history for analytics dashboard
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTransactionAnalytics(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getTransactionAnalytics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getTransactionAnalytics()string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getTransactionAnalytics()string'] | undefined]>

  /**
   * Calls the getPendingTransactions(string)string ABI method.
   *
   * Get pending/failed transactions for user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPendingTransactions(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getPendingTransactions(string)string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getPendingTransactions(string)string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getPendingTransactions(string)string'] | undefined]>

  /**
   * Calls the getVolumeStatistics()string ABI method.
   *
   * Get transaction volume statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVolumeStatistics(params?: CallParams<PredictiveLiquidityMiningV4DynamicArgs['obj']['getVolumeStatistics()string'] | PredictiveLiquidityMiningV4DynamicArgs['tuple']['getVolumeStatistics()string']>): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, PredictiveLiquidityMiningV4DynamicReturns['getVolumeStatistics()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PredictiveLiquidityMiningV4Dynamic smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PredictiveLiquidityMiningV4DynamicComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PredictiveLiquidityMiningV4DynamicComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PredictiveLiquidityMiningV4DynamicComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PredictiveLiquidityMiningV4DynamicComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PredictiveLiquidityMiningV4DynamicComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PredictiveLiquidityMiningV4DynamicComposerResults<TReturns>>
}
export type PredictiveLiquidityMiningV4DynamicComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

