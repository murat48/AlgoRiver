/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"PredictiveLiquidityMining","structs":{},"methods":[{"name":"createPool","args":[{"type":"string","name":"poolName"},{"type":"string","name":"initialAPY"},{"type":"string","name":"riskLevel"},{"type":"string","name":"minStake"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new liquidity pool with AI prediction capabilities","events":[],"recommendations":{}},{"name":"stakeInPool","args":[{"type":"string","name":"poolId"},{"type":"string","name":"amount"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Stake tokens in a specific pool","events":[],"recommendations":{}},{"name":"updateAIPrediction","args":[{"type":"string","name":"poolId"},{"type":"string","name":"newAPY"},{"type":"string","name":"confidence"},{"type":"string","name":"timeframe"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update AI prediction for a pool (admin/oracle function)","events":[],"recommendations":{}},{"name":"submitTrainingData","args":[{"type":"string","name":"contributor"},{"type":"string","name":"dataType"},{"type":"string","name":"dataHash"},{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Submit training data for AI models (Data-Donor DAO)","events":[],"recommendations":{}},{"name":"voteOnProposal","args":[{"type":"string","name":"proposalId"},{"type":"bool","name":"vote"},{"type":"string","name":"voter"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Vote on DAO governance proposals","events":[],"recommendations":{}},{"name":"calculateUserRiskScore","args":[{"type":"string","name":"userAddress"},{"type":"string","name":"portfolioValue"},{"type":"string","name":"tradingFrequency"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Calculate user's risk score based on behavior and portfolio","events":[],"recommendations":{}},{"name":"claimRewards","args":[{"type":"string","name":"userAddress"},{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Claim rewards with AI-enhanced calculations","events":[],"recommendations":{}},{"name":"getPoolStats","args":[{"type":"string","name":"poolId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get pool statistics with AI predictions","events":[],"recommendations":{}},{"name":"emergencyPause","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency pause mechanism for security","events":[],"recommendations":{}},{"name":"getUserPortfolio","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user portfolio summary","events":[],"recommendations":{}},{"name":"getPlatformAnalytics","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get platform analytics","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Predictive Liquidity Mining Platform Smart Contract\nFeatures: AI-powered predictions, dynamic rewards, risk scoring, Data-Donor DAO","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[112,282,312,388,418,454,496,537,585,633,675],"errorMessage":"OnCompletion is not NoOp"},{"pc":[728],"errorMessage":"can only call when creating"},{"pc":[115,285,315,391,421,457,499,540,588,636,678],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmAgQVH3x1BVBvb2wgMRtBArmCCwTDuZIqBJbOq6kE2EIfHQRsZBJIBDDGH+8EkOzJDgRjt0QlBN36nygEDQUdegT7C05jBMGJNPs2GgCOCwI1AgsB2wGrAYIBWAE0ARYAygCsAAIjQzEZFEQxGESAnQEVH3x1AJdQbGF0Zm9ybSBBbmFseXRpY3M6IFRvdGFsIHBvb2xzOiA0NywgQWN0aXZlIG1pbmVyczogMSwyMzQsIFRvdGFsIHJld2FyZHMgZGlzdHJpYnV0ZWQ6IDEyNSwwMDAgdG9rZW5zLCBBdmVyYWdlIEFQWTogMTIuNSUsIEFJIHByZWRpY3Rpb24gYWNjdXJhY3k6IDg3LjMlsCJDMRkURDEYRDYaAVcCAIgEyUkVFlcGAkxQKExQsCJDMRkURDEYRIBAFR98dQA6UGxhdGZvcm0gcGF1c2VkIGZvciBtYWludGVuYW5jZS4gQWxsIG9wZXJhdGlvbnMgc3VzcGVuZGVkLrAiQzEZFEQxGEQ2GgFXAgCIBABJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIA3RJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIAu1JFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgIjUzYaA1cCAIgCfkkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgBkUkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgBE0kVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCAIgAo0kVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCAIgAGUkVFlcGAkxQKExQsCJDMRlA/ZYxGBREIkOKBAEpi/xQgA4gY3JlYXRlZCB3aXRoIFCL/VCAEyUgQVBZLCByaXNrIGxldmVsOiBQi/5QgBEsIG1pbmltdW0gc3Rha2U6IFCL/1CACyBtaWNyb0FsZ29zUImKAwGAFFN1Y2Nlc3NmdWxseSBzdGFrZWQgi/5QgBQgbWljcm9BbGdvcyBpbiBwb29sIFCL/VCACSBieSB1c2VyIFCL/1CJigQBKYv8UIAYIEFJIHByZWRpY3Rpb24gdXBkYXRlZDogUIv9UIALJSBBUFkgd2l0aCBQi/5QgBElIGNvbmZpZGVuY2UgZm9yIFCL/1CJigQBi/2AC21hcmtldF9kYXRhEkEAZYADMTAwgBJEYXRhIHN1Ym1pdHRlZCBieSCL/FCACiBmb3IgcG9vbCBQi/9QgA0uIERhdGEgaGFzaDogUIv+UIAVLiBHb3Zlcm5hbmNlIHJld2FyZDogUExQgAggdG9rZW5zLlCJi/2ADmxpcXVpZGl0eV9kYXRhEkEACIADMTUwQv+Ci/2ADXVzZXJfYmVoYXZpb3ISQQAIgAMyMDBC/2WAAjUwQv9eigMBi/5BADKAA0ZPUoAWVm90ZSBjYXN0IG9uIHByb3Bvc2FsIIv9UIAEIGJ5IFCL/1CAAjogUExQiYAHQUdBSU5TVEL/x4oDAYAPUmlzayBzY29yZSBmb3Igi/1QgCI6IDY1LzEwMCBiYXNlZCBvbiBwb3J0Zm9saW8gdmFsdWUgUIv+UIAXIGFuZCB0cmFkaW5nIGZyZXF1ZW5jeSBQi/9QiYoCAYv+gAkgY2xhaW1lZCBQgAMxMjBQgBIgdG9rZW5zIGZyb20gcG9vbCBQi/9QgDUuIFJld2FyZHMgY2FsY3VsYXRlZCB1c2luZyBBSS1wb3dlcmVkIGR5bmFtaWMgc3lzdGVtLlCJigEBKYv/UIBUOiBDdXJyZW50IEFQWSAxNS41JSwgUHJlZGljdGVkIEFQWSAxOC4yJSAoODclIGNvbmZpZGVuY2UpLCBUVkw6IDEsNTAwLDAwMCBtaWNyb0FsZ29zUImKAQGADlBvcnRmb2xpbyBmb3Igi/9QgEg6IEFjdGl2ZSBwb3NpdGlvbnMgdHJhY2tlZCwgcmV3YXJkcyBhdmFpbGFibGUsIHJpc2sgYXNzZXNzbWVudCBjb21wbGV0ZWRQiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PredictiveLiquidityMining contract
 */
export type PredictiveLiquidityMiningArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createPool(string,string,string,string)string': {
      poolName: string
      initialApy: string
      riskLevel: string
      minStake: string
    }
    'stakeInPool(string,string,string)string': {
      poolId: string
      amount: string
      userAddress: string
    }
    'updateAIPrediction(string,string,string,string)string': {
      poolId: string
      newApy: string
      confidence: string
      timeframe: string
    }
    'submitTrainingData(string,string,string,string)string': {
      contributor: string
      dataType: string
      dataHash: string
      poolId: string
    }
    'voteOnProposal(string,bool,string)string': {
      proposalId: string
      vote: boolean
      voter: string
    }
    'calculateUserRiskScore(string,string,string)string': {
      userAddress: string
      portfolioValue: string
      tradingFrequency: string
    }
    'claimRewards(string,string)string': {
      userAddress: string
      poolId: string
    }
    'getPoolStats(string)string': {
      poolId: string
    }
    'emergencyPause()string': Record<string, never>
    'getUserPortfolio(string)string': {
      userAddress: string
    }
    'getPlatformAnalytics()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createPool(string,string,string,string)string': [poolName: string, initialApy: string, riskLevel: string, minStake: string]
    'stakeInPool(string,string,string)string': [poolId: string, amount: string, userAddress: string]
    'updateAIPrediction(string,string,string,string)string': [poolId: string, newApy: string, confidence: string, timeframe: string]
    'submitTrainingData(string,string,string,string)string': [contributor: string, dataType: string, dataHash: string, poolId: string]
    'voteOnProposal(string,bool,string)string': [proposalId: string, vote: boolean, voter: string]
    'calculateUserRiskScore(string,string,string)string': [userAddress: string, portfolioValue: string, tradingFrequency: string]
    'claimRewards(string,string)string': [userAddress: string, poolId: string]
    'getPoolStats(string)string': [poolId: string]
    'emergencyPause()string': []
    'getUserPortfolio(string)string': [userAddress: string]
    'getPlatformAnalytics()string': []
  }
}

/**
 * The return type for each method
 */
export type PredictiveLiquidityMiningReturns = {
  'createPool(string,string,string,string)string': string
  'stakeInPool(string,string,string)string': string
  'updateAIPrediction(string,string,string,string)string': string
  'submitTrainingData(string,string,string,string)string': string
  'voteOnProposal(string,bool,string)string': string
  'calculateUserRiskScore(string,string,string)string': string
  'claimRewards(string,string)string': string
  'getPoolStats(string)string': string
  'emergencyPause()string': string
  'getUserPortfolio(string)string': string
  'getPlatformAnalytics()string': string
}

/**
 * Defines the types of available calls and state of the PredictiveLiquidityMining smart contract.
 */
export type PredictiveLiquidityMiningTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createPool(string,string,string,string)string' | 'createPool', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']
      returns: PredictiveLiquidityMiningReturns['createPool(string,string,string,string)string']
    }>
    & Record<'stakeInPool(string,string,string)string' | 'stakeInPool', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']
      returns: PredictiveLiquidityMiningReturns['stakeInPool(string,string,string)string']
    }>
    & Record<'updateAIPrediction(string,string,string,string)string' | 'updateAIPrediction', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['updateAIPrediction(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['updateAIPrediction(string,string,string,string)string']
      returns: PredictiveLiquidityMiningReturns['updateAIPrediction(string,string,string,string)string']
    }>
    & Record<'submitTrainingData(string,string,string,string)string' | 'submitTrainingData', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['submitTrainingData(string,string,string,string)string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['submitTrainingData(string,string,string,string)string']
      returns: PredictiveLiquidityMiningReturns['submitTrainingData(string,string,string,string)string']
    }>
    & Record<'voteOnProposal(string,bool,string)string' | 'voteOnProposal', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['voteOnProposal(string,bool,string)string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['voteOnProposal(string,bool,string)string']
      returns: PredictiveLiquidityMiningReturns['voteOnProposal(string,bool,string)string']
    }>
    & Record<'calculateUserRiskScore(string,string,string)string' | 'calculateUserRiskScore', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['calculateUserRiskScore(string,string,string)string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['calculateUserRiskScore(string,string,string)string']
      returns: PredictiveLiquidityMiningReturns['calculateUserRiskScore(string,string,string)string']
    }>
    & Record<'claimRewards(string,string)string' | 'claimRewards', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['claimRewards(string,string)string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['claimRewards(string,string)string']
      returns: PredictiveLiquidityMiningReturns['claimRewards(string,string)string']
    }>
    & Record<'getPoolStats(string)string' | 'getPoolStats', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']
      returns: PredictiveLiquidityMiningReturns['getPoolStats(string)string']
    }>
    & Record<'emergencyPause()string' | 'emergencyPause', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['emergencyPause()string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['emergencyPause()string']
      returns: PredictiveLiquidityMiningReturns['emergencyPause()string']
    }>
    & Record<'getUserPortfolio(string)string' | 'getUserPortfolio', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['getUserPortfolio(string)string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['getUserPortfolio(string)string']
      returns: PredictiveLiquidityMiningReturns['getUserPortfolio(string)string']
    }>
    & Record<'getPlatformAnalytics()string' | 'getPlatformAnalytics', {
      argsObj: PredictiveLiquidityMiningArgs['obj']['getPlatformAnalytics()string']
      argsTuple: PredictiveLiquidityMiningArgs['tuple']['getPlatformAnalytics()string']
      returns: PredictiveLiquidityMiningReturns['getPlatformAnalytics()string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type PredictiveLiquidityMiningSignatures = keyof PredictiveLiquidityMiningTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PredictiveLiquidityMiningNonVoidMethodSignatures = keyof PredictiveLiquidityMiningTypes['methods'] extends infer T ? T extends keyof PredictiveLiquidityMiningTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PredictiveLiquidityMining smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PredictiveLiquidityMiningSignatures> = PredictiveLiquidityMiningTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PredictiveLiquidityMining smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PredictiveLiquidityMiningSignatures> = PredictiveLiquidityMiningTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type PredictiveLiquidityMiningCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PredictiveLiquidityMiningDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PredictiveLiquidityMiningCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PredictiveLiquidityMining smart contract
 */
export abstract class PredictiveLiquidityMiningParamsFactory {
  /**
   * Constructs a no op call for the createPool(string,string,string,string)string ABI method
   *
   * Create a new liquidity pool with AI prediction capabilities
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<PredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolName, params.args.initialApy, params.args.riskLevel, params.args.minStake],
    }
  }
  /**
   * Constructs a no op call for the stakeInPool(string,string,string)string ABI method
   *
   * Stake tokens in a specific pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stakeInPool(params: CallParams<PredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stakeInPool(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.amount, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the updateAIPrediction(string,string,string,string)string ABI method
   *
   * Update AI prediction for a pool (admin/oracle function)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAiPrediction(params: CallParams<PredictiveLiquidityMiningArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['updateAIPrediction(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAIPrediction(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.newApy, params.args.confidence, params.args.timeframe],
    }
  }
  /**
   * Constructs a no op call for the submitTrainingData(string,string,string,string)string ABI method
   *
   * Submit training data for AI models (Data-Donor DAO)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitTrainingData(params: CallParams<PredictiveLiquidityMiningArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['submitTrainingData(string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submitTrainingData(string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contributor, params.args.dataType, params.args.dataHash, params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the voteOnProposal(string,bool,string)string ABI method
   *
   * Vote on DAO governance proposals
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteOnProposal(params: CallParams<PredictiveLiquidityMiningArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningArgs['tuple']['voteOnProposal(string,bool,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'voteOnProposal(string,bool,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.vote, params.args.voter],
    }
  }
  /**
   * Constructs a no op call for the calculateUserRiskScore(string,string,string)string ABI method
   *
   * Calculate user's risk score based on behavior and portfolio
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateUserRiskScore(params: CallParams<PredictiveLiquidityMiningArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['calculateUserRiskScore(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateUserRiskScore(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.portfolioValue, params.args.tradingFrequency],
    }
  }
  /**
   * Constructs a no op call for the claimRewards(string,string)string ABI method
   *
   * Claim rewards with AI-enhanced calculations
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRewards(params: CallParams<PredictiveLiquidityMiningArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['claimRewards(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimRewards(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getPoolStats(string)string ABI method
   *
   * Get pool statistics with AI predictions
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolStats(params: CallParams<PredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolStats(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the emergencyPause()string ABI method
   *
   * Emergency pause mechanism for security
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyPause(params: CallParams<PredictiveLiquidityMiningArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningArgs['tuple']['emergencyPause()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyPause()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserPortfolio(string)string ABI method
   *
   * Get user portfolio summary
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserPortfolio(params: CallParams<PredictiveLiquidityMiningArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getUserPortfolio(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserPortfolio(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getPlatformAnalytics()string ABI method
   *
   * Get platform analytics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformAnalytics(params: CallParams<PredictiveLiquidityMiningArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningArgs['tuple']['getPlatformAnalytics()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlatformAnalytics()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PredictiveLiquidityMining smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PredictiveLiquidityMiningFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PredictiveLiquidityMiningFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PredictiveLiquidityMiningClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PredictiveLiquidityMiningClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PredictiveLiquidityMining smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PredictiveLiquidityMiningDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PredictiveLiquidityMiningClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMining smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMining smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PredictiveLiquidityMining smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PredictiveLiquidityMiningClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PredictiveLiquidityMining smart contract
 */
export class PredictiveLiquidityMiningClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PredictiveLiquidityMiningClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PredictiveLiquidityMining app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PredictiveLiquidityMiningClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PredictiveLiquidityMiningNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PredictiveLiquidityMiningClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PredictiveLiquidityMiningClient> {
    return new PredictiveLiquidityMiningClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PredictiveLiquidityMiningClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PredictiveLiquidityMiningClient> {
    return new PredictiveLiquidityMiningClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMining smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stakeInPool: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAiPrediction: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.updateAiPrediction(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitTrainingData: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.submitTrainingData(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteOnProposal: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningArgs['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.voteOnProposal(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateUserRiskScore: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.calculateUserRiskScore(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRewards: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolStats: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyPause: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningArgs['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserPortfolio: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.getUserPortfolio(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformAnalytics: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningArgs['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PredictiveLiquidityMiningParamsFactory.getPlatformAnalytics(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMining smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stakeInPool: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.stakeInPool(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAiPrediction: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.updateAiPrediction(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitTrainingData: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.submitTrainingData(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteOnProposal: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningArgs['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.voteOnProposal(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateUserRiskScore: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.calculateUserRiskScore(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRewards: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolStats: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyPause: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningArgs['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.emergencyPause(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserPortfolio: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.getUserPortfolio(params))
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformAnalytics: (params: CallParams<PredictiveLiquidityMiningArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningArgs['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PredictiveLiquidityMiningParamsFactory.getPlatformAnalytics(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PredictiveLiquidityMining smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `createPool(string,string,string,string)string` ABI method.
     *
     * Create a new liquidity pool with AI prediction capabilities
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['createPool(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `stakeInPool(string,string,string)string` ABI method.
     *
     * Stake tokens in a specific pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stakeInPool: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.stakeInPool(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['stakeInPool(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `updateAIPrediction(string,string,string,string)string` ABI method.
     *
     * Update AI prediction for a pool (admin/oracle function)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAiPrediction: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['updateAIPrediction(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.updateAiPrediction(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['updateAIPrediction(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `submitTrainingData(string,string,string,string)string` ABI method.
     *
     * Submit training data for AI models (Data-Donor DAO)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitTrainingData: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['submitTrainingData(string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.submitTrainingData(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['submitTrainingData(string,string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `voteOnProposal(string,bool,string)string` ABI method.
     *
     * Vote on DAO governance proposals
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteOnProposal: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningArgs['tuple']['voteOnProposal(string,bool,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.voteOnProposal(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['voteOnProposal(string,bool,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `calculateUserRiskScore(string,string,string)string` ABI method.
     *
     * Calculate user's risk score based on behavior and portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateUserRiskScore: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['calculateUserRiskScore(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.calculateUserRiskScore(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['calculateUserRiskScore(string,string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `claimRewards(string,string)string` ABI method.
     *
     * Claim rewards with AI-enhanced calculations
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRewards: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['claimRewards(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.claimRewards(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['claimRewards(string,string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `getPoolStats(string)string` ABI method.
     *
     * Get pool statistics with AI predictions
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolStats: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.getPoolStats(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['getPoolStats(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `emergencyPause()string` ABI method.
     *
     * Emergency pause mechanism for security
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyPause: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningArgs['tuple']['emergencyPause()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.emergencyPause(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['emergencyPause()string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `getUserPortfolio(string)string` ABI method.
     *
     * Get user portfolio summary
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserPortfolio: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getUserPortfolio(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.getUserPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['getUserPortfolio(string)string'])}
    },

    /**
     * Makes a call to the PredictiveLiquidityMining smart contract using the `getPlatformAnalytics()string` ABI method.
     *
     * Get platform analytics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformAnalytics: async (params: CallParams<PredictiveLiquidityMiningArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningArgs['tuple']['getPlatformAnalytics()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PredictiveLiquidityMiningParamsFactory.getPlatformAnalytics(params))
      return {...result, return: result.return as unknown as (undefined | PredictiveLiquidityMiningReturns['getPlatformAnalytics()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PredictiveLiquidityMiningClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PredictiveLiquidityMining app
   */
  state = {
  }

  public newGroup(): PredictiveLiquidityMiningComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool(string,string,string,string)string method call against the PredictiveLiquidityMining contract
       */
      createPool(params: CallParams<PredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('createPool(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a stakeInPool(string,string,string)string method call against the PredictiveLiquidityMining contract
       */
      stakeInPool(params: CallParams<PredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stakeInPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('stakeInPool(string,string,string)string', v))
        return this
      },
      /**
       * Add a updateAIPrediction(string,string,string,string)string method call against the PredictiveLiquidityMining contract
       */
      updateAiPrediction(params: CallParams<PredictiveLiquidityMiningArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['updateAIPrediction(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAiPrediction(params)))
        resultMappers.push((v) => client.decodeReturnValue('updateAIPrediction(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a submitTrainingData(string,string,string,string)string method call against the PredictiveLiquidityMining contract
       */
      submitTrainingData(params: CallParams<PredictiveLiquidityMiningArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['submitTrainingData(string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitTrainingData(params)))
        resultMappers.push((v) => client.decodeReturnValue('submitTrainingData(string,string,string,string)string', v))
        return this
      },
      /**
       * Add a voteOnProposal(string,bool,string)string method call against the PredictiveLiquidityMining contract
       */
      voteOnProposal(params: CallParams<PredictiveLiquidityMiningArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningArgs['tuple']['voteOnProposal(string,bool,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteOnProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('voteOnProposal(string,bool,string)string', v))
        return this
      },
      /**
       * Add a calculateUserRiskScore(string,string,string)string method call against the PredictiveLiquidityMining contract
       */
      calculateUserRiskScore(params: CallParams<PredictiveLiquidityMiningArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['calculateUserRiskScore(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateUserRiskScore(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateUserRiskScore(string,string,string)string', v))
        return this
      },
      /**
       * Add a claimRewards(string,string)string method call against the PredictiveLiquidityMining contract
       */
      claimRewards(params: CallParams<PredictiveLiquidityMiningArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['claimRewards(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('claimRewards(string,string)string', v))
        return this
      },
      /**
       * Add a getPoolStats(string)string method call against the PredictiveLiquidityMining contract
       */
      getPoolStats(params: CallParams<PredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolStats(string)string', v))
        return this
      },
      /**
       * Add a emergencyPause()string method call against the PredictiveLiquidityMining contract
       */
      emergencyPause(params: CallParams<PredictiveLiquidityMiningArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningArgs['tuple']['emergencyPause()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyPause(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergencyPause()string', v))
        return this
      },
      /**
       * Add a getUserPortfolio(string)string method call against the PredictiveLiquidityMining contract
       */
      getUserPortfolio(params: CallParams<PredictiveLiquidityMiningArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getUserPortfolio(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserPortfolio(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserPortfolio(string)string', v))
        return this
      },
      /**
       * Add a getPlatformAnalytics()string method call against the PredictiveLiquidityMining contract
       */
      getPlatformAnalytics(params: CallParams<PredictiveLiquidityMiningArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningArgs['tuple']['getPlatformAnalytics()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformAnalytics(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlatformAnalytics()string', v))
        return this
      },
      /**
       * Add a clear state call to the PredictiveLiquidityMining contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PredictiveLiquidityMiningComposer
  }
}
export type PredictiveLiquidityMiningComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool(string,string,string,string)string ABI method.
   *
   * Create a new liquidity pool with AI prediction capabilities
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['createPool(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['createPool(string,string,string,string)string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['createPool(string,string,string,string)string'] | undefined]>

  /**
   * Calls the stakeInPool(string,string,string)string ABI method.
   *
   * Stake tokens in a specific pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeInPool(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['stakeInPool(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['stakeInPool(string,string,string)string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['stakeInPool(string,string,string)string'] | undefined]>

  /**
   * Calls the updateAIPrediction(string,string,string,string)string ABI method.
   *
   * Update AI prediction for a pool (admin/oracle function)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAiPrediction(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['updateAIPrediction(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['updateAIPrediction(string,string,string,string)string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['updateAIPrediction(string,string,string,string)string'] | undefined]>

  /**
   * Calls the submitTrainingData(string,string,string,string)string ABI method.
   *
   * Submit training data for AI models (Data-Donor DAO)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitTrainingData(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['submitTrainingData(string,string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['submitTrainingData(string,string,string,string)string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['submitTrainingData(string,string,string,string)string'] | undefined]>

  /**
   * Calls the voteOnProposal(string,bool,string)string ABI method.
   *
   * Vote on DAO governance proposals
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOnProposal(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['voteOnProposal(string,bool,string)string'] | PredictiveLiquidityMiningArgs['tuple']['voteOnProposal(string,bool,string)string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['voteOnProposal(string,bool,string)string'] | undefined]>

  /**
   * Calls the calculateUserRiskScore(string,string,string)string ABI method.
   *
   * Calculate user's risk score based on behavior and portfolio
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateUserRiskScore(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['calculateUserRiskScore(string,string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['calculateUserRiskScore(string,string,string)string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['calculateUserRiskScore(string,string,string)string'] | undefined]>

  /**
   * Calls the claimRewards(string,string)string ABI method.
   *
   * Claim rewards with AI-enhanced calculations
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['claimRewards(string,string)string'] | PredictiveLiquidityMiningArgs['tuple']['claimRewards(string,string)string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['claimRewards(string,string)string'] | undefined]>

  /**
   * Calls the getPoolStats(string)string ABI method.
   *
   * Get pool statistics with AI predictions
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolStats(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['getPoolStats(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getPoolStats(string)string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['getPoolStats(string)string'] | undefined]>

  /**
   * Calls the emergencyPause()string ABI method.
   *
   * Emergency pause mechanism for security
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyPause(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['emergencyPause()string'] | PredictiveLiquidityMiningArgs['tuple']['emergencyPause()string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['emergencyPause()string'] | undefined]>

  /**
   * Calls the getUserPortfolio(string)string ABI method.
   *
   * Get user portfolio summary
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserPortfolio(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['getUserPortfolio(string)string'] | PredictiveLiquidityMiningArgs['tuple']['getUserPortfolio(string)string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['getUserPortfolio(string)string'] | undefined]>

  /**
   * Calls the getPlatformAnalytics()string ABI method.
   *
   * Get platform analytics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformAnalytics(params?: CallParams<PredictiveLiquidityMiningArgs['obj']['getPlatformAnalytics()string'] | PredictiveLiquidityMiningArgs['tuple']['getPlatformAnalytics()string']>): PredictiveLiquidityMiningComposer<[...TReturns, PredictiveLiquidityMiningReturns['getPlatformAnalytics()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PredictiveLiquidityMining smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PredictiveLiquidityMiningComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PredictiveLiquidityMiningComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PredictiveLiquidityMiningComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PredictiveLiquidityMiningComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PredictiveLiquidityMiningComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PredictiveLiquidityMiningComposerResults<TReturns>>
}
export type PredictiveLiquidityMiningComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

