/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"TrailingStopLoss","structs":{},"methods":[{"name":"createTrailingOrder","args":[{"type":"string","name":"assetId"},{"type":"string","name":"amount"},{"type":"string","name":"trailDistance"},{"type":"string","name":"initialPrice"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new trailing stop-loss order","events":[],"recommendations":{}},{"name":"updateStopPrice","args":[{"type":"string","name":"orderId"},{"type":"string","name":"currentMarketPrice"},{"type":"string","name":"trailDistance"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update stop price based on current market price","events":[],"recommendations":{}},{"name":"checkExecutionCondition","args":[{"type":"string","name":"orderId"},{"type":"string","name":"currentPrice"},{"type":"string","name":"stopPrice"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Check if order should be executed based on current price","events":[],"recommendations":{}},{"name":"executeTrailingOrder","args":[{"type":"string","name":"orderId"},{"type":"string","name":"assetId"},{"type":"string","name":"amount"},{"type":"string","name":"executionPrice"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Execute trailing stop-loss order","events":[],"recommendations":{}},{"name":"cancelTrailingOrder","args":[{"type":"string","name":"orderId"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Cancel an active trailing order","events":[],"recommendations":{}},{"name":"getOrderDetails","args":[{"type":"string","name":"orderId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get order details and current status","events":[],"recommendations":{}},{"name":"createBracketOrder","args":[{"type":"string","name":"assetId"},{"type":"string","name":"buyAmount"},{"type":"string","name":"buyPrice"},{"type":"string","name":"trailDistance"},{"type":"string","name":"takeProfitPrice"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create bracket order (buy + trailing stop + take profit)","events":[],"recommendations":{}},{"name":"updateTrailDistance","args":[{"type":"string","name":"orderId"},{"type":"string","name":"newTrailDistance"},{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update trail distance for existing order","events":[],"recommendations":{}},{"name":"getUserOrders","args":[{"type":"string","name":"userAddress"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user's active orders","events":[],"recommendations":{}},{"name":"setTimeBasedTrail","args":[{"type":"string","name":"orderId"},{"type":"string","name":"phase1Duration"},{"type":"string","name":"phase1Trail"},{"type":"string","name":"phase2Duration"},{"type":"string","name":"phase2Trail"},{"type":"string","name":"phase3Trail"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Set time-based trail adjustments","events":[],"recommendations":{}},{"name":"getPlatformStats","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get platform statistics","events":[],"recommendations":{}},{"name":"emergencyPauseOrders","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency pause all orders","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Trailing Stop-Loss Smart Contract for Algorand DeFi\nProvides automated stop-loss orders with trailing functionality","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[152,238,375,435,465,507,567,597,633,687,729,771],"errorMessage":"OnCompletion is not NoOp"},{"pc":[830],"errorMessage":"can only call when creating"},{"pc":[155,241,378,438,468,510,570,600,636,690,732,774],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMQogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1ICJPcmRlciAiICJfIiAiVFNMXyIgIl9PUkRFUiIgIiwgVHJhaWwgIiAiIGF0ICIgImg6ICIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo3CiAgICAvLyBleHBvcnQgY2xhc3MgVHJhaWxpbmdTdG9wTG9zcyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxNwogICAgcHVzaGJ5dGVzcyAweDY3NGU1YTM1IDB4NWM3YTYzNWIgMHhmMzE5NmJiOCAweDk1MDIwYjllIDB4MGZlOTlkNDYgMHgzNzFhYmJjMCAweDE1ZWM4ODc5IDB4YTE0Y2QwZWQgMHg3OTJiNDdjYiAweGQzNzMwNzZjIDB4MTEyMzdiNDggMHhiMTcxYzhhNiAvLyBtZXRob2QgImNyZWF0ZVRyYWlsaW5nT3JkZXIoc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZylzdHJpbmciLCBtZXRob2QgInVwZGF0ZVN0b3BQcmljZShzdHJpbmcsc3RyaW5nLHN0cmluZylzdHJpbmciLCBtZXRob2QgImNoZWNrRXhlY3V0aW9uQ29uZGl0aW9uKHN0cmluZyxzdHJpbmcsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAiZXhlY3V0ZVRyYWlsaW5nT3JkZXIoc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZylzdHJpbmciLCBtZXRob2QgImNhbmNlbFRyYWlsaW5nT3JkZXIoc3RyaW5nLHN0cmluZylzdHJpbmciLCBtZXRob2QgImdldE9yZGVyRGV0YWlscyhzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJjcmVhdGVCcmFja2V0T3JkZXIoc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJ1cGRhdGVUcmFpbERpc3RhbmNlKHN0cmluZyxzdHJpbmcsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAiZ2V0VXNlck9yZGVycyhzdHJpbmcpc3RyaW5nIiwgbWV0aG9kICJzZXRUaW1lQmFzZWRUcmFpbChzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZylzdHJpbmciLCBtZXRob2QgImdldFBsYXRmb3JtU3RhdHMoKXN0cmluZyIsIG1ldGhvZCAiZW1lcmdlbmN5UGF1c2VPcmRlcnMoKXN0cmluZyIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlVHJhaWxpbmdPcmRlcl9yb3V0ZUAzIG1haW5fdXBkYXRlU3RvcFByaWNlX3JvdXRlQDQgbWFpbl9jaGVja0V4ZWN1dGlvbkNvbmRpdGlvbl9yb3V0ZUA1IG1haW5fZXhlY3V0ZVRyYWlsaW5nT3JkZXJfcm91dGVANiBtYWluX2NhbmNlbFRyYWlsaW5nT3JkZXJfcm91dGVANyBtYWluX2dldE9yZGVyRGV0YWlsc19yb3V0ZUA4IG1haW5fY3JlYXRlQnJhY2tldE9yZGVyX3JvdXRlQDkgbWFpbl91cGRhdGVUcmFpbERpc3RhbmNlX3JvdXRlQDEwIG1haW5fZ2V0VXNlck9yZGVyc19yb3V0ZUAxMSBtYWluX3NldFRpbWVCYXNlZFRyYWlsX3JvdXRlQDEyIG1haW5fZ2V0UGxhdGZvcm1TdGF0c19yb3V0ZUAxMyBtYWluX2VtZXJnZW5jeVBhdXNlT3JkZXJzX3JvdXRlQDE0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNsYXNzIFRyYWlsaW5nU3RvcExvc3MgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBwdXNoaW50IDAgLy8gMAogICAgcmV0dXJuCgptYWluX2VtZXJnZW5jeVBhdXNlT3JkZXJzX3JvdXRlQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjE0OAogICAgLy8gZW1lcmdlbmN5UGF1c2VPcmRlcnMoKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUwMDQ0NDU0ZDQ1NTI0NzQ1NGU0MzU5M2EyMDQxNmM2YzIwNzQ3MjYxNjk2YzY5NmU2NzIwNmY3MjY0NjU3MjczMjA3MDYxNzU3MzY1NjQyZTIwNGQ2MTZlNzU2MTZjMjA2OTZlNzQ2NTcyNzY2NTZlNzQ2OTZmNmUyMDcyNjU3MTc1Njk3MjY1NjQyZQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFBsYXRmb3JtU3RhdHNfcm91dGVAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MTQxCiAgICAvLyBnZXRQbGF0Zm9ybVN0YXRzKCk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDA3NzU0NzI2MTY5NmM2OTZlNjcyMDUzNzQ2ZjcwMjA1MDZjNjE3NDY2NmY3MjZkM2EyMDMxMmMzMjMzMzQyMDYxNjM3NDY5NzY2NTIwNmY3MjY0NjU3MjczMmMyMDI0MzIyZTM1NGQyMDc0NmY3NDYxNmMyMDcwNzI2Zjc0NjU2Mzc0NjU2NDIwNzY2MTZjNzU2NTJjMjAzOTM4MmUzNzI1MjA2NTc4NjU2Mzc1NzQ2OTZmNmUyMDczNzU2MzYzNjU3MzczMjA3MjYxNzQ2NTJjMjA0MTc2NjcyMDc0NzI2MTY5NmMzYTIwMzgyZTM1MjUKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9zZXRUaW1lQmFzZWRUcmFpbF9yb3V0ZUAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czoxMjctMTM0CiAgICAvLyBzZXRUaW1lQmFzZWRUcmFpbCgKICAgIC8vICAgICBvcmRlcklkOiBzdHJpbmcsCiAgICAvLyAgICAgcGhhc2UxRHVyYXRpb246IHN0cmluZywKICAgIC8vICAgICBwaGFzZTFUcmFpbDogc3RyaW5nLAogICAgLy8gICAgIHBoYXNlMkR1cmF0aW9uOiBzdHJpbmcsCiAgICAvLyAgICAgcGhhc2UyVHJhaWw6IHN0cmluZywKICAgIC8vICAgICBwaGFzZTNUcmFpbDogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNsYXNzIFRyYWlsaW5nU3RvcExvc3MgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MTI3LTEzNAogICAgLy8gc2V0VGltZUJhc2VkVHJhaWwoCiAgICAvLyAgICAgb3JkZXJJZDogc3RyaW5nLAogICAgLy8gICAgIHBoYXNlMUR1cmF0aW9uOiBzdHJpbmcsCiAgICAvLyAgICAgcGhhc2UxVHJhaWw6IHN0cmluZywKICAgIC8vICAgICBwaGFzZTJEdXJhdGlvbjogc3RyaW5nLAogICAgLy8gICAgIHBoYXNlMlRyYWlsOiBzdHJpbmcsCiAgICAvLyAgICAgcGhhc2UzVHJhaWw6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgc2V0VGltZUJhc2VkVHJhaWwKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFVzZXJPcmRlcnNfcm91dGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MTE5CiAgICAvLyBnZXRVc2VyT3JkZXJzKHVzZXJBZGRyZXNzOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNsYXNzIFRyYWlsaW5nU3RvcExvc3MgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjExOQogICAgLy8gZ2V0VXNlck9yZGVycyh1c2VyQWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgZ2V0VXNlck9yZGVycwogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlVHJhaWxEaXN0YW5jZV9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czoxMDgtMTEyCiAgICAvLyB1cGRhdGVUcmFpbERpc3RhbmNlKAogICAgLy8gICAgIG9yZGVySWQ6IHN0cmluZywKICAgIC8vICAgICBuZXdUcmFpbERpc3RhbmNlOiBzdHJpbmcsCiAgICAvLyAgICAgdXNlckFkZHJlc3M6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjcKICAgIC8vIGV4cG9ydCBjbGFzcyBUcmFpbGluZ1N0b3BMb3NzIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjEwOC0xMTIKICAgIC8vIHVwZGF0ZVRyYWlsRGlzdGFuY2UoCiAgICAvLyAgICAgb3JkZXJJZDogc3RyaW5nLAogICAgLy8gICAgIG5ld1RyYWlsRGlzdGFuY2U6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgY2FsbHN1YiB1cGRhdGVUcmFpbERpc3RhbmNlCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9jcmVhdGVCcmFja2V0T3JkZXJfcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo5Mi05OQogICAgLy8gY3JlYXRlQnJhY2tldE9yZGVyKAogICAgLy8gICAgIGFzc2V0SWQ6IHN0cmluZywKICAgIC8vICAgICBidXlBbW91bnQ6IHN0cmluZywKICAgIC8vICAgICBidXlQcmljZTogc3RyaW5nLAogICAgLy8gICAgIHRyYWlsRGlzdGFuY2U6IHN0cmluZywKICAgIC8vICAgICB0YWtlUHJvZml0UHJpY2U6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNsYXNzIFRyYWlsaW5nU3RvcExvc3MgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6OTItOTkKICAgIC8vIGNyZWF0ZUJyYWNrZXRPcmRlcigKICAgIC8vICAgICBhc3NldElkOiBzdHJpbmcsCiAgICAvLyAgICAgYnV5QW1vdW50OiBzdHJpbmcsCiAgICAvLyAgICAgYnV5UHJpY2U6IHN0cmluZywKICAgIC8vICAgICB0cmFpbERpc3RhbmNlOiBzdHJpbmcsCiAgICAvLyAgICAgdGFrZVByb2ZpdFByaWNlOiBzdHJpbmcsCiAgICAvLyAgICAgdXNlckFkZHJlc3M6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgY3JlYXRlQnJhY2tldE9yZGVyCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRPcmRlckRldGFpbHNfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo4NAogICAgLy8gZ2V0T3JkZXJEZXRhaWxzKG9yZGVySWQ6IHN0cmluZyk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo3CiAgICAvLyBleHBvcnQgY2xhc3MgVHJhaWxpbmdTdG9wTG9zcyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6ODQKICAgIC8vIGdldE9yZGVyRGV0YWlscyhvcmRlcklkOiBzdHJpbmcpOiBzdHJpbmcgewogICAgY2FsbHN1YiBnZXRPcmRlckRldGFpbHMKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NhbmNlbFRyYWlsaW5nT3JkZXJfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo3NC03NwogICAgLy8gY2FuY2VsVHJhaWxpbmdPcmRlcigKICAgIC8vICAgICBvcmRlcklkOiBzdHJpbmcsCiAgICAvLyAgICAgdXNlckFkZHJlc3M6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjcKICAgIC8vIGV4cG9ydCBjbGFzcyBUcmFpbGluZ1N0b3BMb3NzIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NzQtNzcKICAgIC8vIGNhbmNlbFRyYWlsaW5nT3JkZXIoCiAgICAvLyAgICAgb3JkZXJJZDogc3RyaW5nLAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBjYWxsc3ViIGNhbmNlbFRyYWlsaW5nT3JkZXIKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2V4ZWN1dGVUcmFpbGluZ09yZGVyX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NTgtNjQKICAgIC8vIGV4ZWN1dGVUcmFpbGluZ09yZGVyKAogICAgLy8gICAgIG9yZGVySWQ6IHN0cmluZywKICAgIC8vICAgICBhc3NldElkOiBzdHJpbmcsCiAgICAvLyAgICAgYW1vdW50OiBzdHJpbmcsCiAgICAvLyAgICAgZXhlY3V0aW9uUHJpY2U6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNsYXNzIFRyYWlsaW5nU3RvcExvc3MgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo1OC02NAogICAgLy8gZXhlY3V0ZVRyYWlsaW5nT3JkZXIoCiAgICAvLyAgICAgb3JkZXJJZDogc3RyaW5nLAogICAgLy8gICAgIGFzc2V0SWQ6IHN0cmluZywKICAgIC8vICAgICBhbW91bnQ6IHN0cmluZywKICAgIC8vICAgICBleGVjdXRpb25QcmljZTogc3RyaW5nLAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICBjYWxsc3ViIGV4ZWN1dGVUcmFpbGluZ09yZGVyCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9jaGVja0V4ZWN1dGlvbkNvbmRpdGlvbl9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjQxLTQ1CiAgICAvLyBjaGVja0V4ZWN1dGlvbkNvbmRpdGlvbigKICAgIC8vICAgICBvcmRlcklkOiBzdHJpbmcsCiAgICAvLyAgICAgY3VycmVudFByaWNlOiBzdHJpbmcsCiAgICAvLyAgICAgc3RvcFByaWNlOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo3CiAgICAvLyBleHBvcnQgY2xhc3MgVHJhaWxpbmdTdG9wTG9zcyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo0MS00NQogICAgLy8gY2hlY2tFeGVjdXRpb25Db25kaXRpb24oCiAgICAvLyAgICAgb3JkZXJJZDogc3RyaW5nLAogICAgLy8gICAgIGN1cnJlbnRQcmljZTogc3RyaW5nLAogICAgLy8gICAgIHN0b3BQcmljZTogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgY2FsbHN1YiBjaGVja0V4ZWN1dGlvbkNvbmRpdGlvbgogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlU3RvcFByaWNlX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MjgtMzIKICAgIC8vIHVwZGF0ZVN0b3BQcmljZSgKICAgIC8vICAgICBvcmRlcklkOiBzdHJpbmcsCiAgICAvLyAgICAgY3VycmVudE1hcmtldFByaWNlOiBzdHJpbmcsCiAgICAvLyAgICAgdHJhaWxEaXN0YW5jZTogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNsYXNzIFRyYWlsaW5nU3RvcExvc3MgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MjgtMzIKICAgIC8vIHVwZGF0ZVN0b3BQcmljZSgKICAgIC8vICAgICBvcmRlcklkOiBzdHJpbmcsCiAgICAvLyAgICAgY3VycmVudE1hcmtldFByaWNlOiBzdHJpbmcsCiAgICAvLyAgICAgdHJhaWxEaXN0YW5jZTogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgY2FsbHN1YiB1cGRhdGVTdG9wUHJpY2UKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZVRyYWlsaW5nT3JkZXJfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czoxMi0xOAogICAgLy8gY3JlYXRlVHJhaWxpbmdPcmRlcigKICAgIC8vICAgICBhc3NldElkOiBzdHJpbmcsCiAgICAvLyAgICAgYW1vdW50OiBzdHJpbmcsCiAgICAvLyAgICAgdHJhaWxEaXN0YW5jZTogc3RyaW5nLAogICAgLy8gICAgIGluaXRpYWxQcmljZTogc3RyaW5nLAogICAgLy8gICAgIHVzZXJBZGRyZXNzOiBzdHJpbmcKICAgIC8vICk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo3CiAgICAvLyBleHBvcnQgY2xhc3MgVHJhaWxpbmdTdG9wTG9zcyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA1CiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjEyLTE4CiAgICAvLyBjcmVhdGVUcmFpbGluZ09yZGVyKAogICAgLy8gICAgIGFzc2V0SWQ6IHN0cmluZywKICAgIC8vICAgICBhbW91bnQ6IHN0cmluZywKICAgIC8vICAgICB0cmFpbERpc3RhbmNlOiBzdHJpbmcsCiAgICAvLyAgICAgaW5pdGlhbFByaWNlOiBzdHJpbmcsCiAgICAvLyAgICAgdXNlckFkZHJlc3M6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIGNhbGxzdWIgY3JlYXRlVHJhaWxpbmdPcmRlcgogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjcKICAgIC8vIGV4cG9ydCBjbGFzcyBUcmFpbGluZ1N0b3BMb3NzIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyMQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6OlRyYWlsaW5nU3RvcExvc3MuY3JlYXRlVHJhaWxpbmdPcmRlcihhc3NldElkOiBieXRlcywgYW1vdW50OiBieXRlcywgdHJhaWxEaXN0YW5jZTogYnl0ZXMsIGluaXRpYWxQcmljZTogYnl0ZXMsIHVzZXJBZGRyZXNzOiBieXRlcykgLT4gYnl0ZXM6CmNyZWF0ZVRyYWlsaW5nT3JkZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MTItMTgKICAgIC8vIGNyZWF0ZVRyYWlsaW5nT3JkZXIoCiAgICAvLyAgICAgYXNzZXRJZDogc3RyaW5nLAogICAgLy8gICAgIGFtb3VudDogc3RyaW5nLAogICAgLy8gICAgIHRyYWlsRGlzdGFuY2U6IHN0cmluZywKICAgIC8vICAgICBpbml0aWFsUHJpY2U6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgcHJvdG8gNSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MTU3CiAgICAvLyByZXR1cm4gYHN0b3BQcmljZV8ke2luaXRpYWxQcmljZX1fJHt0cmFpbERpc3RhbmNlfWAKICAgIHB1c2hieXRlcyAic3RvcFByaWNlXyIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBieXRlY18yIC8vICJfIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjE3NAogICAgLy8gcmV0dXJuIGBUU0xfJHthc3NldElkfV9PUkRFUmAKICAgIGJ5dGVjXzMgLy8gIlRTTF8iCiAgICBmcmFtZV9kaWcgLTUKICAgIGNvbmNhdAogICAgYnl0ZWMgNCAvLyAiX09SREVSIgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHJldHVybiBgVHJhaWxpbmcgb3JkZXIgJHtvcmRlcklkfSBjcmVhdGVkOiBBc3NldCAke2Fzc2V0SWR9LCBBbW91bnQgJHthbW91bnR9LCBUcmFpbCAke3RyYWlsRGlzdGFuY2V9JSwgU3RvcCBQcmljZSAke2N1cnJlbnRTdG9wUHJpY2V9IGJ5ICR7dXNlckFkZHJlc3N9YAogICAgcHVzaGJ5dGVzICJUcmFpbGluZyBvcmRlciAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIGNyZWF0ZWQ6IEFzc2V0ICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC01CiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiLCBBbW91bnQgIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgYnl0ZWMgNSAvLyAiLCBUcmFpbCAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiUsIFN0b3AgUHJpY2UgIgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIGJ5ICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo6VHJhaWxpbmdTdG9wTG9zcy51cGRhdGVTdG9wUHJpY2Uob3JkZXJJZDogYnl0ZXMsIGN1cnJlbnRNYXJrZXRQcmljZTogYnl0ZXMsIHRyYWlsRGlzdGFuY2U6IGJ5dGVzKSAtPiBieXRlczoKdXBkYXRlU3RvcFByaWNlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjI4LTMyCiAgICAvLyB1cGRhdGVTdG9wUHJpY2UoCiAgICAvLyAgICAgb3JkZXJJZDogc3RyaW5nLAogICAgLy8gICAgIGN1cnJlbnRNYXJrZXRQcmljZTogc3RyaW5nLAogICAgLy8gICAgIHRyYWlsRGlzdGFuY2U6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIHByb3RvIDMgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjE2MwogICAgLy8gcmV0dXJuIGB0cmFpbFN0b3BQcmljZV8ke2N1cnJlbnRQcmljZX1fJHt0cmFpbERpc3RhbmNlfWAKICAgIHB1c2hieXRlcyAidHJhaWxTdG9wUHJpY2VfIgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGJ5dGVjXzIgLy8gIl8iCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MzUKICAgIC8vIHJldHVybiBgT3JkZXIgJHtvcmRlcklkfTogU3RvcCBwcmljZSB1cGRhdGVkIHRvICR7bmV3U3RvcFByaWNlfSBiYXNlZCBvbiBtYXJrZXQgcHJpY2UgJHtjdXJyZW50TWFya2V0UHJpY2V9YAogICAgYnl0ZWNfMSAvLyAiT3JkZXIgIgogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiOiBTdG9wIHByaWNlIHVwZGF0ZWQgdG8gIgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIGJhc2VkIG9uIG1hcmtldCBwcmljZSAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6OlRyYWlsaW5nU3RvcExvc3MuY2hlY2tFeGVjdXRpb25Db25kaXRpb24ob3JkZXJJZDogYnl0ZXMsIGN1cnJlbnRQcmljZTogYnl0ZXMsIHN0b3BQcmljZTogYnl0ZXMpIC0+IGJ5dGVzOgpjaGVja0V4ZWN1dGlvbkNvbmRpdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo0MS00NQogICAgLy8gY2hlY2tFeGVjdXRpb25Db25kaXRpb24oCiAgICAvLyAgICAgb3JkZXJJZDogc3RyaW5nLAogICAgLy8gICAgIGN1cnJlbnRQcmljZTogc3RyaW5nLAogICAgLy8gICAgIHN0b3BQcmljZTogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgcHJvdG8gMyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NDkKICAgIC8vIHJldHVybiBgT3JkZXIgJHtvcmRlcklkfSBUUklHR0VSRUQ6IEN1cnJlbnQgcHJpY2UgJHtjdXJyZW50UHJpY2V9IDw9IFN0b3AgcHJpY2UgJHtzdG9wUHJpY2V9YAogICAgYnl0ZWNfMSAvLyAiT3JkZXIgIgogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIFRSSUdHRVJFRDogQ3VycmVudCBwcmljZSAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiA8PSBTdG9wIHByaWNlICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo6VHJhaWxpbmdTdG9wTG9zcy5leGVjdXRlVHJhaWxpbmdPcmRlcihvcmRlcklkOiBieXRlcywgYXNzZXRJZDogYnl0ZXMsIGFtb3VudDogYnl0ZXMsIGV4ZWN1dGlvblByaWNlOiBieXRlcywgdXNlckFkZHJlc3M6IGJ5dGVzKSAtPiBieXRlczoKZXhlY3V0ZVRyYWlsaW5nT3JkZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NTgtNjQKICAgIC8vIGV4ZWN1dGVUcmFpbGluZ09yZGVyKAogICAgLy8gICAgIG9yZGVySWQ6IHN0cmluZywKICAgIC8vICAgICBhc3NldElkOiBzdHJpbmcsCiAgICAvLyAgICAgYW1vdW50OiBzdHJpbmcsCiAgICAvLyAgICAgZXhlY3V0aW9uUHJpY2U6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgcHJvdG8gNSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MTc5CiAgICAvLyByZXR1cm4gYFRyYWRlIGV4ZWN1dGVkIHZpYSBvcHRpbWFsIHJvdXRpbmcgZm9yICR7YXNzZXRJZH1gCiAgICBwdXNoYnl0ZXMgIlRyYWRlIGV4ZWN1dGVkIHZpYSBvcHRpbWFsIHJvdXRpbmcgZm9yICIKICAgIGZyYW1lX2RpZyAtNAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NjgKICAgIC8vIHJldHVybiBgT3JkZXIgJHtvcmRlcklkfSBFWEVDVVRFRDogU29sZCAke2Ftb3VudH0gb2YgYXNzZXQgJHthc3NldElkfSBhdCAke2V4ZWN1dGlvblByaWNlfSBmb3IgdXNlciAke3VzZXJBZGRyZXNzfS4gJHtleGVjdXRpb25SZXN1bHR9YAogICAgYnl0ZWNfMSAvLyAiT3JkZXIgIgogICAgZnJhbWVfZGlnIC01CiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIEVYRUNVVEVEOiBTb2xkICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIG9mIGFzc2V0ICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIGJ5dGVjIDYgLy8gIiBhdCAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiBmb3IgdXNlciAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIi4gIgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo6VHJhaWxpbmdTdG9wTG9zcy5jYW5jZWxUcmFpbGluZ09yZGVyKG9yZGVySWQ6IGJ5dGVzLCB1c2VyQWRkcmVzczogYnl0ZXMpIC0+IGJ5dGVzOgpjYW5jZWxUcmFpbGluZ09yZGVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjc0LTc3CiAgICAvLyBjYW5jZWxUcmFpbGluZ09yZGVyKAogICAgLy8gICAgIG9yZGVySWQ6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6NzgKICAgIC8vIHJldHVybiBgT3JkZXIgJHtvcmRlcklkfSBjYW5jZWxsZWQgYnkgJHt1c2VyQWRkcmVzc30uIEFzc2V0cyByZXR1cm5lZCB0byB3YWxsZXQuYAogICAgYnl0ZWNfMSAvLyAiT3JkZXIgIgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIGNhbmNlbGxlZCBieSAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIi4gQXNzZXRzIHJldHVybmVkIHRvIHdhbGxldC4iCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo6VHJhaWxpbmdTdG9wTG9zcy5nZXRPcmRlckRldGFpbHMob3JkZXJJZDogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRPcmRlckRldGFpbHM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6ODQKICAgIC8vIGdldE9yZGVyRGV0YWlscyhvcmRlcklkOiBzdHJpbmcpOiBzdHJpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6ODYKICAgIC8vIHJldHVybiBgT3JkZXIgJHtvcmRlcklkfTogQXNzZXQgQUxHTywgQW1vdW50IDEwMDAsIFRyYWlsIDEwJSwgQ3VycmVudCBTdG9wICQwLjU4NSwgU3RhdHVzIEFDVElWRSwgSGlnaCBXYXRlciBNYXJrICQwLjY1YAogICAgYnl0ZWNfMSAvLyAiT3JkZXIgIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiOiBBc3NldCBBTEdPLCBBbW91bnQgMTAwMCwgVHJhaWwgMTAlLCBDdXJyZW50IFN0b3AgJDAuNTg1LCBTdGF0dXMgQUNUSVZFLCBIaWdoIFdhdGVyIE1hcmsgJDAuNjUiCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo6VHJhaWxpbmdTdG9wTG9zcy5jcmVhdGVCcmFja2V0T3JkZXIoYXNzZXRJZDogYnl0ZXMsIGJ1eUFtb3VudDogYnl0ZXMsIGJ1eVByaWNlOiBieXRlcywgdHJhaWxEaXN0YW5jZTogYnl0ZXMsIHRha2VQcm9maXRQcmljZTogYnl0ZXMsIHVzZXJBZGRyZXNzOiBieXRlcykgLT4gYnl0ZXM6CmNyZWF0ZUJyYWNrZXRPcmRlcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo5Mi05OQogICAgLy8gY3JlYXRlQnJhY2tldE9yZGVyKAogICAgLy8gICAgIGFzc2V0SWQ6IHN0cmluZywKICAgIC8vICAgICBidXlBbW91bnQ6IHN0cmluZywKICAgIC8vICAgICBidXlQcmljZTogc3RyaW5nLAogICAgLy8gICAgIHRyYWlsRGlzdGFuY2U6IHN0cmluZywKICAgIC8vICAgICB0YWtlUHJvZml0UHJpY2U6IHN0cmluZywKICAgIC8vICAgICB1c2VyQWRkcmVzczogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgcHJvdG8gNiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MTc0CiAgICAvLyByZXR1cm4gYFRTTF8ke2Fzc2V0SWR9X09SREVSYAogICAgYnl0ZWNfMyAvLyAiVFNMXyIKICAgIGZyYW1lX2RpZyAtNgogICAgY29uY2F0CiAgICBieXRlYyA0IC8vICJfT1JERVIiCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czoxMDIKICAgIC8vIHJldHVybiBgQnJhY2tldCBvcmRlciAke29yZGVySWR9IGNyZWF0ZWQ6IEJ1eSAke2J1eUFtb3VudH0gJHthc3NldElkfSBhdCAke2J1eVByaWNlfSwgVHJhaWwgJHt0cmFpbERpc3RhbmNlfSUsIFRha2UgUHJvZml0ICR7dGFrZVByb2ZpdFByaWNlfWAKICAgIHB1c2hieXRlcyAiQnJhY2tldCBvcmRlciAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiIGNyZWF0ZWQ6IEJ1eSAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNQogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtNgogICAgY29uY2F0CiAgICBieXRlYyA2IC8vICIgYXQgIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgYnl0ZWMgNSAvLyAiLCBUcmFpbCAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIiUsIFRha2UgUHJvZml0ICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo6VHJhaWxpbmdTdG9wTG9zcy51cGRhdGVUcmFpbERpc3RhbmNlKG9yZGVySWQ6IGJ5dGVzLCBuZXdUcmFpbERpc3RhbmNlOiBieXRlcywgdXNlckFkZHJlc3M6IGJ5dGVzKSAtPiBieXRlczoKdXBkYXRlVHJhaWxEaXN0YW5jZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czoxMDgtMTEyCiAgICAvLyB1cGRhdGVUcmFpbERpc3RhbmNlKAogICAgLy8gICAgIG9yZGVySWQ6IHN0cmluZywKICAgIC8vICAgICBuZXdUcmFpbERpc3RhbmNlOiBzdHJpbmcsCiAgICAvLyAgICAgdXNlckFkZHJlc3M6IHN0cmluZwogICAgLy8gKTogc3RyaW5nIHsKICAgIHByb3RvIDMgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3RyYWlsaW5nX3N0b3BfbG9zcy9jb250cmFjdC5hbGdvLnRzOjExMwogICAgLy8gcmV0dXJuIGBPcmRlciAke29yZGVySWR9OiBUcmFpbCBkaXN0YW5jZSB1cGRhdGVkIGZyb20gY3VycmVudCB0byAke25ld1RyYWlsRGlzdGFuY2V9JSBieSAke3VzZXJBZGRyZXNzfWAKICAgIGJ5dGVjXzEgLy8gIk9yZGVyICIKICAgIGZyYW1lX2RpZyAtMwogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgIjogVHJhaWwgZGlzdGFuY2UgdXBkYXRlZCBmcm9tIGN1cnJlbnQgdG8gIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICIlIGJ5ICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo6VHJhaWxpbmdTdG9wTG9zcy5nZXRVc2VyT3JkZXJzKHVzZXJBZGRyZXNzOiBieXRlcykgLT4gYnl0ZXM6CmdldFVzZXJPcmRlcnM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MTE5CiAgICAvLyBnZXRVc2VyT3JkZXJzKHVzZXJBZGRyZXNzOiBzdHJpbmcpOiBzdHJpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MTIxCiAgICAvLyByZXR1cm4gYEFjdGl2ZSBvcmRlcnMgZm9yICR7dXNlckFkZHJlc3N9OiAzIHRyYWlsaW5nIHN0b3BzLCAxIGJyYWNrZXQgb3JkZXIsIFRvdGFsIHZhbHVlIHByb3RlY3RlZDogJDUsNDIwYAogICAgcHVzaGJ5dGVzICJBY3RpdmUgb3JkZXJzIGZvciAiCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICI6IDMgdHJhaWxpbmcgc3RvcHMsIDEgYnJhY2tldCBvcmRlciwgVG90YWwgdmFsdWUgcHJvdGVjdGVkOiAkNSw0MjAiCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czo6VHJhaWxpbmdTdG9wTG9zcy5zZXRUaW1lQmFzZWRUcmFpbChvcmRlcklkOiBieXRlcywgcGhhc2UxRHVyYXRpb246IGJ5dGVzLCBwaGFzZTFUcmFpbDogYnl0ZXMsIHBoYXNlMkR1cmF0aW9uOiBieXRlcywgcGhhc2UyVHJhaWw6IGJ5dGVzLCBwaGFzZTNUcmFpbDogYnl0ZXMpIC0+IGJ5dGVzOgpzZXRUaW1lQmFzZWRUcmFpbDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy90cmFpbGluZ19zdG9wX2xvc3MvY29udHJhY3QuYWxnby50czoxMjctMTM0CiAgICAvLyBzZXRUaW1lQmFzZWRUcmFpbCgKICAgIC8vICAgICBvcmRlcklkOiBzdHJpbmcsCiAgICAvLyAgICAgcGhhc2UxRHVyYXRpb246IHN0cmluZywKICAgIC8vICAgICBwaGFzZTFUcmFpbDogc3RyaW5nLAogICAgLy8gICAgIHBoYXNlMkR1cmF0aW9uOiBzdHJpbmcsCiAgICAvLyAgICAgcGhhc2UyVHJhaWw6IHN0cmluZywKICAgIC8vICAgICBwaGFzZTNUcmFpbDogc3RyaW5nCiAgICAvLyApOiBzdHJpbmcgewogICAgcHJvdG8gNiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdHJhaWxpbmdfc3RvcF9sb3NzL2NvbnRyYWN0LmFsZ28udHM6MTM1CiAgICAvLyByZXR1cm4gYE9yZGVyICR7b3JkZXJJZH06IFRpbWUtYmFzZWQgdHJhaWwgc2V0IC0gRmlyc3QgJHtwaGFzZTFEdXJhdGlvbn1oOiAke3BoYXNlMVRyYWlsfSUsIE5leHQgJHtwaGFzZTJEdXJhdGlvbn1oOiAke3BoYXNlMlRyYWlsfSUsIEFmdGVyOiAke3BoYXNlM1RyYWlsfSVgCiAgICBieXRlY18xIC8vICJPcmRlciAiCiAgICBmcmFtZV9kaWcgLTYKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICI6IFRpbWUtYmFzZWQgdHJhaWwgc2V0IC0gRmlyc3QgIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTUKICAgIGNvbmNhdAogICAgYnl0ZWMgNyAvLyAiaDogIgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzICIlLCBOZXh0ICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0zCiAgICBjb25jYXQKICAgIGJ5dGVjIDcgLy8gImg6ICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiJSwgQWZ0ZXI6ICIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAiJSIKICAgIGNvbmNhdAogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiABASYIBBUffHUGT3JkZXIgAV8EVFNMXwZfT1JERVIILCBUcmFpbCAEIGF0IANoOiAxG0EC/4IMBGdOWjUEXHpjWwTzGWu4BJUCC54ED+mdRgQ3GrvABBXsiHkEoUzQ7QR5K0fLBNNzB2wEESN7SASxccimNhoAjgwCbgJEAhoB5AHAAaIBZgE8AR4A4gBZAAOBAEMxGRREMRhEgEoVH3x1AERFTUVSR0VOQ1k6IEFsbCB0cmFpbGluZyBvcmRlcnMgcGF1c2VkLiBNYW51YWwgaW50ZXJ2ZW50aW9uIHJlcXVpcmVkLrAiQzEZFEQxGESAfRUffHUAd1RyYWlsaW5nIFN0b3AgUGxhdGZvcm06IDEsMjM0IGFjdGl2ZSBvcmRlcnMsICQyLjVNIHRvdGFsIHByb3RlY3RlZCB2YWx1ZSwgOTguNyUgZXhlY3V0aW9uIHN1Y2Nlc3MgcmF0ZSwgQXZnIHRyYWlsOiA4LjUlsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCADYaBVcCADYaBlcCAIgEyEkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCAIgESkkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCAIgD3kkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCADYaBVcCADYaBlcCAIgDSUkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCAIgCwUkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCAIgCYkkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCADYaBVcCAIgBtUkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCAIgBTkkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCAIgAyUkVFlcGAkxQKExQsCJDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCADYaBVcCAIgAGUkVFlcGAkxQKExQsCJDMRlA/VcxGBREIkOKBQGACnN0b3BQcmljZV+L/lAqUIv9UCuL+1AnBFCAD1RyYWlsaW5nIG9yZGVyIExQgBAgY3JlYXRlZDogQXNzZXQgUIv7UIAJLCBBbW91bnQgUIv8UCcFUIv9UIAOJSwgU3RvcCBQcmljZSBQTFCABCBieSBQi/9QiYoDAYAPdHJhaWxTdG9wUHJpY2Vfi/5QKlCL/1Api/1QgBg6IFN0b3AgcHJpY2UgdXBkYXRlZCB0byBQTFCAFyBiYXNlZCBvbiBtYXJrZXQgcHJpY2UgUIv+UImKAwEpi/1QgBogVFJJR0dFUkVEOiBDdXJyZW50IHByaWNlIFCL/lCADyA8PSBTdG9wIHByaWNlIFCL/1CJigUBgCdUcmFkZSBleGVjdXRlZCB2aWEgb3B0aW1hbCByb3V0aW5nIGZvciCL/FApi/tQgBAgRVhFQ1VURUQ6IFNvbGQgUIv9UIAKIG9mIGFzc2V0IFCL/FAnBlCL/lCACiBmb3IgdXNlciBQi/9QgAIuIFBMUImKAgEpi/5QgA4gY2FuY2VsbGVkIGJ5IFCL/1CAHC4gQXNzZXRzIHJldHVybmVkIHRvIHdhbGxldC5QiYoBASmL/1CAXzogQXNzZXQgQUxHTywgQW1vdW50IDEwMDAsIFRyYWlsIDEwJSwgQ3VycmVudCBTdG9wICQwLjU4NSwgU3RhdHVzIEFDVElWRSwgSGlnaCBXYXRlciBNYXJrICQwLjY1UImKBgEri/pQJwRQgA5CcmFja2V0IG9yZGVyIExQgA4gY3JlYXRlZDogQnV5IFCL+1CAASBQi/pQJwZQi/xQJwVQi/1QgA8lLCBUYWtlIFByb2ZpdCBQi/5QiYoDASmL/VCAKTogVHJhaWwgZGlzdGFuY2UgdXBkYXRlZCBmcm9tIGN1cnJlbnQgdG8gUIv+UIAFJSBieSBQi/9QiYoBAYASQWN0aXZlIG9yZGVycyBmb3Igi/9QgEI6IDMgdHJhaWxpbmcgc3RvcHMsIDEgYnJhY2tldCBvcmRlciwgVG90YWwgdmFsdWUgcHJvdGVjdGVkOiAkNSw0MjBQiYoGASmL+lCAHzogVGltZS1iYXNlZCB0cmFpbCBzZXQgLSBGaXJzdCBQi/tQJwdQi/xQgAglLCBOZXh0IFCL/VAnB1CL/lCACiUsIEFmdGVyOiBQi/9QgAElUIk=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TrailingStopLoss contract
 */
export type TrailingStopLossArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createTrailingOrder(string,string,string,string,string)string': {
      assetId: string
      amount: string
      trailDistance: string
      initialPrice: string
      userAddress: string
    }
    'updateStopPrice(string,string,string)string': {
      orderId: string
      currentMarketPrice: string
      trailDistance: string
    }
    'checkExecutionCondition(string,string,string)string': {
      orderId: string
      currentPrice: string
      stopPrice: string
    }
    'executeTrailingOrder(string,string,string,string,string)string': {
      orderId: string
      assetId: string
      amount: string
      executionPrice: string
      userAddress: string
    }
    'cancelTrailingOrder(string,string)string': {
      orderId: string
      userAddress: string
    }
    'getOrderDetails(string)string': {
      orderId: string
    }
    'createBracketOrder(string,string,string,string,string,string)string': {
      assetId: string
      buyAmount: string
      buyPrice: string
      trailDistance: string
      takeProfitPrice: string
      userAddress: string
    }
    'updateTrailDistance(string,string,string)string': {
      orderId: string
      newTrailDistance: string
      userAddress: string
    }
    'getUserOrders(string)string': {
      userAddress: string
    }
    'setTimeBasedTrail(string,string,string,string,string,string)string': {
      orderId: string
      phase1Duration: string
      phase1Trail: string
      phase2Duration: string
      phase2Trail: string
      phase3Trail: string
    }
    'getPlatformStats()string': Record<string, never>
    'emergencyPauseOrders()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createTrailingOrder(string,string,string,string,string)string': [assetId: string, amount: string, trailDistance: string, initialPrice: string, userAddress: string]
    'updateStopPrice(string,string,string)string': [orderId: string, currentMarketPrice: string, trailDistance: string]
    'checkExecutionCondition(string,string,string)string': [orderId: string, currentPrice: string, stopPrice: string]
    'executeTrailingOrder(string,string,string,string,string)string': [orderId: string, assetId: string, amount: string, executionPrice: string, userAddress: string]
    'cancelTrailingOrder(string,string)string': [orderId: string, userAddress: string]
    'getOrderDetails(string)string': [orderId: string]
    'createBracketOrder(string,string,string,string,string,string)string': [assetId: string, buyAmount: string, buyPrice: string, trailDistance: string, takeProfitPrice: string, userAddress: string]
    'updateTrailDistance(string,string,string)string': [orderId: string, newTrailDistance: string, userAddress: string]
    'getUserOrders(string)string': [userAddress: string]
    'setTimeBasedTrail(string,string,string,string,string,string)string': [orderId: string, phase1Duration: string, phase1Trail: string, phase2Duration: string, phase2Trail: string, phase3Trail: string]
    'getPlatformStats()string': []
    'emergencyPauseOrders()string': []
  }
}

/**
 * The return type for each method
 */
export type TrailingStopLossReturns = {
  'createTrailingOrder(string,string,string,string,string)string': string
  'updateStopPrice(string,string,string)string': string
  'checkExecutionCondition(string,string,string)string': string
  'executeTrailingOrder(string,string,string,string,string)string': string
  'cancelTrailingOrder(string,string)string': string
  'getOrderDetails(string)string': string
  'createBracketOrder(string,string,string,string,string,string)string': string
  'updateTrailDistance(string,string,string)string': string
  'getUserOrders(string)string': string
  'setTimeBasedTrail(string,string,string,string,string,string)string': string
  'getPlatformStats()string': string
  'emergencyPauseOrders()string': string
}

/**
 * Defines the types of available calls and state of the TrailingStopLoss smart contract.
 */
export type TrailingStopLossTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createTrailingOrder(string,string,string,string,string)string' | 'createTrailingOrder', {
      argsObj: TrailingStopLossArgs['obj']['createTrailingOrder(string,string,string,string,string)string']
      argsTuple: TrailingStopLossArgs['tuple']['createTrailingOrder(string,string,string,string,string)string']
      returns: TrailingStopLossReturns['createTrailingOrder(string,string,string,string,string)string']
    }>
    & Record<'updateStopPrice(string,string,string)string' | 'updateStopPrice', {
      argsObj: TrailingStopLossArgs['obj']['updateStopPrice(string,string,string)string']
      argsTuple: TrailingStopLossArgs['tuple']['updateStopPrice(string,string,string)string']
      returns: TrailingStopLossReturns['updateStopPrice(string,string,string)string']
    }>
    & Record<'checkExecutionCondition(string,string,string)string' | 'checkExecutionCondition', {
      argsObj: TrailingStopLossArgs['obj']['checkExecutionCondition(string,string,string)string']
      argsTuple: TrailingStopLossArgs['tuple']['checkExecutionCondition(string,string,string)string']
      returns: TrailingStopLossReturns['checkExecutionCondition(string,string,string)string']
    }>
    & Record<'executeTrailingOrder(string,string,string,string,string)string' | 'executeTrailingOrder', {
      argsObj: TrailingStopLossArgs['obj']['executeTrailingOrder(string,string,string,string,string)string']
      argsTuple: TrailingStopLossArgs['tuple']['executeTrailingOrder(string,string,string,string,string)string']
      returns: TrailingStopLossReturns['executeTrailingOrder(string,string,string,string,string)string']
    }>
    & Record<'cancelTrailingOrder(string,string)string' | 'cancelTrailingOrder', {
      argsObj: TrailingStopLossArgs['obj']['cancelTrailingOrder(string,string)string']
      argsTuple: TrailingStopLossArgs['tuple']['cancelTrailingOrder(string,string)string']
      returns: TrailingStopLossReturns['cancelTrailingOrder(string,string)string']
    }>
    & Record<'getOrderDetails(string)string' | 'getOrderDetails', {
      argsObj: TrailingStopLossArgs['obj']['getOrderDetails(string)string']
      argsTuple: TrailingStopLossArgs['tuple']['getOrderDetails(string)string']
      returns: TrailingStopLossReturns['getOrderDetails(string)string']
    }>
    & Record<'createBracketOrder(string,string,string,string,string,string)string' | 'createBracketOrder', {
      argsObj: TrailingStopLossArgs['obj']['createBracketOrder(string,string,string,string,string,string)string']
      argsTuple: TrailingStopLossArgs['tuple']['createBracketOrder(string,string,string,string,string,string)string']
      returns: TrailingStopLossReturns['createBracketOrder(string,string,string,string,string,string)string']
    }>
    & Record<'updateTrailDistance(string,string,string)string' | 'updateTrailDistance', {
      argsObj: TrailingStopLossArgs['obj']['updateTrailDistance(string,string,string)string']
      argsTuple: TrailingStopLossArgs['tuple']['updateTrailDistance(string,string,string)string']
      returns: TrailingStopLossReturns['updateTrailDistance(string,string,string)string']
    }>
    & Record<'getUserOrders(string)string' | 'getUserOrders', {
      argsObj: TrailingStopLossArgs['obj']['getUserOrders(string)string']
      argsTuple: TrailingStopLossArgs['tuple']['getUserOrders(string)string']
      returns: TrailingStopLossReturns['getUserOrders(string)string']
    }>
    & Record<'setTimeBasedTrail(string,string,string,string,string,string)string' | 'setTimeBasedTrail', {
      argsObj: TrailingStopLossArgs['obj']['setTimeBasedTrail(string,string,string,string,string,string)string']
      argsTuple: TrailingStopLossArgs['tuple']['setTimeBasedTrail(string,string,string,string,string,string)string']
      returns: TrailingStopLossReturns['setTimeBasedTrail(string,string,string,string,string,string)string']
    }>
    & Record<'getPlatformStats()string' | 'getPlatformStats', {
      argsObj: TrailingStopLossArgs['obj']['getPlatformStats()string']
      argsTuple: TrailingStopLossArgs['tuple']['getPlatformStats()string']
      returns: TrailingStopLossReturns['getPlatformStats()string']
    }>
    & Record<'emergencyPauseOrders()string' | 'emergencyPauseOrders', {
      argsObj: TrailingStopLossArgs['obj']['emergencyPauseOrders()string']
      argsTuple: TrailingStopLossArgs['tuple']['emergencyPauseOrders()string']
      returns: TrailingStopLossReturns['emergencyPauseOrders()string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type TrailingStopLossSignatures = keyof TrailingStopLossTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TrailingStopLossNonVoidMethodSignatures = keyof TrailingStopLossTypes['methods'] extends infer T ? T extends keyof TrailingStopLossTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TrailingStopLoss smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TrailingStopLossSignatures> = TrailingStopLossTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TrailingStopLoss smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TrailingStopLossSignatures> = TrailingStopLossTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type TrailingStopLossCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TrailingStopLossDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TrailingStopLossCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TrailingStopLoss smart contract
 */
export abstract class TrailingStopLossParamsFactory {
  /**
   * Constructs a no op call for the createTrailingOrder(string,string,string,string,string)string ABI method
   *
   * Create a new trailing stop-loss order
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createTrailingOrder(params: CallParams<TrailingStopLossArgs['obj']['createTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createTrailingOrder(string,string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createTrailingOrder(string,string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.amount, params.args.trailDistance, params.args.initialPrice, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the updateStopPrice(string,string,string)string ABI method
   *
   * Update stop price based on current market price
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateStopPrice(params: CallParams<TrailingStopLossArgs['obj']['updateStopPrice(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateStopPrice(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateStopPrice(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orderId, params.args.currentMarketPrice, params.args.trailDistance],
    }
  }
  /**
   * Constructs a no op call for the checkExecutionCondition(string,string,string)string ABI method
   *
   * Check if order should be executed based on current price
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkExecutionCondition(params: CallParams<TrailingStopLossArgs['obj']['checkExecutionCondition(string,string,string)string'] | TrailingStopLossArgs['tuple']['checkExecutionCondition(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkExecutionCondition(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orderId, params.args.currentPrice, params.args.stopPrice],
    }
  }
  /**
   * Constructs a no op call for the executeTrailingOrder(string,string,string,string,string)string ABI method
   *
   * Execute trailing stop-loss order
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static executeTrailingOrder(params: CallParams<TrailingStopLossArgs['obj']['executeTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['executeTrailingOrder(string,string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'executeTrailingOrder(string,string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orderId, params.args.assetId, params.args.amount, params.args.executionPrice, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the cancelTrailingOrder(string,string)string ABI method
   *
   * Cancel an active trailing order
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancelTrailingOrder(params: CallParams<TrailingStopLossArgs['obj']['cancelTrailingOrder(string,string)string'] | TrailingStopLossArgs['tuple']['cancelTrailingOrder(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancelTrailingOrder(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orderId, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getOrderDetails(string)string ABI method
   *
   * Get order details and current status
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getOrderDetails(params: CallParams<TrailingStopLossArgs['obj']['getOrderDetails(string)string'] | TrailingStopLossArgs['tuple']['getOrderDetails(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getOrderDetails(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orderId],
    }
  }
  /**
   * Constructs a no op call for the createBracketOrder(string,string,string,string,string,string)string ABI method
   *
   * Create bracket order (buy + trailing stop + take profit)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBracketOrder(params: CallParams<TrailingStopLossArgs['obj']['createBracketOrder(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createBracketOrder(string,string,string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createBracketOrder(string,string,string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.buyAmount, params.args.buyPrice, params.args.trailDistance, params.args.takeProfitPrice, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the updateTrailDistance(string,string,string)string ABI method
   *
   * Update trail distance for existing order
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateTrailDistance(params: CallParams<TrailingStopLossArgs['obj']['updateTrailDistance(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateTrailDistance(string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateTrailDistance(string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orderId, params.args.newTrailDistance, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getUserOrders(string)string ABI method
   *
   * Get user's active orders
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserOrders(params: CallParams<TrailingStopLossArgs['obj']['getUserOrders(string)string'] | TrailingStopLossArgs['tuple']['getUserOrders(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserOrders(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the setTimeBasedTrail(string,string,string,string,string,string)string ABI method
   *
   * Set time-based trail adjustments
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setTimeBasedTrail(params: CallParams<TrailingStopLossArgs['obj']['setTimeBasedTrail(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['setTimeBasedTrail(string,string,string,string,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setTimeBasedTrail(string,string,string,string,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orderId, params.args.phase1Duration, params.args.phase1Trail, params.args.phase2Duration, params.args.phase2Trail, params.args.phase3Trail],
    }
  }
  /**
   * Constructs a no op call for the getPlatformStats()string ABI method
   *
   * Get platform statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformStats(params: CallParams<TrailingStopLossArgs['obj']['getPlatformStats()string'] | TrailingStopLossArgs['tuple']['getPlatformStats()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlatformStats()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergencyPauseOrders()string ABI method
   *
   * Emergency pause all orders
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyPauseOrders(params: CallParams<TrailingStopLossArgs['obj']['emergencyPauseOrders()string'] | TrailingStopLossArgs['tuple']['emergencyPauseOrders()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyPauseOrders()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TrailingStopLoss smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TrailingStopLossFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TrailingStopLossFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TrailingStopLossClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TrailingStopLossClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TrailingStopLoss smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TrailingStopLossDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new TrailingStopLossClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TrailingStopLoss smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TrailingStopLoss smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TrailingStopLoss smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new TrailingStopLossClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TrailingStopLoss smart contract
 */
export class TrailingStopLossClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TrailingStopLossClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TrailingStopLoss app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TrailingStopLossClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TrailingStopLossNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TrailingStopLossClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TrailingStopLossClient> {
    return new TrailingStopLossClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TrailingStopLossClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TrailingStopLossClient> {
    return new TrailingStopLossClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TrailingStopLoss smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `createTrailingOrder(string,string,string,string,string)string` ABI method.
     *
     * Create a new trailing stop-loss order
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createTrailingOrder: (params: CallParams<TrailingStopLossArgs['obj']['createTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createTrailingOrder(string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.createTrailingOrder(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `updateStopPrice(string,string,string)string` ABI method.
     *
     * Update stop price based on current market price
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateStopPrice: (params: CallParams<TrailingStopLossArgs['obj']['updateStopPrice(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateStopPrice(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.updateStopPrice(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `checkExecutionCondition(string,string,string)string` ABI method.
     *
     * Check if order should be executed based on current price
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkExecutionCondition: (params: CallParams<TrailingStopLossArgs['obj']['checkExecutionCondition(string,string,string)string'] | TrailingStopLossArgs['tuple']['checkExecutionCondition(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.checkExecutionCondition(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `executeTrailingOrder(string,string,string,string,string)string` ABI method.
     *
     * Execute trailing stop-loss order
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    executeTrailingOrder: (params: CallParams<TrailingStopLossArgs['obj']['executeTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['executeTrailingOrder(string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.executeTrailingOrder(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `cancelTrailingOrder(string,string)string` ABI method.
     *
     * Cancel an active trailing order
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancelTrailingOrder: (params: CallParams<TrailingStopLossArgs['obj']['cancelTrailingOrder(string,string)string'] | TrailingStopLossArgs['tuple']['cancelTrailingOrder(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.cancelTrailingOrder(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `getOrderDetails(string)string` ABI method.
     *
     * Get order details and current status
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getOrderDetails: (params: CallParams<TrailingStopLossArgs['obj']['getOrderDetails(string)string'] | TrailingStopLossArgs['tuple']['getOrderDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.getOrderDetails(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `createBracketOrder(string,string,string,string,string,string)string` ABI method.
     *
     * Create bracket order (buy + trailing stop + take profit)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBracketOrder: (params: CallParams<TrailingStopLossArgs['obj']['createBracketOrder(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createBracketOrder(string,string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.createBracketOrder(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `updateTrailDistance(string,string,string)string` ABI method.
     *
     * Update trail distance for existing order
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateTrailDistance: (params: CallParams<TrailingStopLossArgs['obj']['updateTrailDistance(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateTrailDistance(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.updateTrailDistance(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `getUserOrders(string)string` ABI method.
     *
     * Get user's active orders
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserOrders: (params: CallParams<TrailingStopLossArgs['obj']['getUserOrders(string)string'] | TrailingStopLossArgs['tuple']['getUserOrders(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.getUserOrders(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `setTimeBasedTrail(string,string,string,string,string,string)string` ABI method.
     *
     * Set time-based trail adjustments
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setTimeBasedTrail: (params: CallParams<TrailingStopLossArgs['obj']['setTimeBasedTrail(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['setTimeBasedTrail(string,string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.setTimeBasedTrail(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `getPlatformStats()string` ABI method.
     *
     * Get platform statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformStats: (params: CallParams<TrailingStopLossArgs['obj']['getPlatformStats()string'] | TrailingStopLossArgs['tuple']['getPlatformStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.getPlatformStats(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `emergencyPauseOrders()string` ABI method.
     *
     * Emergency pause all orders
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyPauseOrders: (params: CallParams<TrailingStopLossArgs['obj']['emergencyPauseOrders()string'] | TrailingStopLossArgs['tuple']['emergencyPauseOrders()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TrailingStopLossParamsFactory.emergencyPauseOrders(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TrailingStopLoss smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `createTrailingOrder(string,string,string,string,string)string` ABI method.
     *
     * Create a new trailing stop-loss order
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createTrailingOrder: (params: CallParams<TrailingStopLossArgs['obj']['createTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createTrailingOrder(string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.createTrailingOrder(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `updateStopPrice(string,string,string)string` ABI method.
     *
     * Update stop price based on current market price
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateStopPrice: (params: CallParams<TrailingStopLossArgs['obj']['updateStopPrice(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateStopPrice(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.updateStopPrice(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `checkExecutionCondition(string,string,string)string` ABI method.
     *
     * Check if order should be executed based on current price
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkExecutionCondition: (params: CallParams<TrailingStopLossArgs['obj']['checkExecutionCondition(string,string,string)string'] | TrailingStopLossArgs['tuple']['checkExecutionCondition(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.checkExecutionCondition(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `executeTrailingOrder(string,string,string,string,string)string` ABI method.
     *
     * Execute trailing stop-loss order
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    executeTrailingOrder: (params: CallParams<TrailingStopLossArgs['obj']['executeTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['executeTrailingOrder(string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.executeTrailingOrder(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `cancelTrailingOrder(string,string)string` ABI method.
     *
     * Cancel an active trailing order
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancelTrailingOrder: (params: CallParams<TrailingStopLossArgs['obj']['cancelTrailingOrder(string,string)string'] | TrailingStopLossArgs['tuple']['cancelTrailingOrder(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.cancelTrailingOrder(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `getOrderDetails(string)string` ABI method.
     *
     * Get order details and current status
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getOrderDetails: (params: CallParams<TrailingStopLossArgs['obj']['getOrderDetails(string)string'] | TrailingStopLossArgs['tuple']['getOrderDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.getOrderDetails(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `createBracketOrder(string,string,string,string,string,string)string` ABI method.
     *
     * Create bracket order (buy + trailing stop + take profit)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBracketOrder: (params: CallParams<TrailingStopLossArgs['obj']['createBracketOrder(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createBracketOrder(string,string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.createBracketOrder(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `updateTrailDistance(string,string,string)string` ABI method.
     *
     * Update trail distance for existing order
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateTrailDistance: (params: CallParams<TrailingStopLossArgs['obj']['updateTrailDistance(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateTrailDistance(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.updateTrailDistance(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `getUserOrders(string)string` ABI method.
     *
     * Get user's active orders
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserOrders: (params: CallParams<TrailingStopLossArgs['obj']['getUserOrders(string)string'] | TrailingStopLossArgs['tuple']['getUserOrders(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.getUserOrders(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `setTimeBasedTrail(string,string,string,string,string,string)string` ABI method.
     *
     * Set time-based trail adjustments
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setTimeBasedTrail: (params: CallParams<TrailingStopLossArgs['obj']['setTimeBasedTrail(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['setTimeBasedTrail(string,string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.setTimeBasedTrail(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `getPlatformStats()string` ABI method.
     *
     * Get platform statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformStats: (params: CallParams<TrailingStopLossArgs['obj']['getPlatformStats()string'] | TrailingStopLossArgs['tuple']['getPlatformStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.getPlatformStats(params))
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `emergencyPauseOrders()string` ABI method.
     *
     * Emergency pause all orders
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyPauseOrders: (params: CallParams<TrailingStopLossArgs['obj']['emergencyPauseOrders()string'] | TrailingStopLossArgs['tuple']['emergencyPauseOrders()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TrailingStopLossParamsFactory.emergencyPauseOrders(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TrailingStopLoss smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `createTrailingOrder(string,string,string,string,string)string` ABI method.
     *
     * Create a new trailing stop-loss order
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createTrailingOrder: async (params: CallParams<TrailingStopLossArgs['obj']['createTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createTrailingOrder(string,string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.createTrailingOrder(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['createTrailingOrder(string,string,string,string,string)string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `updateStopPrice(string,string,string)string` ABI method.
     *
     * Update stop price based on current market price
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateStopPrice: async (params: CallParams<TrailingStopLossArgs['obj']['updateStopPrice(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateStopPrice(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.updateStopPrice(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['updateStopPrice(string,string,string)string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `checkExecutionCondition(string,string,string)string` ABI method.
     *
     * Check if order should be executed based on current price
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkExecutionCondition: async (params: CallParams<TrailingStopLossArgs['obj']['checkExecutionCondition(string,string,string)string'] | TrailingStopLossArgs['tuple']['checkExecutionCondition(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.checkExecutionCondition(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['checkExecutionCondition(string,string,string)string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `executeTrailingOrder(string,string,string,string,string)string` ABI method.
     *
     * Execute trailing stop-loss order
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    executeTrailingOrder: async (params: CallParams<TrailingStopLossArgs['obj']['executeTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['executeTrailingOrder(string,string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.executeTrailingOrder(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['executeTrailingOrder(string,string,string,string,string)string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `cancelTrailingOrder(string,string)string` ABI method.
     *
     * Cancel an active trailing order
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancelTrailingOrder: async (params: CallParams<TrailingStopLossArgs['obj']['cancelTrailingOrder(string,string)string'] | TrailingStopLossArgs['tuple']['cancelTrailingOrder(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.cancelTrailingOrder(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['cancelTrailingOrder(string,string)string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `getOrderDetails(string)string` ABI method.
     *
     * Get order details and current status
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getOrderDetails: async (params: CallParams<TrailingStopLossArgs['obj']['getOrderDetails(string)string'] | TrailingStopLossArgs['tuple']['getOrderDetails(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.getOrderDetails(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['getOrderDetails(string)string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `createBracketOrder(string,string,string,string,string,string)string` ABI method.
     *
     * Create bracket order (buy + trailing stop + take profit)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBracketOrder: async (params: CallParams<TrailingStopLossArgs['obj']['createBracketOrder(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createBracketOrder(string,string,string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.createBracketOrder(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['createBracketOrder(string,string,string,string,string,string)string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `updateTrailDistance(string,string,string)string` ABI method.
     *
     * Update trail distance for existing order
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateTrailDistance: async (params: CallParams<TrailingStopLossArgs['obj']['updateTrailDistance(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateTrailDistance(string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.updateTrailDistance(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['updateTrailDistance(string,string,string)string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `getUserOrders(string)string` ABI method.
     *
     * Get user's active orders
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserOrders: async (params: CallParams<TrailingStopLossArgs['obj']['getUserOrders(string)string'] | TrailingStopLossArgs['tuple']['getUserOrders(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.getUserOrders(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['getUserOrders(string)string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `setTimeBasedTrail(string,string,string,string,string,string)string` ABI method.
     *
     * Set time-based trail adjustments
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setTimeBasedTrail: async (params: CallParams<TrailingStopLossArgs['obj']['setTimeBasedTrail(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['setTimeBasedTrail(string,string,string,string,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.setTimeBasedTrail(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['setTimeBasedTrail(string,string,string,string,string,string)string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `getPlatformStats()string` ABI method.
     *
     * Get platform statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformStats: async (params: CallParams<TrailingStopLossArgs['obj']['getPlatformStats()string'] | TrailingStopLossArgs['tuple']['getPlatformStats()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.getPlatformStats(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['getPlatformStats()string'])}
    },

    /**
     * Makes a call to the TrailingStopLoss smart contract using the `emergencyPauseOrders()string` ABI method.
     *
     * Emergency pause all orders
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyPauseOrders: async (params: CallParams<TrailingStopLossArgs['obj']['emergencyPauseOrders()string'] | TrailingStopLossArgs['tuple']['emergencyPauseOrders()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TrailingStopLossParamsFactory.emergencyPauseOrders(params))
      return {...result, return: result.return as unknown as (undefined | TrailingStopLossReturns['emergencyPauseOrders()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TrailingStopLossClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TrailingStopLoss app
   */
  state = {
  }

  public newGroup(): TrailingStopLossComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createTrailingOrder(string,string,string,string,string)string method call against the TrailingStopLoss contract
       */
      createTrailingOrder(params: CallParams<TrailingStopLossArgs['obj']['createTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createTrailingOrder(string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createTrailingOrder(params)))
        resultMappers.push((v) => client.decodeReturnValue('createTrailingOrder(string,string,string,string,string)string', v))
        return this
      },
      /**
       * Add a updateStopPrice(string,string,string)string method call against the TrailingStopLoss contract
       */
      updateStopPrice(params: CallParams<TrailingStopLossArgs['obj']['updateStopPrice(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateStopPrice(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateStopPrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('updateStopPrice(string,string,string)string', v))
        return this
      },
      /**
       * Add a checkExecutionCondition(string,string,string)string method call against the TrailingStopLoss contract
       */
      checkExecutionCondition(params: CallParams<TrailingStopLossArgs['obj']['checkExecutionCondition(string,string,string)string'] | TrailingStopLossArgs['tuple']['checkExecutionCondition(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkExecutionCondition(params)))
        resultMappers.push((v) => client.decodeReturnValue('checkExecutionCondition(string,string,string)string', v))
        return this
      },
      /**
       * Add a executeTrailingOrder(string,string,string,string,string)string method call against the TrailingStopLoss contract
       */
      executeTrailingOrder(params: CallParams<TrailingStopLossArgs['obj']['executeTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['executeTrailingOrder(string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.executeTrailingOrder(params)))
        resultMappers.push((v) => client.decodeReturnValue('executeTrailingOrder(string,string,string,string,string)string', v))
        return this
      },
      /**
       * Add a cancelTrailingOrder(string,string)string method call against the TrailingStopLoss contract
       */
      cancelTrailingOrder(params: CallParams<TrailingStopLossArgs['obj']['cancelTrailingOrder(string,string)string'] | TrailingStopLossArgs['tuple']['cancelTrailingOrder(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cancelTrailingOrder(params)))
        resultMappers.push((v) => client.decodeReturnValue('cancelTrailingOrder(string,string)string', v))
        return this
      },
      /**
       * Add a getOrderDetails(string)string method call against the TrailingStopLoss contract
       */
      getOrderDetails(params: CallParams<TrailingStopLossArgs['obj']['getOrderDetails(string)string'] | TrailingStopLossArgs['tuple']['getOrderDetails(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getOrderDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('getOrderDetails(string)string', v))
        return this
      },
      /**
       * Add a createBracketOrder(string,string,string,string,string,string)string method call against the TrailingStopLoss contract
       */
      createBracketOrder(params: CallParams<TrailingStopLossArgs['obj']['createBracketOrder(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createBracketOrder(string,string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBracketOrder(params)))
        resultMappers.push((v) => client.decodeReturnValue('createBracketOrder(string,string,string,string,string,string)string', v))
        return this
      },
      /**
       * Add a updateTrailDistance(string,string,string)string method call against the TrailingStopLoss contract
       */
      updateTrailDistance(params: CallParams<TrailingStopLossArgs['obj']['updateTrailDistance(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateTrailDistance(string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateTrailDistance(params)))
        resultMappers.push((v) => client.decodeReturnValue('updateTrailDistance(string,string,string)string', v))
        return this
      },
      /**
       * Add a getUserOrders(string)string method call against the TrailingStopLoss contract
       */
      getUserOrders(params: CallParams<TrailingStopLossArgs['obj']['getUserOrders(string)string'] | TrailingStopLossArgs['tuple']['getUserOrders(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserOrders(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserOrders(string)string', v))
        return this
      },
      /**
       * Add a setTimeBasedTrail(string,string,string,string,string,string)string method call against the TrailingStopLoss contract
       */
      setTimeBasedTrail(params: CallParams<TrailingStopLossArgs['obj']['setTimeBasedTrail(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['setTimeBasedTrail(string,string,string,string,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setTimeBasedTrail(params)))
        resultMappers.push((v) => client.decodeReturnValue('setTimeBasedTrail(string,string,string,string,string,string)string', v))
        return this
      },
      /**
       * Add a getPlatformStats()string method call against the TrailingStopLoss contract
       */
      getPlatformStats(params: CallParams<TrailingStopLossArgs['obj']['getPlatformStats()string'] | TrailingStopLossArgs['tuple']['getPlatformStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlatformStats()string', v))
        return this
      },
      /**
       * Add a emergencyPauseOrders()string method call against the TrailingStopLoss contract
       */
      emergencyPauseOrders(params: CallParams<TrailingStopLossArgs['obj']['emergencyPauseOrders()string'] | TrailingStopLossArgs['tuple']['emergencyPauseOrders()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyPauseOrders(params)))
        resultMappers.push((v) => client.decodeReturnValue('emergencyPauseOrders()string', v))
        return this
      },
      /**
       * Add a clear state call to the TrailingStopLoss contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TrailingStopLossComposer
  }
}
export type TrailingStopLossComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createTrailingOrder(string,string,string,string,string)string ABI method.
   *
   * Create a new trailing stop-loss order
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createTrailingOrder(params?: CallParams<TrailingStopLossArgs['obj']['createTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createTrailingOrder(string,string,string,string,string)string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['createTrailingOrder(string,string,string,string,string)string'] | undefined]>

  /**
   * Calls the updateStopPrice(string,string,string)string ABI method.
   *
   * Update stop price based on current market price
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateStopPrice(params?: CallParams<TrailingStopLossArgs['obj']['updateStopPrice(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateStopPrice(string,string,string)string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['updateStopPrice(string,string,string)string'] | undefined]>

  /**
   * Calls the checkExecutionCondition(string,string,string)string ABI method.
   *
   * Check if order should be executed based on current price
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkExecutionCondition(params?: CallParams<TrailingStopLossArgs['obj']['checkExecutionCondition(string,string,string)string'] | TrailingStopLossArgs['tuple']['checkExecutionCondition(string,string,string)string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['checkExecutionCondition(string,string,string)string'] | undefined]>

  /**
   * Calls the executeTrailingOrder(string,string,string,string,string)string ABI method.
   *
   * Execute trailing stop-loss order
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeTrailingOrder(params?: CallParams<TrailingStopLossArgs['obj']['executeTrailingOrder(string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['executeTrailingOrder(string,string,string,string,string)string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['executeTrailingOrder(string,string,string,string,string)string'] | undefined]>

  /**
   * Calls the cancelTrailingOrder(string,string)string ABI method.
   *
   * Cancel an active trailing order
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelTrailingOrder(params?: CallParams<TrailingStopLossArgs['obj']['cancelTrailingOrder(string,string)string'] | TrailingStopLossArgs['tuple']['cancelTrailingOrder(string,string)string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['cancelTrailingOrder(string,string)string'] | undefined]>

  /**
   * Calls the getOrderDetails(string)string ABI method.
   *
   * Get order details and current status
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOrderDetails(params?: CallParams<TrailingStopLossArgs['obj']['getOrderDetails(string)string'] | TrailingStopLossArgs['tuple']['getOrderDetails(string)string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['getOrderDetails(string)string'] | undefined]>

  /**
   * Calls the createBracketOrder(string,string,string,string,string,string)string ABI method.
   *
   * Create bracket order (buy + trailing stop + take profit)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBracketOrder(params?: CallParams<TrailingStopLossArgs['obj']['createBracketOrder(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['createBracketOrder(string,string,string,string,string,string)string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['createBracketOrder(string,string,string,string,string,string)string'] | undefined]>

  /**
   * Calls the updateTrailDistance(string,string,string)string ABI method.
   *
   * Update trail distance for existing order
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTrailDistance(params?: CallParams<TrailingStopLossArgs['obj']['updateTrailDistance(string,string,string)string'] | TrailingStopLossArgs['tuple']['updateTrailDistance(string,string,string)string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['updateTrailDistance(string,string,string)string'] | undefined]>

  /**
   * Calls the getUserOrders(string)string ABI method.
   *
   * Get user's active orders
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserOrders(params?: CallParams<TrailingStopLossArgs['obj']['getUserOrders(string)string'] | TrailingStopLossArgs['tuple']['getUserOrders(string)string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['getUserOrders(string)string'] | undefined]>

  /**
   * Calls the setTimeBasedTrail(string,string,string,string,string,string)string ABI method.
   *
   * Set time-based trail adjustments
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTimeBasedTrail(params?: CallParams<TrailingStopLossArgs['obj']['setTimeBasedTrail(string,string,string,string,string,string)string'] | TrailingStopLossArgs['tuple']['setTimeBasedTrail(string,string,string,string,string,string)string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['setTimeBasedTrail(string,string,string,string,string,string)string'] | undefined]>

  /**
   * Calls the getPlatformStats()string ABI method.
   *
   * Get platform statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformStats(params?: CallParams<TrailingStopLossArgs['obj']['getPlatformStats()string'] | TrailingStopLossArgs['tuple']['getPlatformStats()string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['getPlatformStats()string'] | undefined]>

  /**
   * Calls the emergencyPauseOrders()string ABI method.
   *
   * Emergency pause all orders
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyPauseOrders(params?: CallParams<TrailingStopLossArgs['obj']['emergencyPauseOrders()string'] | TrailingStopLossArgs['tuple']['emergencyPauseOrders()string']>): TrailingStopLossComposer<[...TReturns, TrailingStopLossReturns['emergencyPauseOrders()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TrailingStopLoss smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TrailingStopLossComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TrailingStopLossComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TrailingStopLossComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TrailingStopLossComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TrailingStopLossComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TrailingStopLossComposerResults<TReturns>>
}
export type TrailingStopLossComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

