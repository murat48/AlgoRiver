import { FinancialAnalysisService } from './financialAnalysisService'
import { GeminiApiService } from './geminiApiService'

export interface ChatMessage {
    id: string
    type: 'user' | 'ai'
    content: string
    timestamp: Date
    analysisData?: any
}

export interface ChatContext {
    userAddress?: string
    portfolioData?: any
    marketData?: any
    walletData?: any
    currentTab?: string
}

export class AIChatService {
    private financialAnalysisService: FinancialAnalysisService
    public geminiApiService: GeminiApiService
    private chatHistory: ChatMessage[] = []
    private context: ChatContext = {}

    constructor() {
        this.financialAnalysisService = new FinancialAnalysisService()
        this.geminiApiService = new GeminiApiService()
    }

    /**
     * Initialize chat with user context
     */
    initializeChat(userAddress: string, portfolioData?: any, marketData?: any) {
        this.context = {
            userAddress,
            portfolioData,
            marketData
        }
        
        // Only add welcome message if chat history is empty
        if (this.chatHistory.length === 0) {
            this.addAIMessage(
                `üëã Hello! I'm your Algorand blockchain expert assistant. ` +
                `I can only answer questions about Algorand and blockchain technologies. ` +
                `I can help you with Algorand staking, DeFi, tokenomics, and comparisons with other blockchains.\n\n` +
                `üîó **Pera Wallet Connected:** ${userAddress ? `‚úÖ ${userAddress.substring(0, 8)}...${userAddress.substring(-8)}` : '‚ùå Not connected'}\n` +
                `üìä **Portfolio Data:** ${portfolioData ? '‚úÖ Available' : '‚ùå Not available'}\n\n` +
                `üí° You can ask questions about portfolio, market, risk analysis and investment recommendations.\n\n` +
                `How can I help you today?`
            )
        }
    }

    /**
     * Get user's wallet summary for display
     */
    getWalletSummary(): string {
        if (!this.context.userAddress) {
            return '‚ùå Wallet not connected'
        }

        try {
            const userStakes = JSON.parse(localStorage.getItem('userStakes') || '[]')
            const userTransactions = JSON.parse(localStorage.getItem('userTransactions') || '[]')
            
            const userStakeTransactions = userStakes.filter((stake: any) => 
                stake.userAddress === this.context.userAddress
            )
            
            const userTxTransactions = userTransactions.filter((tx: any) => 
                tx.userAddress === this.context.userAddress
            )

            const totalStaked = userStakeTransactions.reduce((sum: number, stake: any) => sum + (stake.amount || 0), 0)
            const activeStakes = userStakeTransactions.filter((stake: any) => stake.status === 'active').length

            return `üîó **Wallet Summary:**
‚Ä¢ **Address:** ${this.context.userAddress.substring(0, 8)}...${this.context.userAddress.substring(-8)}
‚Ä¢ **Total Staked:** ${totalStaked.toFixed(2)} ALGO
‚Ä¢ **Active Stakes:** ${activeStakes} positions
‚Ä¢ **Total Transactions:** ${userTxTransactions.length} transactions
‚Ä¢ **Last Transaction:** ${userTxTransactions.length > 0 ? new Date(userTxTransactions[userTxTransactions.length - 1].timestamp).toLocaleDateString('en-US') : 'None'}`
        } catch (error) {
            console.error('Error getting wallet summary:', error)
            return '‚ùå Wallet data could not be retrieved'
        }
    }

    /**
     * Get user's wallet data and transactions
     */
    async getUserWalletData(): Promise<any> {
        if (!this.context.userAddress) {
            return null
        }

        try {
            // Get user's stake transactions from localStorage
            const userStakes = JSON.parse(localStorage.getItem('userStakes') || '[]')
            const userTransactions = JSON.parse(localStorage.getItem('userTransactions') || '[]')
            
            // Filter transactions for this user
            const userStakeTransactions = userStakes.filter((stake: any) => 
                stake.userAddress === this.context.userAddress
            )
            
            const userTxTransactions = userTransactions.filter((tx: any) => 
                tx.userAddress === this.context.userAddress
            )

            // Get account balance (mock for now)
            const accountBalance = await this.getAccountBalance(this.context.userAddress)

            return {
                address: this.context.userAddress,
                balance: accountBalance,
                stakeTransactions: userStakeTransactions,
                allTransactions: userTxTransactions,
                totalStaked: userStakeTransactions.reduce((sum: number, stake: any) => sum + (stake.amount || 0), 0),
                activeStakes: userStakeTransactions.filter((stake: any) => stake.status === 'active').length,
                lastTransaction: userTxTransactions.length > 0 ? userTxTransactions[userTxTransactions.length - 1] : null
            }
        } catch (error) {
            console.error('Error getting wallet data:', error)
            return null
        }
    }

    /**
     * Get account balance (mock implementation)
     */
    private async getAccountBalance(address: string): Promise<number> {
        try {
            // This would normally call Algorand API
            // For now, return a mock balance
            return Math.random() * 1000 // Mock balance between 0-1000 ALGO
        } catch (error) {
            console.error('Error getting account balance:', error)
            return 0
        }
    }

    /**
     * Process user message and generate AI response
     */
    async processMessage(userMessage: string): Promise<ChatMessage> {
        console.log('üöÄ Processing message:', userMessage)
        
        // Add user message to history
        const userMsg = this.addUserMessage(userMessage)
        console.log('‚úÖ User message added to history')
        
        try {
            // Get user's wallet data and transactions
            const userWalletData = await this.getUserWalletData()
            console.log('üìä Wallet Data:', userWalletData)
            
            // Check if we should use real AI API or fallback
            const useRealAI = this.shouldUseRealAI(userMessage)
            console.log('ü§ñ Using AI API:', useRealAI ? 'Yes' : 'No')
            
            let aiResponse: {content: string, analysisData?: any}
            
            if (useRealAI) {
                // Use Gemini API with wallet data
                const geminiResponse = await this.geminiApiService.generateAIResponse(userMessage, {
                    userAddress: this.context.userAddress,
                    portfolioData: this.context.portfolioData,
                    marketData: this.context.marketData,
                    walletData: userWalletData,
                    chatHistory: this.chatHistory.slice(-5) // Son 5 mesaj
                })
                
                aiResponse = {
                    content: geminiResponse.content,
                    analysisData: {
                        ...geminiResponse.analysisData,
                        source: geminiResponse.source,
                        timestamp: new Date().toISOString()
                    }
                }
                
                console.log('‚úÖ Gemini AI response generated:', geminiResponse.source)
            } else {
                // Use local intent-based responses
                const intent = this.analyzeIntent(userMessage)
                console.log('üéØ Detected intent:', intent)
                
                aiResponse = await this.generateResponse(intent, userMessage)
                console.log('ü§ñ Generated local response')
            }
            
            // Add AI response to history
            const aiMsg = this.addAIMessage(aiResponse.content, aiResponse.analysisData)
            console.log('‚úÖ AI response added to history')
            
            return aiMsg
            
        } catch (error) {
            console.error('‚ùå AI Chat processing error:', error)
            return this.addAIMessage(
                '√úzg√ºn√ºm, ≈üu anda bir hata olu≈ütu. L√ºtfen tekrar deneyin. üîÑ',
                null
            )
        }
    }

    /**
     * Determine if we should use real AI API or local responses
     */
    private shouldUseRealAI(message: string): boolean {
        // GE√áƒ∞Cƒ∞ TEST: Her zaman AI API kullan
        if (!this.geminiApiService.isAIConfigured()) {
            console.log('‚ùå Gemini API not configured, using local responses')
            return false
        }
        
        console.log('üß™ TEST MODE: Always using Gemini API')
        return true
        
        // Orijinal kod (≈üimdilik devre dƒ±≈üƒ±)
        /*
        const lowerMessage = message.toLowerCase()
        
        // Algorand spesifik sorular i√ßin AI kullan (en y√ºksek √∂ncelik)
        const algorandKeywords = [
            'algorand', 'algo', 'defi', 'tokenomics', 'ekonomi', 'ekonomik',
            'token', 'staking', 'consensus', 'ppos', 'teal', 'avm',
            'pyteal', 'reach', 'beaker', 'algokit', 'sdk', 'ekosistem',
            'ecosystem', 'teknik', 'technical', 'kar≈üƒ±la≈ütƒ±r', 'compare',
            'vs', 'fark', 'difference', '√∂zellik', 'feature', 'ayƒ±ran',
            'distinguishes', 'avantaj', 'advantage', 'neden', 'why'
        ]
        
        if (algorandKeywords.some(keyword => lowerMessage.includes(keyword))) {
            console.log('‚úÖ Algorand-specific question detected, using AI API')
            return true
        }
        
        // Soru i≈üareti veya "nedir" i√ßeren mesajlar i√ßin AI kullan
        if (lowerMessage.includes('?') || lowerMessage.includes('nedir') || lowerMessage.includes('what is')) {
            console.log('‚úÖ Question detected, using AI API')
            return true
        }
        
        // AI API kullanƒ±m kriterleri
        const useAIKeywords = [
            'analiz', 'analysis', 'deƒüerlendir', 'evaluate',
            'strateji', 'strategy', 'tavsiye', 'recommend',
            'optimize', 'iyile≈ütir', 'detaylƒ±', 'detailed',
            'kapsamlƒ±', 'comprehensive', 'nasƒ±l', 'how',
            'ne zaman', 'when', 'portfolyo', 'portfolio',
            'yatƒ±rƒ±m', 'investment', 'piyasa', 'market'
        ]
        
        // AI keywords varsa AI kullan
        if (useAIKeywords.some(keyword => lowerMessage.includes(keyword))) {
            console.log('‚úÖ AI keyword detected, using AI API')
            return true
        }
        
        // Uzun mesajlar i√ßin AI kullan
        if (message.length > 30) {
            console.log('‚úÖ Long message detected, using AI API')
            return true
        }
        
        // Kƒ±sa mesajlar i√ßin local kullan
        console.log('‚ùå Short/simple message, using local responses')
        return false
        */
    }

    /**
     * Analyze user intent from message
     */
    private analyzeIntent(message: string): string {
        const lowerMessage = message.toLowerCase()
        
        console.log('üîç Analyzing intent for message:', lowerMessage)
        
        // Check for specific questions FIRST - highest priority
        if (lowerMessage.includes('nedir') || lowerMessage.includes('what is') ||
            lowerMessage.includes('nasƒ±l') || lowerMessage.includes('how') ||
            lowerMessage.includes('ne kadar') || lowerMessage.includes('ka√ß') ||
            lowerMessage.includes('when') || lowerMessage.includes('?') ||
            lowerMessage.includes('√∂zellik') || lowerMessage.includes('feature') ||
            lowerMessage.includes('fark') || lowerMessage.includes('difference') ||
            lowerMessage.includes('ayƒ±ran') || lowerMessage.includes('distinguishes') ||
            lowerMessage.includes('avantaj') || lowerMessage.includes('advantage') ||
            lowerMessage.includes('neden') || lowerMessage.includes('why') ||
            lowerMessage.includes('tokenomics') || lowerMessage.includes('ekonomi') ||
            lowerMessage.includes('ekonomik') || lowerMessage.includes('token') ||
            lowerMessage.includes('defi') || lowerMessage.includes('ekosistem') ||
            lowerMessage.includes('ecosystem') || lowerMessage.includes('teknik') ||
            lowerMessage.includes('technical') || lowerMessage.includes('teal') ||
            lowerMessage.includes('consensus') || lowerMessage.includes('ppos') ||
            lowerMessage.includes('avm') || lowerMessage.includes('pyteal') ||
            lowerMessage.includes('reach') || lowerMessage.includes('beaker') ||
            lowerMessage.includes('algokit') || lowerMessage.includes('sdk')) {
            console.log('‚úÖ Intent: specific_question')
            return 'specific_question'
        }
        
        // Portfolio analysis keywords - more comprehensive
        if (lowerMessage.includes('portfolyo') || lowerMessage.includes('portfolio') || 
            lowerMessage.includes('yatƒ±rƒ±m') || lowerMessage.includes('investment') ||
            lowerMessage.includes('hesabƒ±m') || lowerMessage.includes('balance') ||
            lowerMessage.includes('bakiye') || lowerMessage.includes('wallet') ||
            lowerMessage.includes('c√ºzdan') || lowerMessage.includes('stake') ||
            lowerMessage.includes('unstake')) {
            console.log('‚úÖ Intent: portfolio_analysis')
            return 'portfolio_analysis'
        }
        
        // Market analysis keywords - more comprehensive
        if (lowerMessage.includes('piyasa') || lowerMessage.includes('market') || 
            lowerMessage.includes('trend') || lowerMessage.includes('fiyat') ||
            lowerMessage.includes('price') || lowerMessage.includes('algo') ||
            lowerMessage.includes('coin') || lowerMessage.includes('kripto') ||
            lowerMessage.includes('crypto') || lowerMessage.includes('bull') ||
            lowerMessage.includes('bear') || lowerMessage.includes('y√ºksel') ||
            lowerMessage.includes('d√º≈ü') || lowerMessage.includes('artƒ±≈ü')) {
            console.log('‚úÖ Intent: market_analysis')
            return 'market_analysis'
        }
        
        // Risk analysis keywords - more comprehensive
        if (lowerMessage.includes('risk') || lowerMessage.includes('g√ºvenli') || 
            lowerMessage.includes('safe') || lowerMessage.includes('zarar') ||
            lowerMessage.includes('loss') || lowerMessage.includes('tehlikeli') ||
            lowerMessage.includes('dangerous') || lowerMessage.includes('g√ºven') ||
            lowerMessage.includes('security') || lowerMessage.includes('emniyet')) {
            console.log('‚úÖ Intent: risk_analysis')
            return 'risk_analysis'
        }
        
        // Performance analysis keywords - more comprehensive
        if (lowerMessage.includes('performans') || lowerMessage.includes('performance') || 
            lowerMessage.includes('getiri') || lowerMessage.includes('apy') ||
            lowerMessage.includes('yield') || lowerMessage.includes('kazan√ß') ||
            lowerMessage.includes('profit') || lowerMessage.includes('ba≈üarƒ±') ||
            lowerMessage.includes('success') || lowerMessage.includes('roi') ||
            lowerMessage.includes('return') || lowerMessage.includes('kar')) {
            console.log('‚úÖ Intent: performance_analysis')
            return 'performance_analysis'
        }
        
        // Recommendation keywords - more comprehensive
        if (lowerMessage.includes('√∂ner') || lowerMessage.includes('recommend') || 
            lowerMessage.includes('ne yap') || lowerMessage.includes('tavsiye') ||
            lowerMessage.includes('suggest') || lowerMessage.includes('hangi') ||
            lowerMessage.includes('which') || lowerMessage.includes('en iyi') ||
            lowerMessage.includes('best') || lowerMessage.includes('pool') ||
            lowerMessage.includes('yatƒ±rƒ±m yap') || lowerMessage.includes('invest')) {
            console.log('‚úÖ Intent: recommendation')
            return 'recommendation'
        }
        
        // General help
        if (lowerMessage.includes('yardƒ±m') || lowerMessage.includes('help') || 
            lowerMessage.includes('ne yapabilir') || lowerMessage.includes('what can') ||
            lowerMessage.includes('nasƒ±l') || lowerMessage.includes('how') ||
            lowerMessage.includes('kullan') || lowerMessage.includes('use')) {
            console.log('‚úÖ Intent: help')
            return 'help'
        }
        
        
        console.log('‚úÖ Intent: general')
        return 'general'
    }

    /**
     * Generate AI response based on intent
     */
    private async generateResponse(intent: string, userMessage: string): Promise<{content: string, analysisData?: any}> {
        console.log('ü§ñ Generating response for intent:', intent)
        
        switch (intent) {
            case 'portfolio_analysis':
                return await this.handlePortfolioAnalysis()
                
            case 'market_analysis':
                return await this.handleMarketAnalysis()
                
            case 'risk_analysis':
                return await this.handleRiskAnalysis()
                
            case 'performance_analysis':
                return await this.handlePerformanceAnalysis()
                
            case 'recommendation':
                return await this.handleRecommendation()
                
            case 'help':
                return this.handleHelp()
                
            case 'specific_question':
                return this.handleSpecificQuestion(userMessage)
                
            default:
                return this.handleGeneralQuery(userMessage)
        }
    }

    /**
     * Handle portfolio analysis requests
     */
    private async handlePortfolioAnalysis(): Promise<{content: string, analysisData?: any}> {
        if (!this.context.userAddress) {
            return {
                content: 'Portfolyo analizi i√ßin √∂nce c√ºzdanƒ±nƒ±zƒ± baƒülamanƒ±z gerekiyor. üîó'
            }
        }

        try {
            const portfolioMetrics = await this.financialAnalysisService.analyzePortfolio(this.context.userAddress)
            
            const analysisData = {
                type: 'portfolio_metrics',
                data: portfolioMetrics
            }
            
            const content = `üìä **Portfolyo Analizi Raporu**\n\n` +
                `üí∞ **Toplam Deƒüer**: ${portfolioMetrics.totalValue.toFixed(2)} ALGO\n` +
                `üéØ **Stake Edilen**: ${portfolioMetrics.totalStaked.toFixed(2)} ALGO\n` +
                `üéÅ **Toplam √ñd√ºller**: ${portfolioMetrics.totalRewards.toFixed(2)} ALGO\n` +
                `üìà **APY**: %${portfolioMetrics.apy.toFixed(2)}\n` +
                `‚ö° **Performans Skoru**: ${portfolioMetrics.performanceScore}/100\n` +
                `üé≤ **Risk Skoru**: ${(portfolioMetrics.riskScore * 100).toFixed(1)}%\n` +
                `üìä **Volatilite**: %${(portfolioMetrics.volatility * 100).toFixed(2)}\n` +
                `üéØ **Sharpe Oranƒ±**: ${portfolioMetrics.sharpeRatio.toFixed(2)}\n` +
                `üìâ **Max D√º≈ü√º≈ü**: %${(portfolioMetrics.maxDrawdown * 100).toFixed(2)}\n` +
                `üèÜ **Kazanma Oranƒ±**: %${portfolioMetrics.winRate.toFixed(1)}\n\n` +
                `**Deƒüerlendirme**: ${this.getPortfolioAssessment(portfolioMetrics)}`
            
            return { content, analysisData }
            
        } catch (error) {
            return {
                content: 'Portfolyo analizi sƒ±rasƒ±nda bir hata olu≈ütu. L√ºtfen tekrar deneyin. üîÑ'
            }
        }
    }

    /**
     * Handle market analysis requests
     */
    private async handleMarketAnalysis(): Promise<{content: string, analysisData?: any}> {
        try {
            const marketTrends = await this.financialAnalysisService.getMarketTrends()
            
            const analysisData = {
                type: 'market_trends',
                data: marketTrends
            }
            
            const trendEmoji = marketTrends.overallTrend === 'bullish' ? 'üöÄ' : 
                              marketTrends.overallTrend === 'bearish' ? 'üìâ' : '‚û°Ô∏è'
            
            const content = `üìà **Piyasa Analizi**\n\n` +
                `${trendEmoji} **Genel Trend**: ${marketTrends.overallTrend.toUpperCase()}\n` +
                `üìä **G√ºven Skoru**: ${marketTrends.confidence}/100\n\n` +
                `**Ana Fakt√∂rler**:\n` +
                marketTrends.keyFactors.map(factor => `‚Ä¢ ${factor}`).join('\n') + '\n\n' +
                `**Piyasa √ñng√∂r√ºleri**:\n` +
                marketTrends.predictions.map(pred => 
                    `‚Ä¢ ${pred.timeframe}: ${pred.prediction} (${pred.confidence}% g√ºven)`
                ).join('\n')
            
            return { content, analysisData }
            
        } catch (error) {
            return {
                content: 'Piyasa analizi sƒ±rasƒ±nda bir hata olu≈ütu. L√ºtfen tekrar deneyin. üîÑ'
            }
        }
    }

    /**
     * Handle risk analysis requests
     */
    private async handleRiskAnalysis(): Promise<{content: string, analysisData?: any}> {
        try {
            const riskAssessment = await this.financialAnalysisService.assessRisk(this.context.userAddress || '')
            
            const analysisData = {
                type: 'risk_assessment',
                data: riskAssessment
            }
            
            const riskLevel = riskAssessment.overallRisk
            const riskEmoji = riskLevel === 'low' ? 'üü¢' : riskLevel === 'medium' ? 'üü°' : 'üî¥'
            
            const content = `üé≤ **Risk Analizi Raporu**\n\n` +
                `${riskEmoji} **Genel Risk Seviyesi**: ${riskLevel.toUpperCase()}\n\n` +
                `**Risk Fakt√∂rleri**:\n` +
                riskAssessment.riskFactors.map((factor: any) => 
                    `‚Ä¢ ${factor.factor}: ${factor.impact.toUpperCase()} - ${factor.description}`
                ).join('\n') + '\n\n' +
                `**Risk Azaltma √ñnerileri**:\n` +
                riskAssessment.recommendations.map((strategy: any) => 
                    `‚Ä¢ ${strategy}`
                ).join('\n') + '\n\n' +
                `**Genel Deƒüerlendirme**: Portfolyonuzun risk seviyesi ${riskLevel} olarak deƒüerlendirilmi≈ütir. Yukarƒ±daki √∂nerileri dikkate alarak risk y√∂netiminizi optimize edebilirsiniz.`
            
            return { content, analysisData }
            
        } catch (error) {
            return {
                content: 'Risk analizi sƒ±rasƒ±nda bir hata olu≈ütu. L√ºtfen tekrar deneyin. üîÑ'
            }
        }
    }

    /**
     * Handle performance analysis requests
     */
    private async handlePerformanceAnalysis(): Promise<{content: string, analysisData?: any}> {
        if (!this.context.userAddress) {
            return {
                content: 'Performans analizi i√ßin √∂nce c√ºzdanƒ±nƒ±zƒ± baƒülamanƒ±z gerekiyor. üîó'
            }
        }

        try {
            const portfolioMetrics = await this.financialAnalysisService.analyzePortfolio(this.context.userAddress)
            
            const analysisData = {
                type: 'performance_metrics',
                data: portfolioMetrics
            }
            
            const content = `‚ö° **Performans Analizi**\n\n` +
                `üìà **APY**: %${portfolioMetrics.apy.toFixed(2)}\n` +
                `üéØ **Performans Skoru**: ${portfolioMetrics.performanceScore}/100\n` +
                `üìä **Sharpe Oranƒ±**: ${portfolioMetrics.sharpeRatio.toFixed(2)}\n` +
                `üìâ **Max D√º≈ü√º≈ü**: %${(portfolioMetrics.maxDrawdown * 100).toFixed(2)}\n` +
                `üèÜ **Kazanma Oranƒ±**: %${portfolioMetrics.winRate.toFixed(1)}\n` +
                `üé≤ **Volatilite**: %${(portfolioMetrics.volatility * 100).toFixed(2)}\n\n` +
                `**Performans Deƒüerlendirmesi**:\n` +
                this.getPerformanceAssessment(portfolioMetrics) + '\n\n' +
                `**ƒ∞yile≈ütirme √ñnerileri**:\n` +
                this.getPerformanceRecommendations(portfolioMetrics)
            
            return { content, analysisData }
            
        } catch (error) {
            return {
                content: 'Performans analizi sƒ±rasƒ±nda bir hata olu≈ütu. L√ºtfen tekrar deneyin. üîÑ'
            }
        }
    }

    /**
     * Handle recommendation requests
     */
    private async handleRecommendation(): Promise<{content: string, analysisData?: any}> {
        try {
            const poolAnalysis = await this.financialAnalysisService.analyzePools(['pool1', 'pool2', 'pool3'])
            
            const analysisData = {
                type: 'pool_recommendations',
                data: poolAnalysis
            }
            
            const content = `üéØ **Yatƒ±rƒ±m √ñnerileri**\n\n` +
                `**En ƒ∞yi Pool'lar**:\n` +
                poolAnalysis.map((pool: any, index: number) => 
                    `${index + 1}. **${pool.poolName}**\n` +
                    `   üìà APY: %${pool.apy.toFixed(2)}\n` +
                    `   üéØ Risk: ${pool.riskLevel}\n` +
                    `   üí∞ TVL: ${pool.tvl.toFixed(2)} ALGO\n` +
                    `   ‚≠ê Likidite Skoru: ${pool.liquidityScore}/100\n` +
                    `   üìä √ñneri: ${pool.recommendation.toUpperCase()}\n`
                ).join('\n') + '\n\n' +
                `**Genel Deƒüerlendirme**:\n` +
                `‚Ä¢ Toplam ${poolAnalysis.length} pool analiz edildi\n` +
                `‚Ä¢ Ortalama APY: %${(poolAnalysis.reduce((sum: number, pool: any) => sum + pool.apy, 0) / poolAnalysis.length).toFixed(2)}\n` +
                `‚Ä¢ Risk daƒüƒ±lƒ±mƒ±: ${poolAnalysis.filter((p: any) => p.riskLevel === 'low').length} d√º≈ü√ºk, ${poolAnalysis.filter((p: any) => p.riskLevel === 'medium').length} orta, ${poolAnalysis.filter((p: any) => p.riskLevel === 'high').length} y√ºksek`
            
            return { content, analysisData }
            
        } catch (error) {
            return {
                content: 'Yatƒ±rƒ±m √∂nerileri alƒ±nƒ±rken bir hata olu≈ütu. L√ºtfen tekrar deneyin. üîÑ'
            }
        }
    }

    /**
     * Handle help requests
     */
    private handleHelp(): {content: string, analysisData?: any} {
        const content = `ü§ñ **AI Analiz Asistanƒ± Yardƒ±m**\n\n` +
            `Size ≈üu konularda yardƒ±mcƒ± olabilirim:\n\n` +
            `üìä **Portfolyo Analizi**: "Portfolyom nasƒ±l?" veya "Yatƒ±rƒ±mlarƒ±mƒ± analiz et"\n` +
            `üìà **Piyasa Analizi**: "Piyasa nasƒ±l?" veya "Trend analizi yap"\n` +
            `üé≤ **Risk Analizi**: "Risk seviyem nedir?" veya "G√ºvenli mi?"\n` +
            `‚ö° **Performans**: "Performansƒ±m nasƒ±l?" veya "Getiri analizi"\n` +
            `üéØ **√ñneriler**: "Ne √∂nerirsin?" veya "Hangi pool'a yatƒ±rƒ±m yapayƒ±m?"\n\n` +
            `**√ñrnek Sorular**:\n` +
            `‚Ä¢ "Portfolyomun risk seviyesi nedir?"\n` +
            `‚Ä¢ "Hangi pool'lar en iyi performansƒ± g√∂steriyor?"\n` +
            `‚Ä¢ "Piyasa trendi nasƒ±l, ne yapmalƒ±yƒ±m?"\n` +
            `‚Ä¢ "APY'mi nasƒ±l artƒ±rabilirim?"\n\n` +
            `üí° **ƒ∞pucu**: Sorularƒ±nƒ±zƒ± T√ºrk√ße veya ƒ∞ngilizce sorabilirsiniz!`
        
        return { content, analysisData: null }
    }

    /**
     * Handle specific questions
     */
    private handleSpecificQuestion(userMessage: string): {content: string, analysisData?: any} {
        const lowerMessage = userMessage.toLowerCase()
        
        // Common specific questions with direct answers
        if (lowerMessage.includes('algo nedir') || lowerMessage.includes('what is algo') ||
            lowerMessage.includes('algorand nedir') || lowerMessage.includes('what is algorand')) {
            return {
                content: `ü™ô **Algorand (ALGO) Nedir?**\n\n` +
                `Algorand, hƒ±zlƒ± ve g√ºvenli blockchain teknolojisi sunan bir kripto para birimidir.\n\n` +
                `**√ñzellikler:**\n` +
                `‚Ä¢ ‚ö° Hƒ±zlƒ± i≈ülemler (4.5 saniye)\n` +
                `‚Ä¢ üîí G√ºvenli Proof-of-Stake\n` +
                `‚Ä¢ üíö √áevre dostu\n` +
                `‚Ä¢ üåç Global eri≈üim\n\n` +
                `**DeFi Kullanƒ±mƒ±:**\n` +
                `‚Ä¢ Liquidity mining\n` +
                `‚Ä¢ Yield farming\n` +
                `‚Ä¢ Staking rewards\n` +
                `‚Ä¢ DEX trading\n\n` +
                `Portfolyonuzda ALGO analizi yapmak ister misiniz? üìä`,
                analysisData: null
            }
        }
        
        if (lowerMessage.includes('staking nedir') || lowerMessage.includes('what is staking')) {
            return {
                content: `üéØ **Staking Nedir?**\n\n` +
                `Staking, kripto para birimlerinizi blockchain aƒüƒ±nda kilitleyerek √∂d√ºl kazanma i≈ülemidir.\n\n` +
                `**Nasƒ±l √áalƒ±≈üƒ±r:**\n` +
                `‚Ä¢ üí∞ ALGO'larƒ±nƒ±zƒ± stake edersiniz\n` +
                `‚Ä¢ üîí Belirli s√ºre kilitleme\n` +
                `‚Ä¢ üéÅ APY √∂d√ºlleri alƒ±rsƒ±nƒ±z\n` +
                `‚Ä¢ üìà Pasif gelir elde edersiniz\n\n` +
                `**Avantajlar:**\n` +
                `‚Ä¢ Risk d√º≈ü√ºk\n` +
                `‚Ä¢ G√ºvenli gelir\n` +
                `‚Ä¢ Aƒü g√ºvenliƒüine katkƒ±\n\n` +
                `Staking performansƒ±nƒ±zƒ± analiz etmek ister misiniz? üìä`,
                analysisData: null
            }
        }
        
        if (lowerMessage.includes('apy nedir') || lowerMessage.includes('what is apy')) {
            return {
                content: `üìà **APY (Annual Percentage Yield) Nedir?**\n\n` +
                `APY, yƒ±llƒ±k y√ºzde getiri oranƒ±dƒ±r. Yatƒ±rƒ±mƒ±nƒ±zdan ne kadar kazan√ß elde edeceƒüinizi g√∂sterir.\n\n` +
                `**Hesaplama:**\n` +
                `‚Ä¢ üí∞ Ana para + bile≈üik faiz\n` +
                `‚Ä¢ üìä Yƒ±llƒ±k bazda\n` +
                `‚Ä¢ üéØ Net getiri oranƒ±\n\n` +
                `**√ñrnek:**\n` +
                `‚Ä¢ %10 APY = 100 ALGO ‚Üí 110 ALGO (1 yƒ±l)\n` +
                `‚Ä¢ %15 APY = 100 ALGO ‚Üí 115 ALGO (1 yƒ±l)\n\n` +
                `Mevcut APY'nizi kontrol etmek ister misiniz? üéØ`,
                analysisData: null
            }
        }
        
        if (lowerMessage.includes('risk nedir') || lowerMessage.includes('what is risk')) {
            return {
                content: `üé≤ **Risk Analizi Nedir?**\n\n` +
                `Risk analizi, yatƒ±rƒ±mlarƒ±nƒ±zƒ±n potansiyel kayƒ±plarƒ±nƒ± deƒüerlendirme s√ºrecidir.\n\n` +
                `**Risk T√ºrleri:**\n` +
                `‚Ä¢ üìâ Piyasa riski\n` +
                `‚Ä¢ üîí Likidite riski\n` +
                `‚Ä¢ üí∞ Volatilite riski\n` +
                `‚Ä¢ üè¶ Smart contract riski\n\n` +
                `**Risk Seviyeleri:**\n` +
                `‚Ä¢ üü¢ D√º≈ü√ºk: %0-30\n` +
                `‚Ä¢ üü° Orta: %30-60\n` +
                `‚Ä¢ üî¥ Y√ºksek: %60-100\n\n` +
                `Portfolyonuzun risk seviyesini analiz etmek ister misiniz? üõ°Ô∏è`,
                analysisData: null
            }
        }
        
        if (lowerMessage.includes('defi nedir') || lowerMessage.includes('what is defi')) {
            return {
                content: `üè¶ **DeFi (Decentralized Finance) Nedir?**\n\n` +
                `DeFi, merkezi olmayan finansal hizmetler sunan blockchain tabanlƒ± sistemlerdir.\n\n` +
                `**DeFi √ñzellikleri:**\n` +
                `‚Ä¢ üè¶ Bankasƒ±z finans\n` +
                `‚Ä¢ üîì A√ßƒ±k kaynak kod\n` +
                `‚Ä¢ üåç Global eri≈üim\n` +
                `‚Ä¢ üí∞ D√º≈ü√ºk maliyet\n` +
                `‚Ä¢ ‚ö° Hƒ±zlƒ± i≈ülemler\n\n` +
                `**Algorand DeFi:**\n` +
                `‚Ä¢ Liquidity Mining\n` +
                `‚Ä¢ Yield Farming\n` +
                `‚Ä¢ Staking Rewards\n` +
                `‚Ä¢ DEX Trading\n\n` +
                `Algorand DeFi ekosisteminde yatƒ±rƒ±m yapmak ister misiniz? üöÄ`,
                analysisData: null
            }
        }
        
        if (lowerMessage.includes('liquidity nedir') || lowerMessage.includes('what is liquidity')) {
            return {
                content: `üíß **Liquidity (Likidite) Nedir?**\n\n` +
                `Likidite, bir varlƒ±ƒüƒ±n hƒ±zlƒ±ca nakde √ßevrilebilme kolaylƒ±ƒüƒ±dƒ±r.\n\n` +
                `**Likidite T√ºrleri:**\n` +
                `‚Ä¢ üí∞ Y√ºksek Likidite: Kolay alƒ±m-satƒ±m\n` +
                `‚Ä¢ üîí D√º≈ü√ºk Likidite: Zor alƒ±m-satƒ±m\n` +
                `‚Ä¢ üìä Orta Likidite: Dengeli i≈ülem\n\n` +
                `**Liquidity Mining:**\n` +
                `‚Ä¢ Pool'lara likidite saƒülama\n` +
                `‚Ä¢ APY √∂d√ºlleri alma\n` +
                `‚Ä¢ Pasif gelir elde etme\n` +
                `‚Ä¢ Risk-getiri dengesi\n\n` +
                `Likidite mining stratejinizi analiz etmek ister misiniz? üìà`,
                analysisData: null
            }
        }
        
        if (lowerMessage.includes('yield farming nedir') || lowerMessage.includes('what is yield farming')) {
            return {
                content: `üåæ **Yield Farming Nedir?**\n\n` +
                `Yield Farming, kripto varlƒ±klarƒ±nƒ±zƒ± farklƒ± protokollerde kullanarak maksimum getiri elde etme stratejisidir.\n\n` +
                `**Nasƒ±l √áalƒ±≈üƒ±r:**\n` +
                `‚Ä¢ üí∞ Token'larƒ±nƒ±zƒ± stake edersiniz\n` +
                `‚Ä¢ üéÅ √ñd√ºl token'larƒ± alƒ±rsƒ±nƒ±z\n` +
                `‚Ä¢ üìà APY optimizasyonu yaparsƒ±nƒ±z\n` +
                `‚Ä¢ üîÑ Otomatik compound edersiniz\n\n` +
                `**Riskler:**\n` +
                `‚Ä¢ Smart contract riski\n` +
                `‚Ä¢ Impermanent loss\n` +
                `‚Ä¢ Volatilite riski\n\n` +
                `Yield farming stratejinizi optimize etmek ister misiniz? üéØ`,
                analysisData: null
            }
        }
        
        // Algorand specific questions about features and differences
        if (lowerMessage.includes('algorand') && (lowerMessage.includes('√∂zellik') || lowerMessage.includes('fark') || lowerMessage.includes('ayƒ±ran'))) {
            return {
                content: `üöÄ **Algorand'ƒ±n Diƒüer Blockchain'lerden Ayƒ±ran √ñzellikleri:**\n\n` +
                `**‚ö° Hƒ±z ve Performans:**\n` +
                `‚Ä¢ 4.5 saniye finality (Bitcoin: 60 dk, Ethereum: 6-15 dk)\n` +
                `‚Ä¢ 6000+ TPS kapasitesi (Bitcoin: 7 TPS, Ethereum: 15 TPS)\n` +
                `‚Ä¢ Anƒ±nda i≈ülem onayƒ±\n` +
                `‚Ä¢ D√º≈ü√ºk latency (< 1 saniye)\n` +
                `‚Ä¢ Deterministic finality\n\n` +
                `**üîí G√ºvenlik:**\n` +
                `‚Ä¢ Pure Proof-of-Stake (PPoS)\n` +
                `‚Ä¢ Byzantine fault tolerance\n` +
                `‚Ä¢ %51 saldƒ±rƒ± korumasƒ±\n` +
                `‚Ä¢ Matematiksel g√ºvenlik\n` +
                `‚Ä¢ No forking risk\n` +
                `‚Ä¢ Cryptographic sortition\n\n` +
                `**üíö √áevre Dostu:**\n` +
                `‚Ä¢ D√º≈ü√ºk enerji t√ºketimi (Bitcoin'in %0.001'i)\n` +
                `‚Ä¢ Carbon negative\n` +
                `‚Ä¢ S√ºrd√ºr√ºlebilir blockchain\n` +
                `‚Ä¢ ESG uyumlu\n` +
                `‚Ä¢ Green blockchain sertifikasƒ±\n\n` +
                `**üåç Kullanƒ±m Kolaylƒ±ƒüƒ±:**\n` +
                `‚Ä¢ Basit geli≈ütirme (Python, JavaScript, Go)\n` +
                `‚Ä¢ D√º≈ü√ºk transaction fee (0.001 ALGO)\n` +
                `‚Ä¢ Global eri≈üim\n` +
                `‚Ä¢ Kurumsal uyumluluk\n` +
                `‚Ä¢ Regulatory compliance\n\n` +
                `**üí° DeFi Avantajlarƒ±:**\n` +
                `‚Ä¢ Hƒ±zlƒ± finality\n` +
                `‚Ä¢ D√º≈ü√ºk slippage\n` +
                `‚Ä¢ Efficient AMM\n` +
                `‚Ä¢ Scalable DeFi\n` +
                `‚Ä¢ Atomic transfers\n` +
                `‚Ä¢ Smart contracts (TEAL)\n\n` +
                `**üèóÔ∏è Teknik Detaylar:**\n` +
                `‚Ä¢ Consensus: Pure Proof-of-Stake\n` +
                `‚Ä¢ Block time: 4.5 saniye\n` +
                `‚Ä¢ Transaction fee: 0.001 ALGO\n` +
                `‚Ä¢ Smart contract: TEAL (Transaction Execution Approval Language)\n` +
                `‚Ä¢ Virtual machine: AVM (Algorand Virtual Machine)\n\n` +
                `Algorand ekosisteminde yatƒ±rƒ±m stratejinizi geli≈ütirmek ister misiniz? üìä`,
                analysisData: null
            }
        }
        
        // Algorand Tokenomics and Economics
        if (lowerMessage.includes('algorand') && (lowerMessage.includes('tokenomics') || lowerMessage.includes('ekonomi') || lowerMessage.includes('ekonomik') || lowerMessage.includes('token'))) {
            return {
                content: `üí∞ **Algorand Tokenomics ve Ekonomik Model:**\n\n` +
                `**ü™ô ALGO Token Detaylarƒ±:**\n` +
                `‚Ä¢ Toplam arz: 10 milyar ALGO\n` +
                `‚Ä¢ Dola≈üƒ±mda: ~7.5 milyar ALGO\n` +
                `‚Ä¢ Market cap: ~$2.5 milyar\n` +
                `‚Ä¢ Token standardƒ±: Native token\n` +
                `‚Ä¢ Decimal: 6 (mikroALGO)\n\n` +
                `**üìä Token Daƒüƒ±lƒ±mƒ±:**\n` +
                `‚Ä¢ %25: Algorand Inc.\n` +
                `‚Ä¢ %25: Algorand Foundation\n` +
                `‚Ä¢ %50: Community rewards\n\n` +
                `**üéØ Ekonomik Model:**\n` +
                `‚Ä¢ Deflationary mechanism\n` +
                `‚Ä¢ Governance rewards\n` +
                `‚Ä¢ Staking rewards (~6-8% APY)\n` +
                `‚Ä¢ Transaction fees: 0.001 ALGO\n` +
                `‚Ä¢ No mining rewards\n\n` +
                `**üèõÔ∏è Governance:**\n` +
                `‚Ä¢ Decentralized governance\n` +
                `‚Ä¢ Voting power: ALGO miktarƒ±na g√∂re\n` +
                `‚Ä¢ Governance rewards: %8-12 APY\n` +
                `‚Ä¢ Quarterly voting periods\n\n` +
                `**üíé DeFi Ekosistemi:**\n` +
                `‚Ä¢ TVL: ~$200 milyon\n` +
                `‚Ä¢ DEX'ler: Tinyman, PactFi, WagmiSwap\n` +
                `‚Ä¢ Lending: Folks Finance, AlgoFi\n` +
                `‚Ä¢ Stablecoins: USDC, USDT, USDCa\n\n` +
                `**üìà Yatƒ±rƒ±m Potansiyeli:**\n` +
                `‚Ä¢ Kurumsal adoption artƒ±≈üƒ±\n` +
                `‚Ä¢ CBDC projeleri\n` +
                `‚Ä¢ DeFi ekosistem b√ºy√ºmesi\n` +
                `‚Ä¢ NFT ve gaming projeleri\n\n` +
                `Algorand tokenomics analizi yapmak ister misiniz? üìä`,
                analysisData: null
            }
        }
        
        // Algorand DeFi Ecosystem
        if (lowerMessage.includes('algorand') && (lowerMessage.includes('defi') || lowerMessage.includes('ekosistem') || lowerMessage.includes('ecosystem'))) {
            return {
                content: `üè¶ **Algorand DeFi Ekosistemi:**\n\n` +
                `**üîÑ DEX'ler (Decentralized Exchanges):**\n` +
                `‚Ä¢ **Tinyman**: ƒ∞lk AMM, %0.3 fee\n` +
                `‚Ä¢ **PactFi**: Concentrated liquidity\n` +
                `‚Ä¢ **WagmiSwap**: Multi-pool AMM\n` +
                `‚Ä¢ **HumbleSwap**: Community-driven\n\n` +
                `**üí∞ Lending/Borrowing:**\n` +
                `‚Ä¢ **Folks Finance**: Institutional DeFi\n` +
                `‚Ä¢ **AlgoFi**: Lending ve borrowing\n` +
                `‚Ä¢ **GARD**: Stablecoin lending\n` +
                `‚Ä¢ **Pact**: Multi-asset lending\n\n` +
                `**üèõÔ∏è Stablecoins:**\n` +
                `‚Ä¢ **USDC**: Circle's USD Coin\n` +
                `‚Ä¢ **USDT**: Tether USD\n` +
                `‚Ä¢ **USDCa**: Algorand native USDC\n` +
                `‚Ä¢ **GARD**: Algorand stablecoin\n\n` +
                `**üéØ Yield Farming:**\n` +
                `‚Ä¢ Liquidity mining rewards\n` +
                `‚Ä¢ Governance token rewards\n` +
                `‚Ä¢ Multi-pool strategies\n` +
                `‚Ä¢ Auto-compounding\n\n` +
                `**üîí Security Features:**\n` +
                `‚Ä¢ Formal verification\n` +
                `‚Ä¢ Audit requirements\n` +
                `‚Ä¢ Insurance protocols\n` +
                `‚Ä¢ Bug bounty programs\n\n` +
                `**üìä TVL ve Metrikler:**\n` +
                `‚Ä¢ Total Value Locked: ~$200M\n` +
                `‚Ä¢ Daily volume: ~$50M\n` +
                `‚Ä¢ Active users: ~100K\n` +
                `‚Ä¢ Protocols: 50+\n\n` +
                `**üöÄ Gelecek Projeler:**\n` +
                `‚Ä¢ Cross-chain bridges\n` +
                `‚Ä¢ Institutional DeFi\n` +
                `‚Ä¢ CBDC integration\n` +
                `‚Ä¢ Gaming protocols\n\n` +
                `Algorand DeFi stratejinizi optimize etmek ister misiniz? üéØ`,
                analysisData: null
            }
        }
        
        // Algorand Technical Details
        if (lowerMessage.includes('algorand') && (lowerMessage.includes('teknik') || lowerMessage.includes('technical') || lowerMessage.includes('teal') || lowerMessage.includes('consensus'))) {
            return {
                content: `üèóÔ∏è **Algorand Teknik Detaylarƒ±:**\n\n` +
                `**‚öôÔ∏è Consensus Algoritmasƒ±:**\n` +
                `‚Ä¢ **Pure Proof-of-Stake (PPoS)**\n` +
                `‚Ä¢ Byzantine fault tolerance\n` +
                `‚Ä¢ Cryptographic sortition\n` +
                `‚Ä¢ No forking risk\n` +
                `‚Ä¢ Deterministic finality\n\n` +
                `**üíª Smart Contract Teknolojisi:**\n` +
                `‚Ä¢ **TEAL**: Transaction Execution Approval Language\n` +
                `‚Ä¢ **AVM**: Algorand Virtual Machine\n` +
                `‚Ä¢ **PyTeal**: Python wrapper\n` +
                `‚Ä¢ **Reach**: High-level language\n` +
                `‚Ä¢ **Beaker**: Development framework\n\n` +
                `**üîß Geli≈ütirici Ara√ßlarƒ±:**\n` +
                `‚Ä¢ **Algorand SDK**: Python, JavaScript, Go, Java\n` +
                `‚Ä¢ **AlgoKit**: Modern development toolkit\n` +
                `‚Ä¢ **Algorand Studio**: IDE\n` +
                `‚Ä¢ **AlgoExplorer**: Block explorer\n` +
                `‚Ä¢ **Algorand TestNet**: Test environment\n\n` +
                `**üì° Network √ñzellikleri:**\n` +
                `‚Ä¢ Block time: 4.5 saniye\n` +
                `‚Ä¢ Transaction fee: 0.001 ALGO\n` +
                `‚Ä¢ Throughput: 6000+ TPS\n` +
                `‚Ä¢ Latency: < 1 saniye\n` +
                `‚Ä¢ Finality: Deterministic\n\n` +
                `**üîê G√ºvenlik √ñzellikleri:**\n` +
                `‚Ä¢ Formal verification\n` +
                `‚Ä¢ Cryptographic proofs\n` +
                `‚Ä¢ No slashing risk\n` +
                `‚Ä¢ Quantum-resistant\n` +
                `‚Ä¢ Audit-friendly\n\n` +
                `**üåê Network Katmanlarƒ±:**\n` +
                `‚Ä¢ **Consensus Layer**: PPoS\n` +
                `‚Ä¢ **Network Layer**: Gossip protocol\n` +
                `‚Ä¢ **Application Layer**: Smart contracts\n` +
                `‚Ä¢ **Infrastructure Layer**: Nodes\n\n` +
                `**üìä Performans Metrikleri:**\n` +
                `‚Ä¢ CPU usage: Minimal\n` +
                `‚Ä¢ Memory usage: Low\n` +
                `‚Ä¢ Bandwidth: Efficient\n` +
                `‚Ä¢ Energy consumption: Ultra-low\n\n` +
                `Algorand geli≈ütirme konusunda detaylƒ± bilgi almak ister misiniz? üöÄ`,
                analysisData: null
            }
        }
        
        // General blockchain questions
        if (lowerMessage.includes('blockchain') && (lowerMessage.includes('√∂zellik') || lowerMessage.includes('fark') || lowerMessage.includes('ayƒ±ran'))) {
            return {
                content: `üîó **Blockchain Teknolojisinin Temel √ñzellikleri:**\n\n` +
                `**üîí G√ºvenlik:**\n` +
                `‚Ä¢ Kriptografik hash\n` +
                `‚Ä¢ Immutable ledger\n` +
                `‚Ä¢ Decentralized consensus\n` +
                `‚Ä¢ Tamper-proof\n\n` +
                `**üåç Merkeziyetsizlik:**\n` +
                `‚Ä¢ Aracƒ±sƒ±z i≈ülemler\n` +
                `‚Ä¢ Global eri≈üim\n` +
                `‚Ä¢ Censorship resistance\n` +
                `‚Ä¢ Peer-to-peer\n\n` +
                `**‚ö° ≈ûeffaflƒ±k:**\n` +
                `‚Ä¢ Public ledger\n` +
                `‚Ä¢ Traceable transactions\n` +
                `‚Ä¢ Audit trail\n` +
                `‚Ä¢ Open source\n\n` +
                `**üí∞ Ekonomik Model:**\n` +
                `‚Ä¢ Token economics\n` +
                `‚Ä¢ Incentive mechanisms\n` +
                `‚Ä¢ Fee structures\n` +
                `‚Ä¢ Value distribution\n\n` +
                `**üöÄ Algorand'ƒ±n √úst√ºnl√ºkleri:**\n` +
                `‚Ä¢ Hƒ±zlƒ± finality\n` +
                `‚Ä¢ D√º≈ü√ºk maliyet\n` +
                `‚Ä¢ √áevre dostu\n` +
                `‚Ä¢ Kurumsal uyumluluk\n\n` +
                `Algorand ekosisteminde detaylƒ± analiz yapmak ister misiniz? üìà`,
                analysisData: null
            }
        }
        
        // Algorand Staking Details
        if (lowerMessage.includes('algorand') && (lowerMessage.includes('staking') || lowerMessage.includes('stake') || lowerMessage.includes('√∂d√ºl') || lowerMessage.includes('reward'))) {
            return {
                content: `üéØ **Algorand Staking Detaylarƒ±:**\n\n` +
                `**üîí Staking Mekanizmasƒ±:**\n` +
                `‚Ä¢ **Pure Proof-of-Stake (PPoS)**\n` +
                `‚Ä¢ Minimum stake: 1 ALGO\n` +
                `‚Ä¢ Anƒ±nda unstaking\n` +
                `‚Ä¢ No slashing risk\n` +
                `‚Ä¢ No lock-up period\n\n` +
                `**üí∞ Reward Oranlarƒ±:**\n` +
                `‚Ä¢ Staking rewards: ~6-8% APY\n` +
                `‚Ä¢ Governance rewards: ~8-12% APY\n` +
                `‚Ä¢ Combined rewards: ~14-20% APY\n` +
                `‚Ä¢ Daily distribution\n` +
                `‚Ä¢ Compound interest\n\n` +
                `**üèõÔ∏è Governance Staking:**\n` +
                `‚Ä¢ Commit period: 3 ay\n` +
                `‚Ä¢ Voting power: Stake miktarƒ±na g√∂re\n` +
                `‚Ä¢ Quarterly rewards\n` +
                `‚Ä¢ Proposal voting\n` +
                `‚Ä¢ Parameter changes\n\n` +
                `**‚ö° Staking Avantajlarƒ±:**\n` +
                `‚Ä¢ Pasif gelir\n` +
                `‚Ä¢ Aƒü g√ºvenliƒüine katkƒ±\n` +
                `‚Ä¢ D√º≈ü√ºk risk\n` +
                `‚Ä¢ Kolay ba≈ülangƒ±√ß\n` +
                `‚Ä¢ Liquidity korunur\n\n` +
                `**üìä Staking Stratejileri:**\n` +
                `‚Ä¢ **Conservative**: Sadece staking\n` +
                `‚Ä¢ **Balanced**: Staking + governance\n` +
                `‚Ä¢ **Aggressive**: Staking + DeFi\n` +
                `‚Ä¢ **Hybrid**: Multi-platform\n\n` +
                `**üîß Staking Ara√ßlarƒ±:**\n` +
                `‚Ä¢ **Pera Wallet**: Mobile staking\n` +
                `‚Ä¢ **Algorand Wallet**: Desktop\n` +
                `‚Ä¢ **Ledger**: Hardware wallet\n` +
                `‚Ä¢ **Exchanges**: Binance, Coinbase\n\n` +
                `**üìà Staking Optimizasyonu:**\n` +
                `‚Ä¢ Regular compounding\n` +
                `‚Ä¢ Governance participation\n` +
                `‚Ä¢ Multi-wallet strategy\n` +
                `‚Ä¢ Tax optimization\n\n` +
                `Staking stratejinizi optimize etmek ister misiniz? üöÄ`,
                analysisData: null
            }
        }
        
        // Algorand vs Other Blockchains
        if (lowerMessage.includes('algorand') && (lowerMessage.includes('vs') || lowerMessage.includes('kar≈üƒ±la≈ütƒ±r') || lowerMessage.includes('compare') || lowerMessage.includes('fark'))) {
            return {
                content: `‚öñÔ∏è **Algorand vs Diƒüer Blockchain'ler:**\n\n` +
                `**üöÄ Algorand vs Bitcoin:**\n` +
                `‚Ä¢ Finality: 4.5s vs 60dk\n` +
                `‚Ä¢ TPS: 6000+ vs 7\n` +
                `‚Ä¢ Energy: Ultra-low vs High\n` +
                `‚Ä¢ Smart contracts: Yes vs No\n` +
                `‚Ä¢ Fees: $0.0002 vs $5-50\n\n` +
                `**‚ö° Algorand vs Ethereum:**\n` +
                `‚Ä¢ Finality: 4.5s vs 6-15dk\n` +
                `‚Ä¢ TPS: 6000+ vs 15\n` +
                `‚Ä¢ Energy: Ultra-low vs High\n` +
                `‚Ä¢ Fees: $0.0002 vs $5-100\n` +
                `‚Ä¢ Scalability: Native vs Layer 2\n\n` +
                `**üîó Algorand vs Solana:**\n` +
                `‚Ä¢ Finality: Deterministic vs Probabilistic\n` +
                `‚Ä¢ TPS: 6000+ vs 65000+\n` +
                `‚Ä¢ Energy: Ultra-low vs Low\n` +
                `‚Ä¢ Downtime: None vs Occasional\n` +
                `‚Ä¢ Security: Formal vs Informal\n\n` +
                `**üíé Algorand vs Cardano:**\n` +
                `‚Ä¢ Finality: 4.5s vs 20s\n` +
                `‚Ä¢ TPS: 6000+ vs 250\n` +
                `‚Ä¢ Energy: Ultra-low vs Low\n` +
                `‚Ä¢ Smart contracts: TEAL vs Plutus\n` +
                `‚Ä¢ Adoption: Growing vs Slow\n\n` +
                `**üèÜ Algorand'ƒ±n √úst√ºnl√ºkleri:**\n` +
                `‚Ä¢ Deterministic finality\n` +
                `‚Ä¢ No forking risk\n` +
                `‚Ä¢ Quantum-resistant\n` +
                `‚Ä¢ Carbon negative\n` +
                `‚Ä¢ Institutional adoption\n\n` +
                `**üìä Kar≈üƒ±la≈ütƒ±rma Tablosu:**\n` +
                `| √ñzellik | Algorand | Bitcoin | Ethereum | Solana |\n` +
                `|---------|----------|---------|----------|--------|\n` +
                `| Finality | 4.5s | 60dk | 6-15dk | ~1s |\n` +
                `| TPS | 6000+ | 7 | 15 | 65000+ |\n` +
                `| Fees | $0.0002 | $5-50 | $5-100 | $0.00025 |\n` +
                `| Energy | Ultra-low | High | High | Low |\n` +
                `| Smart Contracts | Yes | No | Yes | Yes |\n\n` +
                `Hangi blockchain ile detaylƒ± kar≈üƒ±la≈ütƒ±rma yapmak istiyorsunuz? üîç`,
                analysisData: null
            }
        }
        
        // Algorand Development and Tools
        if (lowerMessage.includes('algorand') && (lowerMessage.includes('geli≈ütirme') || lowerMessage.includes('development') || lowerMessage.includes('ara√ß') || lowerMessage.includes('tool') || lowerMessage.includes('sdk'))) {
            return {
                content: `üõ†Ô∏è **Algorand Geli≈ütirme Ara√ßlarƒ±:**\n\n` +
                `**üìö Programlama Dilleri:**\n` +
                `‚Ä¢ **Python**: Algorand SDK, PyTeal\n` +
                `‚Ä¢ **JavaScript**: Algorand SDK, React\n` +
                `‚Ä¢ **Go**: Algorand SDK\n` +
                `‚Ä¢ **Java**: Algorand SDK\n` +
                `‚Ä¢ **Rust**: Algorand SDK\n\n` +
                `**üîß Geli≈ütirme Ara√ßlarƒ±:**\n` +
                `‚Ä¢ **AlgoKit**: Modern development toolkit\n` +
                `‚Ä¢ **Algorand Studio**: Visual IDE\n` +
                `‚Ä¢ **AlgoExplorer**: Block explorer\n` +
                `‚Ä¢ **Algorand TestNet**: Test environment\n` +
                `‚Ä¢ **Algorand Sandbox**: Local development\n\n` +
                `**üíª Smart Contract Dilleri:**\n` +
                `‚Ä¢ **TEAL**: Low-level assembly\n` +
                `‚Ä¢ **PyTeal**: Python wrapper\n` +
                `‚Ä¢ **Reach**: High-level language\n` +
                `‚Ä¢ **Beaker**: Development framework\n` +
                `‚Ä¢ **Clarity**: Cross-chain language\n\n` +
                `**üåê Web3 Ara√ßlarƒ±:**\n` +
                `‚Ä¢ **use-wallet**: React wallet integration\n` +
                `‚Ä¢ **algokit-utils**: Utility functions\n` +
                `‚Ä¢ **algosdk**: Core SDK\n` +
                `‚Ä¢ **@algorandfoundation/algokit**: Foundation tools\n\n` +
                `**üìñ Dok√ºmantasyon:**\n` +
                `‚Ä¢ **Developer Portal**: docs.algorand.com\n` +
                `‚Ä¢ **API Reference**: Complete API docs\n` +
                `‚Ä¢ **Tutorials**: Step-by-step guides\n` +
                `‚Ä¢ **Examples**: Code samples\n` +
                `‚Ä¢ **Community**: Discord, GitHub\n\n` +
                `**üöÄ Ba≈ülangƒ±√ß Adƒ±mlarƒ±:**\n` +
                `1. Algorand TestNet hesabƒ± olu≈ütur\n` +
                `2. AlgoKit kurulumu\n` +
                `3. ƒ∞lk smart contract\n` +
                `4. Frontend entegrasyonu\n` +
                `5. MainNet deployment\n\n` +
                `**üí° Proje √ñrnekleri:**\n` +
                `‚Ä¢ DeFi protocols\n` +
                `‚Ä¢ NFT marketplaces\n` +
                `‚Ä¢ Gaming applications\n` +
                `‚Ä¢ CBDC implementations\n` +
                `‚Ä¢ Supply chain solutions\n\n` +
                `Hangi geli≈ütirme konusunda detaylƒ± bilgi almak istiyorsunuz? üéØ`,
                analysisData: null
            }
        }
        
        // Default specific question response
        return {
            content: `ü§î **Spesifik Sorunuz:** "${userMessage}"\n\n` +
            `Bu soruyu daha iyi yanƒ±tlayabilmem i√ßin:\n\n` +
            `‚Ä¢ üìä Portfolyo analizi mi istiyorsunuz?\n` +
            `‚Ä¢ üìà Piyasa trendi mi?\n` +
            `‚Ä¢ üé≤ Risk deƒüerlendirmesi mi?\n` +
            `‚Ä¢ üéØ Yatƒ±rƒ±m √∂nerisi mi?\n\n` +
            `Hangi konuda detaylƒ± bilgi almak istiyorsunuz? üí°`,
            analysisData: null
        }
    }

    /**
     * Handle general queries
     */
    private handleGeneralQuery(userMessage: string): {content: string, analysisData?: any} {
        // Algorand dƒ±≈üƒ±ndaki konular i√ßin uyarƒ±
        const nonAlgorandKeywords = [
            'bitcoin', 'ethereum', 'solana', 'cardano', 'polygon', 'avalanche',
            'binance', 'coinbase', 'kraken', 'crypto', 'kripto', 'borsa',
            'hisse', 'stock', 'forex', 'altcoin', 'meme', 'dogecoin', 'shiba',
            'politika', 'siyaset', 'spor', 'futbol', 'm√ºzik', 'film', 'oyun',
            'yemek', 'seyahat', 'saƒülƒ±k', 'eƒüitim', 'i≈ü', 'kariyer'
        ]
        
        const lowerMessage = userMessage.toLowerCase()
        const isNonAlgorand = nonAlgorandKeywords.some(keyword => lowerMessage.includes(keyword))
        
        if (isNonAlgorand) {
            return {
                content: `ü§ñ **Algorand Blockchain Expert**

Sorry, I can only help with Algorand blockchain technologies.

**My Expertise Areas (ONLY Algorand):**
‚Ä¢ üöÄ **Algorand Technology**: Pure Proof-of-Stake, TEAL, AVM, AlgoKit
‚Ä¢ üí∞ **Algorand DeFi**: Tinyman, PactFi, Folks Finance, WagmiSwap, AlgoFi
‚Ä¢ ü™ô **ALGO Tokenomics**: Governance, staking, tokenomics
‚Ä¢ ‚öñÔ∏è **Algorand vs Other Blockchains**: Bitcoin, Ethereum, Solana comparisons

**Example Questions:**
‚Ä¢ "What is Algorand?"
‚Ä¢ "How does ALGO staking work?"
‚Ä¢ "What are Algorand DeFi protocols?"
‚Ä¢ "What are the differences between Algorand and Ethereum?"

You can ask me questions about Algorand! üéØ`,
                analysisData: { source: 'fallback', restricted: true }
            }
        }
        
        const responses = [
            `ü§ñ **Algorand Blockchain Expert**

I received your message: "${userMessage}". I can only help with Algorand blockchain technologies.

**My Expertise Areas (ONLY Algorand):**
‚Ä¢ üöÄ **Algorand Technology**: Pure Proof-of-Stake, TEAL, AVM, AlgoKit
‚Ä¢ üí∞ **Algorand DeFi**: Tinyman, PactFi, Folks Finance, WagmiSwap, AlgoFi
‚Ä¢ ü™ô **ALGO Tokenomics**: Governance, staking, tokenomics
‚Ä¢ ‚öñÔ∏è **Algorand vs Other Blockchains**: Bitcoin, Ethereum, Solana comparisons

**Quick Access:**
‚Ä¢ "What is Algorand?" - Basic information
‚Ä¢ "How does ALGO staking work?" - Staking guide
‚Ä¢ "What are Algorand DeFi protocols?" - DeFi ecosystem
‚Ä¢ "What are the differences between Algorand and Ethereum?" - Comparison

What Algorand topic would you like to learn about? üéØ`,
            
            `üöÄ **Algorand Blockchain Expert**

I can help you with "${userMessage}". I'm an expert in Algorand and blockchain technologies only.

**Topics I Can Analyze:**
‚Ä¢ üìä **Algorand Staking**: APY optimization, strategies
‚Ä¢ üí∞ **Algorand DeFi**: Yield farming, liquidity mining
‚Ä¢ üõ°Ô∏è **Risk Analysis**: Portfolio security
‚Ä¢ üìà **Performance**: Algorand investment analysis
‚Ä¢ ‚öñÔ∏è **Comparison**: Comparisons with other blockchains

**Example Questions:**
‚Ä¢ "What is Algorand staking strategy?"
‚Ä¢ "What DeFi protocols exist on Algorand?"
‚Ä¢ "How does ALGO tokenomics work?"
‚Ä¢ "How does Algorand compare to Solana?"

How can I help you? ü§ñ`,
            
            `üí¨ **Algorand Blockchain Expert**

Thank you for your message: "${userMessage}"! I'm an expert in the Algorand ecosystem.

**Services I Can Provide:**
‚Ä¢ üéØ **Personalized Algorand Analysis**
‚Ä¢ üìä **Real-time Algorand Data**
‚Ä¢ üõ°Ô∏è **Algorand Risk Assessment**
‚Ä¢ üìà **Algorand Performance Tracking**
‚Ä¢ üí° **Algorand Investment Recommendations**

**My Expertise Areas:**
‚Ä¢ Algorand blockchain technology
‚Ä¢ Algorand DeFi ecosystem
‚Ä¢ ALGO tokenomics and governance
‚Ä¢ Algorand vs other blockchain comparisons

What Algorand topic would you like detailed information about? üîç`
        ]
        
        const randomResponse = responses[Math.floor(Math.random() * responses.length)]
        return { content: randomResponse, analysisData: null }
    }

    /**
     * Get portfolio assessment based on metrics
     */
    private getPortfolioAssessment(metrics: any): string {
        if (metrics.apy > 15 && metrics.riskScore < 0.3) {
            return "M√ºkemmel! Y√ºksek getiri ve d√º≈ü√ºk risk ile √ßok iyi bir portfolyoya sahipsiniz. üéâ"
        } else if (metrics.apy > 10 && metrics.riskScore < 0.5) {
            return "ƒ∞yi bir portfolyo! Dengeli getiri ve risk profili ile g√ºvenli bir yatƒ±rƒ±m stratejiniz var. üëç"
        } else if (metrics.apy < 5) {
            return "Getiri oranƒ±nƒ±z d√º≈ü√ºk. Daha y√ºksek APY'li pool'lara yatƒ±rƒ±m yapmayƒ± d√º≈ü√ºnebilirsiniz. üìà"
        } else if (metrics.riskScore > 0.7) {
            return "Risk seviyeniz y√ºksek. Diversifikasyon yaparak riski azaltabilirsiniz. üõ°Ô∏è"
        } else {
            return "Orta seviye bir portfolyo. Optimizasyon i√ßin daha fazla analiz yapabiliriz. üîç"
        }
    }

    /**
     * Get performance assessment
     */
    private getPerformanceAssessment(metrics: any): string {
        if (metrics.performanceScore > 80) {
            return "Harika performans! Portfolyonuz √ßok iyi √ßalƒ±≈üƒ±yor. üèÜ"
        } else if (metrics.performanceScore > 60) {
            return "ƒ∞yi performans g√∂steriyorsunuz. Biraz optimizasyon ile daha da iyile≈ütirebilirsiniz. üìà"
        } else {
            return "Performansƒ±nƒ±zƒ± artƒ±rmak i√ßin stratejinizi g√∂zden ge√ßirmenizi √∂neririm. üîÑ"
        }
    }

    /**
     * Get performance recommendations
     */
    private getPerformanceRecommendations(metrics: any): string {
        const recommendations = []
        
        if (metrics.apy < 10) {
            recommendations.push("‚Ä¢ Daha y√ºksek APY'li pool'lara yatƒ±rƒ±m yapƒ±n")
        }
        
        if (metrics.riskScore > 0.6) {
            recommendations.push("‚Ä¢ Risk daƒüƒ±lƒ±mƒ±nƒ±zƒ± artƒ±rƒ±n (diversifikasyon)")
        }
        
        if (metrics.volatility > 0.3) {
            recommendations.push("‚Ä¢ Daha stabil pool'lara yatƒ±rƒ±m yapƒ±n")
        }
        
        if (metrics.sharpeRatio < 1.0) {
            recommendations.push("‚Ä¢ Risk-getiri dengesini optimize edin")
        }
        
        if (recommendations.length === 0) {
            recommendations.push("‚Ä¢ Mevcut stratejinizi koruyun, √ßok iyi gidiyor!")
        }
        
        return recommendations.join('\n')
    }

    /**
     * Add user message to chat history
     */
    public addUserMessage(content: string): ChatMessage {
        const message: ChatMessage = {
            id: this.generateMessageId(),
            type: 'user',
            content,
            timestamp: new Date()
        }
        
        this.chatHistory.push(message)
        return message
    }

    /**
     * Add AI message to chat history
     */
    public addAIMessage(content: string, analysisData?: any): ChatMessage {
        const message: ChatMessage = {
            id: this.generateMessageId(),
            type: 'ai',
            content,
            timestamp: new Date(),
            analysisData
        }
        
        this.chatHistory.push(message)
        return message
    }

    /**
     * Generate unique message ID
     */
    private generateMessageId(): string {
        return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    }

    /**
     * Get chat history
     */
    getChatHistory(): ChatMessage[] {
        return [...this.chatHistory]
    }

    /**
     * Clear chat history
     */
    clearChatHistory(): void {
        this.chatHistory = []
    }

    /**
     * Update context
     */
    updateContext(newContext: Partial<ChatContext>): void {
        this.context = { ...this.context, ...newContext }
    }

    /**
     * Get AI API status
     */
    getAIStatus(): {configured: boolean, provider: string} {
        return this.geminiApiService.getAPIStatus()
    }
}
