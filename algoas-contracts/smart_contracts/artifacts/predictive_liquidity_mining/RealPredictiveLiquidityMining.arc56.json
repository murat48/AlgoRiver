{
    "name": "RealPredictiveLiquidityMining",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Kontrat\u0131 ba\u015flat - GER\u00c7EK ba\u015flang\u0131\u00e7 de\u011ferleri",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createPool",
            "args": [
                {
                    "type": "string",
                    "name": "poolName"
                },
                {
                    "type": "string",
                    "name": "initialAPY"
                },
                {
                    "type": "string",
                    "name": "riskLevel"
                },
                {
                    "type": "string",
                    "name": "minStake"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new liquidity pool with REAL state tracking",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "stakeInPool",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "amount"
                },
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Stake tokens in a specific pool - GER\u00c7EK blockchain i\u015flemi",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unstakeFromPool",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "amount"
                },
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unstake tokens from a specific pool - GER\u00c7EK blockchain i\u015flemi",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserStake",
            "args": [
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get user's total staked amount - GER\u00c7EK blockchain verisi",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPoolStats",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get pool statistics - GER\u00c7EK blockchain verisi",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getAllTransactions",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get all transactions on the platform - GER\u00c7EK blockchain verisi",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTransactionSummary",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get transaction summary statistics - GER\u00c7EK blockchain verisi",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPoolTransactions",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get all transactions for a specific pool - GER\u00c7EK blockchain verisi",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlatformStats",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get platform statistics - GER\u00c7EK blockchain verisi",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getVolumeStatistics",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get volume statistics - GER\u00c7EK blockchain verisi",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getLastResetTime",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get daily reset time - GER\u00c7EK blockchain verisi",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resetDailyCounters",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reset daily counters (admin function) - GER\u00c7EK state g\u00fcncelleme",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Predictive Liquidity Mining Platform Smart Contract v4.0 DYNAMIC\nFeatures: AI-powered predictions, dynamic rewards, risk scoring, Data-Donor DAO\nNEW: FULLY Dynamic transaction viewing functions with REAL blockchain data",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 10,
                "bytes": 0
            },
            "local": {
                "ints": 4,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "totalPools": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxQb29scw=="
                },
                "totalStaked": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxTdGFrZWQ="
                },
                "platformFee": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxhdGZvcm1GZWU="
                },
                "totalTransactionCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxUcmFuc2FjdGlvbkNvdW50"
                },
                "totalVolume": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxWb2x1bWU="
                },
                "dailyTransactionCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGFpbHlUcmFuc2FjdGlvbkNvdW50"
                },
                "dailyVolume": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGFpbHlWb2x1bWU="
                },
                "lastResetTime": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdFJlc2V0VGltZQ=="
                },
                "poolTransactionCounts": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cG9vbFRyYW5zYWN0aW9uQ291bnRz"
                },
                "poolVolumes": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cG9vbFZvbHVtZXM="
                }
            },
            "local": {
                "userStakedAmount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dXNlclN0YWtlZEFtb3VudA=="
                },
                "userTransactionCount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dXNlclRyYW5zYWN0aW9uQ291bnQ="
                },
                "userTotalVolume": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dXNlclRvdGFsVm9sdW1l"
                },
                "lastStakeTime": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdFN0YWtlVGltZQ=="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1310
                    ],
                    "errorMessage": "Insufficient total stake"
                },
                {
                    "pc": [
                        272,
                        296,
                        313,
                        395,
                        475,
                        553,
                        636,
                        711,
                        766,
                        829,
                        871,
                        913,
                        961
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        965
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        275,
                        299,
                        316,
                        398,
                        478,
                        556,
                        639,
                        714,
                        769,
                        832,
                        874,
                        916
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1097,
                        1106,
                        1225,
                        1307,
                        1314,
                        1403,
                        1414,
                        1425,
                        1435,
                        1447,
                        1458,
                        1505
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}