{
    "name": "PredictiveLiquidityMiningV2",
    "structs": {},
    "methods": [
        {
            "name": "createPool",
            "args": [
                {
                    "type": "string",
                    "name": "poolName"
                },
                {
                    "type": "string",
                    "name": "initialAPY"
                },
                {
                    "type": "string",
                    "name": "riskLevel"
                },
                {
                    "type": "string",
                    "name": "minStake"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new liquidity pool with AI prediction capabilities",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "stakeInPool",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "amount"
                },
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Stake tokens in a specific pool",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unstakeFromPool",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "amount"
                },
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unstake tokens from a specific pool",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emergencyWithdraw",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Emergency withdraw (with potential penalties)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserStake",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get user's staked amount in a pool",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateAIPrediction",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "newAPY"
                },
                {
                    "type": "string",
                    "name": "confidence"
                },
                {
                    "type": "string",
                    "name": "timeframe"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update AI prediction for a pool (admin/oracle function)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "submitTrainingData",
            "args": [
                {
                    "type": "string",
                    "name": "contributor"
                },
                {
                    "type": "string",
                    "name": "dataType"
                },
                {
                    "type": "string",
                    "name": "dataHash"
                },
                {
                    "type": "string",
                    "name": "poolId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Submit training data for AI models (Data-Donor DAO)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "voteOnProposal",
            "args": [
                {
                    "type": "string",
                    "name": "proposalId"
                },
                {
                    "type": "bool",
                    "name": "vote"
                },
                {
                    "type": "string",
                    "name": "voter"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Vote on DAO governance proposals",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateUserRiskScore",
            "args": [
                {
                    "type": "string",
                    "name": "userAddress"
                },
                {
                    "type": "string",
                    "name": "portfolioValue"
                },
                {
                    "type": "string",
                    "name": "tradingFrequency"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Calculate user's risk score based on behavior and portfolio",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claimRewards",
            "args": [
                {
                    "type": "string",
                    "name": "userAddress"
                },
                {
                    "type": "string",
                    "name": "poolId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claim rewards with AI-enhanced calculations",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPoolStats",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get pool statistics with AI predictions",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emergencyPause",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Emergency pause mechanism for security",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserPortfolio",
            "args": [
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get user portfolio summary",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlatformAnalytics",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get platform analytics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getAllTransactions",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get all transactions on the platform",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTransactionSummary",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get transaction summary statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserTransactions",
            "args": [
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get all transactions for a specific user",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPoolTransactions",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get all transactions for a specific pool",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTransactionsByType",
            "args": [
                {
                    "type": "string",
                    "name": "txType"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get transactions filtered by type",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTransactionsByDateRange",
            "args": [
                {
                    "type": "string",
                    "name": "startDate"
                },
                {
                    "type": "string",
                    "name": "endDate"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get transactions within a date range",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTransactionDetails",
            "args": [
                {
                    "type": "string",
                    "name": "txId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get detailed information about a specific transaction",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTransactionAnalytics",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get transaction history for analytics dashboard",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPendingTransactions",
            "args": [
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get pending/failed transactions for user",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getVolumeStatistics",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get transaction volume statistics",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Predictive Liquidity Mining Platform Smart Contract v2.0\nFeatures: AI-powered predictions, dynamic rewards, risk scoring, Data-Donor DAO\nNEW: Unstake functions, Emergency withdraw, User stake queries",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        213,
                        578,
                        608,
                        1010,
                        1040,
                        1076,
                        1106,
                        1136,
                        1166,
                        1436,
                        1842,
                        2012,
                        2042,
                        2118,
                        2148,
                        2184,
                        2226,
                        2267,
                        2315,
                        2363,
                        2399,
                        2435,
                        2477,
                        2519
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2572
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        216,
                        581,
                        611,
                        1013,
                        1043,
                        1079,
                        1109,
                        1139,
                        1169,
                        1439,
                        1845,
                        2015,
                        2045,
                        2121,
                        2151,
                        2187,
                        2229,
                        2270,
                        2318,
                        2366,
                        2402,
                        2438,
                        2480,
                        2522
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}