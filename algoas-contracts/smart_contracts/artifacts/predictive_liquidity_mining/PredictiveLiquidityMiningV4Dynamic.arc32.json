{
    "hints": {
        "createPool(string,string,string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stakeInPool(string,string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unstakeFromPool(string,string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "emergencyWithdraw(string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserStake(string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateAIPrediction(string,string,string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "submitTrainingData(string,string,string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "voteOnProposal(string,bool,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "calculateUserRiskScore(string,string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimRewards(string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolStats(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "emergencyPause()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserPortfolio(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPlatformAnalytics()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getAllTransactions()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTransactionSummary()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserTransactions(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolTransactions(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTransactionsByType(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTransactionsByDateRange(string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTransactionDetails(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTransactionAnalytics()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPendingTransactions(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getVolumeStatistics()string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "PredictiveLiquidityMiningV4Dynamic",
        "desc": "Predictive Liquidity Mining Platform Smart Contract v4.0 DYNAMIC\nFeatures: AI-powered predictions, dynamic rewards, risk scoring, Data-Donor DAO\nNEW: FULLY Dynamic transaction viewing functions, Real-time analytics, Enhanced reporting",
        "methods": [
            {
                "name": "createPool",
                "args": [
                    {
                        "type": "string",
                        "name": "poolName"
                    },
                    {
                        "type": "string",
                        "name": "initialAPY"
                    },
                    {
                        "type": "string",
                        "name": "riskLevel"
                    },
                    {
                        "type": "string",
                        "name": "minStake"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Create a new liquidity pool with AI prediction capabilities"
            },
            {
                "name": "stakeInPool",
                "args": [
                    {
                        "type": "string",
                        "name": "poolId"
                    },
                    {
                        "type": "string",
                        "name": "amount"
                    },
                    {
                        "type": "string",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Stake tokens in a specific pool"
            },
            {
                "name": "unstakeFromPool",
                "args": [
                    {
                        "type": "string",
                        "name": "poolId"
                    },
                    {
                        "type": "string",
                        "name": "amount"
                    },
                    {
                        "type": "string",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Unstake tokens from a specific pool"
            },
            {
                "name": "emergencyWithdraw",
                "args": [
                    {
                        "type": "string",
                        "name": "poolId"
                    },
                    {
                        "type": "string",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Emergency withdraw (with potential penalties)"
            },
            {
                "name": "getUserStake",
                "args": [
                    {
                        "type": "string",
                        "name": "poolId"
                    },
                    {
                        "type": "string",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get user's staked amount in a pool"
            },
            {
                "name": "updateAIPrediction",
                "args": [
                    {
                        "type": "string",
                        "name": "poolId"
                    },
                    {
                        "type": "string",
                        "name": "newAPY"
                    },
                    {
                        "type": "string",
                        "name": "confidence"
                    },
                    {
                        "type": "string",
                        "name": "timeframe"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Update AI prediction for a pool (admin/oracle function)"
            },
            {
                "name": "submitTrainingData",
                "args": [
                    {
                        "type": "string",
                        "name": "contributor"
                    },
                    {
                        "type": "string",
                        "name": "dataType"
                    },
                    {
                        "type": "string",
                        "name": "dataHash"
                    },
                    {
                        "type": "string",
                        "name": "poolId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Submit training data for AI models (Data-Donor DAO)"
            },
            {
                "name": "voteOnProposal",
                "args": [
                    {
                        "type": "string",
                        "name": "proposalId"
                    },
                    {
                        "type": "bool",
                        "name": "vote"
                    },
                    {
                        "type": "string",
                        "name": "voter"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Vote on DAO governance proposals"
            },
            {
                "name": "calculateUserRiskScore",
                "args": [
                    {
                        "type": "string",
                        "name": "userAddress"
                    },
                    {
                        "type": "string",
                        "name": "portfolioValue"
                    },
                    {
                        "type": "string",
                        "name": "tradingFrequency"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Calculate user's risk score based on behavior and portfolio"
            },
            {
                "name": "claimRewards",
                "args": [
                    {
                        "type": "string",
                        "name": "userAddress"
                    },
                    {
                        "type": "string",
                        "name": "poolId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Claim rewards with AI-enhanced calculations"
            },
            {
                "name": "getPoolStats",
                "args": [
                    {
                        "type": "string",
                        "name": "poolId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get pool statistics with AI predictions"
            },
            {
                "name": "emergencyPause",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Emergency pause mechanism for security"
            },
            {
                "name": "getUserPortfolio",
                "args": [
                    {
                        "type": "string",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get user portfolio summary"
            },
            {
                "name": "getPlatformAnalytics",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get platform analytics"
            },
            {
                "name": "getAllTransactions",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get all transactions on the platform"
            },
            {
                "name": "getTransactionSummary",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get transaction summary statistics"
            },
            {
                "name": "getUserTransactions",
                "args": [
                    {
                        "type": "string",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get all transactions for a specific user"
            },
            {
                "name": "getPoolTransactions",
                "args": [
                    {
                        "type": "string",
                        "name": "poolId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get all transactions for a specific pool"
            },
            {
                "name": "getTransactionsByType",
                "args": [
                    {
                        "type": "string",
                        "name": "txType"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get transactions filtered by type"
            },
            {
                "name": "getTransactionsByDateRange",
                "args": [
                    {
                        "type": "string",
                        "name": "startDate"
                    },
                    {
                        "type": "string",
                        "name": "endDate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get transactions within a date range"
            },
            {
                "name": "getTransactionDetails",
                "args": [
                    {
                        "type": "string",
                        "name": "txId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get detailed information about a specific transaction"
            },
            {
                "name": "getTransactionAnalytics",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get transaction history for analytics dashboard"
            },
            {
                "name": "getPendingTransactions",
                "args": [
                    {
                        "type": "string",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get pending/failed transactions for user"
            },
            {
                "name": "getVolumeStatistics",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Get transaction volume statistics"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}