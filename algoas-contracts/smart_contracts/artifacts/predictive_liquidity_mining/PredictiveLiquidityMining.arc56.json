{
    "name": "PredictiveLiquidityMining",
    "structs": {},
    "methods": [
        {
            "name": "createPool",
            "args": [
                {
                    "type": "string",
                    "name": "poolName"
                },
                {
                    "type": "string",
                    "name": "initialAPY"
                },
                {
                    "type": "string",
                    "name": "riskLevel"
                },
                {
                    "type": "string",
                    "name": "minStake"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new liquidity pool with AI prediction capabilities",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "stakeInPool",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "amount"
                },
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Stake tokens in a specific pool",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unstakeFromPool",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "amount"
                },
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unstake tokens from a specific pool",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emergencyWithdraw",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Emergency withdraw (with potential penalties)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserStake",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get user's staked amount in a pool",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateAIPrediction",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                },
                {
                    "type": "string",
                    "name": "newAPY"
                },
                {
                    "type": "string",
                    "name": "confidence"
                },
                {
                    "type": "string",
                    "name": "timeframe"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update AI prediction for a pool (admin/oracle function)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "submitTrainingData",
            "args": [
                {
                    "type": "string",
                    "name": "contributor"
                },
                {
                    "type": "string",
                    "name": "dataType"
                },
                {
                    "type": "string",
                    "name": "dataHash"
                },
                {
                    "type": "string",
                    "name": "poolId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Submit training data for AI models (Data-Donor DAO)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "voteOnProposal",
            "args": [
                {
                    "type": "string",
                    "name": "proposalId"
                },
                {
                    "type": "bool",
                    "name": "vote"
                },
                {
                    "type": "string",
                    "name": "voter"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Vote on DAO governance proposals",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateUserRiskScore",
            "args": [
                {
                    "type": "string",
                    "name": "userAddress"
                },
                {
                    "type": "string",
                    "name": "portfolioValue"
                },
                {
                    "type": "string",
                    "name": "tradingFrequency"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Calculate user's risk score based on behavior and portfolio",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claimRewards",
            "args": [
                {
                    "type": "string",
                    "name": "userAddress"
                },
                {
                    "type": "string",
                    "name": "poolId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claim rewards with AI-enhanced calculations",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPoolStats",
            "args": [
                {
                    "type": "string",
                    "name": "poolId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get pool statistics with AI predictions",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emergencyPause",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Emergency pause mechanism for security",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserPortfolio",
            "args": [
                {
                    "type": "string",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get user portfolio summary",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPlatformAnalytics",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get platform analytics",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Predictive Liquidity Mining Platform Smart Contract\nFeatures: AI-powered predictions, dynamic rewards, risk scoring, Data-Donor DAO",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        143,
                        313,
                        343,
                        419,
                        449,
                        485,
                        527,
                        568,
                        616,
                        664,
                        700,
                        736,
                        778,
                        820
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        873
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        146,
                        316,
                        346,
                        422,
                        452,
                        488,
                        530,
                        571,
                        619,
                        667,
                        703,
                        739,
                        781,
                        823
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAQAmAwQVH3x1BVBvb2wgCSBieSB1c2VyIDEbQQNAgg4Ew7mSKgSWzqupBFpBt6EE5xm9vQSpC3cvBNhCHx0EbGQSSAQwxh/vBJDsyQ4EY7dEJQTd+p8oBA0FHXoE+wtOYwTBiTT7NhoAjg4CpwJ9AlMCLwILAdsBqwGCAVgBNAEWAMoArAACI0MxGRREMRhEgJ0BFR98dQCXUGxhdGZvcm0gQW5hbHl0aWNzOiBUb3RhbCBwb29sczogNDcsIEFjdGl2ZSBtaW5lcnM6IDEsMjM0LCBUb3RhbCByZXdhcmRzIGRpc3RyaWJ1dGVkOiAxMjUsMDAwIHRva2VucywgQXZlcmFnZSBBUFk6IDEyLjUlLCBBSSBwcmVkaWN0aW9uIGFjY3VyYWN5OiA4Ny4zJbAiQzEZFEQxGEQ2GgFXAgCIBg5JFRZXBgJMUChMULAiQzEZFEQxGESAQBUffHUAOlBsYXRmb3JtIHBhdXNlZCBmb3IgbWFpbnRlbmFuY2UuIEFsbCBvcGVyYXRpb25zIHN1c3BlbmRlZC6wIkMxGRREMRhENhoBVwIAiAVFSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIAiAS5SRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCVwIANhoDVwIAiAQySRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIANhoCI1M2GgNXAgCIA8NJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgA2GgRXAgCIAtZJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgA2GgRXAgCIAlhJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAexJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAXNJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIAQlJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIAKNJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgA2GgRXAgCIABlJFRZXBgJMUChMULAiQzEZQP0kMRgURCJDigQBKYv8UIAOIGNyZWF0ZWQgd2l0aCBQi/1QgBMlIEFQWSwgcmlzayBsZXZlbDogUIv+UIARLCBtaW5pbXVtIHN0YWtlOiBQi/9QgAsgbWljcm9BbGdvc1CJigMBgBRTdWNjZXNzZnVsbHkgc3Rha2VkIIv+UIAUIG1pY3JvQWxnb3MgaW4gcG9vbCBQi/1QKlCL/1CJigMBgBZTdWNjZXNzZnVsbHkgdW5zdGFrZWQgi/5QgBYgbWljcm9BbGdvcyBmcm9tIHBvb2wgUIv9UCpQi/9QiYoCAYAiRW1lcmdlbmN5IHdpdGhkcmF3YWwgZXhlY3V0ZWQgZm9yIIv/UIALIGZyb20gcG9vbCBQi/5QgBYuIFBlbmFsdGllcyBtYXkgYXBwbHkuUImKAgGABVVzZXIgi/9QgBsgaGFzIHN0YWtlZCBhbW91bnQgaW4gcG9vbCBQi/5QgBY6IDEsNTAwLDAwMCBtaWNyb0FsZ29zUImKBAEpi/xQgBggQUkgcHJlZGljdGlvbiB1cGRhdGVkOiBQi/1QgAslIEFQWSB3aXRoIFCL/lCAESUgY29uZmlkZW5jZSBmb3IgUIv/UImKBAGL/YALbWFya2V0X2RhdGESQQBlgAMxMDCAEkRhdGEgc3VibWl0dGVkIGJ5IIv8UIAKIGZvciBwb29sIFCL/1CADS4gRGF0YSBoYXNoOiBQi/5QgBUuIEdvdmVybmFuY2UgcmV3YXJkOiBQTFCACCB0b2tlbnMuUImL/YAObGlxdWlkaXR5X2RhdGESQQAIgAMxNTBC/4KL/YANdXNlcl9iZWhhdmlvchJBAAiAAzIwMEL/ZYACNTBC/16KAwGL/kEAMoADRk9SgBZWb3RlIGNhc3Qgb24gcHJvcG9zYWwgi/1QgAQgYnkgUIv/UIACOiBQTFCJgAdBR0FJTlNUQv/HigMBgA9SaXNrIHNjb3JlIGZvciCL/VCAIjogNjUvMTAwIGJhc2VkIG9uIHBvcnRmb2xpbyB2YWx1ZSBQi/5QgBcgYW5kIHRyYWRpbmcgZnJlcXVlbmN5IFCL/1CJigIBi/6ACSBjbGFpbWVkIFCAAzEyMFCAEiB0b2tlbnMgZnJvbSBwb29sIFCL/1CANS4gUmV3YXJkcyBjYWxjdWxhdGVkIHVzaW5nIEFJLXBvd2VyZWQgZHluYW1pYyBzeXN0ZW0uUImKAQEpi/9QgFQ6IEN1cnJlbnQgQVBZIDE1LjUlLCBQcmVkaWN0ZWQgQVBZIDE4LjIlICg4NyUgY29uZmlkZW5jZSksIFRWTDogMSw1MDAsMDAwIG1pY3JvQWxnb3NQiYoBAYAOUG9ydGZvbGlvIGZvciCL/1CASDogQWN0aXZlIHBvc2l0aW9ucyB0cmFja2VkLCByZXdhcmRzIGF2YWlsYWJsZSwgcmlzayBhc3Nlc3NtZW50IGNvbXBsZXRlZFCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}